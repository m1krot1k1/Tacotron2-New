#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ COMPREHENSIVE TESTS: Advanced Model Checkpointing System Integration
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã checkpoint'–æ–≤

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
1. IntelligentCheckpointManager - –±–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
2. MultiCriteriaModelSelector - –≤—ã–±–æ—Ä –ª—É—á—à–∏—Ö –º–æ–¥–µ–ª–µ–π  
3. AutoRecoverySystem - –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö
4. CheckpointHealthAnalyzer - –∞–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è checkpoint'–æ–≤
5. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Context-Aware Manager
6. –°–∏–º—É–ª—è—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–±–æ–µ–≤ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
"""

import os
import sys
import time
import tempfile
import shutil
import torch
import torch.nn as nn
import numpy as np
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º current directory –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.getcwd())

try:
    from advanced_model_checkpointing_system import (
        IntelligentCheckpointManager, 
        MultiCriteriaModelSelector,
        AutoRecoverySystem,
        CheckpointHealthAnalyzer,
        CheckpointMetrics,
        CheckpointQuality,
        CheckpointInfo,
        create_checkpoint_manager
    )
    CHECKPOINTING_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Advanced Checkpointing System –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    CHECKPOINTING_AVAILABLE = False

try:
    from context_aware_training_manager import ContextAwareTrainingManager
    CONTEXT_MANAGER_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è Context-Aware Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")
    CONTEXT_MANAGER_AVAILABLE = False

class SimpleTestModel(nn.Module):
    """–ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    def __init__(self):
        super().__init__()
        self.linear1 = nn.Linear(10, 20)
        self.linear2 = nn.Linear(20, 5)
        self.dropout = nn.Dropout(0.1)
        
    def forward(self, x):
        x = torch.relu(self.linear1(x))
        x = self.dropout(x)
        return self.linear2(x)

def create_test_metrics(step: int, 
                       validation_loss: float = 5.0,
                       attention_diagonality: float = 0.6,
                       has_problems: bool = False) -> CheckpointMetrics:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ checkpoint'–∞"""
    return CheckpointMetrics(
        epoch=step // 100,
        global_step=step,
        validation_loss=validation_loss,
        training_loss=validation_loss + 0.5,
        learning_rate=1e-3,
        attention_diagonality=attention_diagonality,
        gate_accuracy=0.85,
        mel_reconstruction_quality=0.75,
        attention_stability=0.7,
        gradient_norm=2.5,
        gradient_stability=1.2,
        loss_trend=-0.05,
        convergence_score=0.6,
        timestamp=datetime.now().isoformat(),
        training_time=60.0,
        model_size_mb=150.0,
        memory_usage_mb=2048.0,
        has_nan_weights=has_problems and step % 5 == 0,
        has_gradient_explosion=has_problems and step % 3 == 0,
        has_attention_collapse=attention_diagonality < 0.1,
        is_stable=not has_problems
    )

def test_multi_criteria_model_selector():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MultiCriteriaModelSelector"""
    print("\nüß™ –¢–ï–°–¢ 1: MultiCriteriaModelSelector")
    
    try:
        selector = MultiCriteriaModelSelector()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö checkpoint'–æ–≤ —Å —Ä–∞–∑–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        checkpoints = []
        
        # –û—Ç–ª–∏—á–Ω—ã–π checkpoint
        excellent_metrics = create_test_metrics(
            step=1000, validation_loss=2.0, attention_diagonality=0.8
        )
        excellent_cp = CheckpointInfo(
            path="test_excellent.pt",
            metrics=excellent_metrics,
            quality=CheckpointQuality.EXCELLENT,
            health_score=0.0
        )
        checkpoints.append(excellent_cp)
        
        # –•–æ—Ä–æ—à–∏–π checkpoint
        good_metrics = create_test_metrics(
            step=800, validation_loss=4.0, attention_diagonality=0.6
        )
        good_cp = CheckpointInfo(
            path="test_good.pt",
            metrics=good_metrics,
            quality=CheckpointQuality.GOOD,
            health_score=0.0
        )
        checkpoints.append(good_cp)
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π checkpoint
        critical_metrics = create_test_metrics(
            step=500, validation_loss=50.0, attention_diagonality=0.05, has_problems=True
        )
        critical_cp = CheckpointInfo(
            path="test_critical.pt", 
            metrics=critical_metrics,
            quality=CheckpointQuality.CRITICAL,
            health_score=0.0
        )
        checkpoints.append(critical_cp)
        
        # –†–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ checkpoint'–æ–≤
        ranked_checkpoints = selector.rank_checkpoints(checkpoints)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        assert len(ranked_checkpoints) == 3, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 checkpoint'–∞"
        assert ranked_checkpoints[0].is_best, "–ü–µ—Ä–≤—ã–π checkpoint –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ª—É—á—à–∏–º"
        assert ranked_checkpoints[0].health_score > ranked_checkpoints[1].health_score, "Score –¥–æ–ª–∂–Ω—ã —É–±—ã–≤–∞—Ç—å"
        assert ranked_checkpoints[1].health_score > ranked_checkpoints[2].health_score, "Score –¥–æ–ª–∂–Ω—ã —É–±—ã–≤–∞—Ç—å"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ª—É—á—à–∏–π checkpoint –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª—É—á—à–∏–π (excellent)
        assert ranked_checkpoints[0].path == "test_excellent.pt", "–õ—É—á—à–∏–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å excellent"
        
        print("‚úÖ MultiCriteriaModelSelector: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞–Ω–∂–∏—Ä—É–µ—Ç checkpoint'—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå MultiCriteriaModelSelector: {e}")
        return False

def test_checkpoint_health_analyzer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CheckpointHealthAnalyzer"""
    print("\nüß™ –¢–ï–°–¢ 2: CheckpointHealthAnalyzer")
    
    try:
        analyzer = CheckpointHealthAnalyzer()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ checkpoint'–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        with tempfile.TemporaryDirectory() as temp_dir:
            test_model = SimpleTestModel()
            optimizer = torch.optim.Adam(test_model.parameters())
            
            # –•–æ—Ä–æ—à–∏–π checkpoint
            good_checkpoint_path = Path(temp_dir) / "good_checkpoint.pt"
            torch.save({
                'model_state_dict': test_model.state_dict(),
                'optimizer_state_dict': optimizer.state_dict(),
                'epoch': 10,
                'global_step': 1000,
                'validation_loss': 3.5,
                'attention_diagonality': 0.7
            }, good_checkpoint_path)
            
            # –ê–Ω–∞–ª–∏–∑ —Ö–æ—Ä–æ—à–µ–≥–æ checkpoint'–∞
            quality, issues = analyzer.analyze_checkpoint_health(str(good_checkpoint_path))
            
            assert quality in [CheckpointQuality.EXCELLENT, CheckpointQuality.GOOD], f"–û–∂–∏–¥–∞–ª—Å—è —Ö–æ—Ä–æ—à–∏–π checkpoint, –ø–æ–ª—É—á–µ–Ω: {quality}"
            print(f"‚úÖ –•–æ—Ä–æ—à–∏–π checkpoint –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {quality.value}")
            
            # –ü–ª–æ—Ö–æ–π checkpoint —Å NaN –≤–µ—Å–∞–º–∏
            bad_model = SimpleTestModel()
            # –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –ø–æ—Ä—Ç–∏–º –≤–µ—Å–∞
            with torch.no_grad():
                bad_model.linear1.weight.fill_(float('nan'))
            
            bad_checkpoint_path = Path(temp_dir) / "bad_checkpoint.pt"
            torch.save({
                'model_state_dict': bad_model.state_dict(),
                'epoch': 5,
                'global_step': 500,
                'validation_loss': 100.0
            }, bad_checkpoint_path)
            
            # –ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ö–æ–≥–æ checkpoint'–∞
            quality, issues = analyzer.analyze_checkpoint_health(str(bad_checkpoint_path))
            
            assert quality == CheckpointQuality.CRITICAL, f"–û–∂–∏–¥–∞–ª—Å—è CRITICAL, –ø–æ–ª—É—á–µ–Ω: {quality}"
            assert len(issues) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã"
            assert any("NaN" in issue for issue in issues), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å NaN"
            
            print(f"‚úÖ –ü–ª–æ—Ö–æ–π checkpoint –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫: {quality.value}")
            print(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}")
        
        print("‚úÖ CheckpointHealthAnalyzer: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ checkpoint'–æ–≤")
        return True
        
    except Exception as e:
        print(f"‚ùå CheckpointHealthAnalyzer: {e}")
        return False

def test_intelligent_checkpoint_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ IntelligentCheckpointManager"""
    print("\nüß™ –¢–ï–°–¢ 3: IntelligentCheckpointManager")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            # –°–æ–∑–¥–∞–Ω–∏–µ checkpoint manager'–∞
            manager = IntelligentCheckpointManager(
                checkpoint_dir=temp_dir,
                max_checkpoints=3,
                min_save_interval=10
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
            model = SimpleTestModel()
            optimizer = torch.optim.Adam(model.parameters())
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö checkpoint'–æ–≤
            saved_paths = []
            
            for step in [100, 200, 300, 400]:
                metrics = create_test_metrics(
                    step=step,
                    validation_loss=10.0 - step/100.0,  # –£–ª—É—á—à–µ–Ω–∏–µ —Å –∫–∞–∂–¥—ã–º —à–∞–≥–æ–º
                    attention_diagonality=0.4 + step/1000.0  # –£–ª—É—á—à–µ–Ω–∏–µ attention
                )
                
                path = manager.save_checkpoint(
                    model=model,
                    optimizer=optimizer,
                    metrics=metrics,
                    force_save=True
                )
                
                if path:
                    saved_paths.append(path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ checkpoint'—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
            assert len(saved_paths) >= 3, f"–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –º–∏–Ω–∏–º—É–º 3 checkpoint'–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(saved_paths)}"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏—Å–∫–æ–≤—ã–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º
            assert len(manager.checkpoints) <= manager.max_checkpoints, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç checkpoint'–æ–≤"
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ checkpoint'–∞
            best_checkpoint = manager.get_best_checkpoint()
            assert best_checkpoint is not None, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω –ª—É—á—à–∏–π checkpoint"
            assert best_checkpoint.is_best, "Checkpoint –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ª—É—á—à–∏–π"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
            status = manager.get_status_report()
            assert status['total_checkpoints'] > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å checkpoint'—ã –≤ —Å—Ç–∞—Ç—É—Å–µ"
            assert 'best_checkpoint' in status, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª—É—á—à–µ–º checkpoint'–µ"
            
            print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ checkpoint'–æ–≤: {len(saved_paths)}")
            print(f"‚úÖ –õ—É—á—à–∏–π checkpoint score: {best_checkpoint.health_score:.4f}")
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {status['status']}")
        
        print("‚úÖ IntelligentCheckpointManager: –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return True
        
    except Exception as e:
        print(f"‚ùå IntelligentCheckpointManager: {e}")
        return False

def test_auto_recovery_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AutoRecoverySystem"""
    print("\nüß™ –¢–ï–°–¢ 4: AutoRecoverySystem")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            # –°–æ–∑–¥–∞–Ω–∏–µ checkpoint manager'–∞ —Å recovery system
            manager = IntelligentCheckpointManager(
                checkpoint_dir=temp_dir,
                max_checkpoints=5
            )
            
            model = SimpleTestModel()
            optimizer = torch.optim.Adam(model.parameters())
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ö–æ—Ä–æ—à–µ–≥–æ checkpoint'–∞
            good_metrics = create_test_metrics(
                step=1000,
                validation_loss=3.0,
                attention_diagonality=0.7
            )
            
            good_path = manager.save_checkpoint(
                model=model,
                optimizer=optimizer,
                metrics=good_metrics,
                force_save=True
            )
            
            assert good_path is not None, "–•–æ—Ä–æ—à–∏–π checkpoint –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
            
            # –°–∏–º—É–ª—è—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—è
            critical_metrics = create_test_metrics(
                step=1100,
                validation_loss=float('inf'),  # NaN loss
                attention_diagonality=0.001,  # –ö–æ–ª–ª–∞–ø—Å attention
                has_problems=True
            )
            critical_metrics.gradient_norm = 5000.0  # –í–∑—Ä—ã–≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—è
            is_critical = manager.auto_recovery.detect_critical_failure(critical_metrics)
            assert is_critical, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±–Ω–∞—Ä—É–∂–µ–Ω"
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            recovery_success = manager.check_and_recover(model, optimizer, critical_metrics)
            
            # Recovery –º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ checkpoint'–∞, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è
            print(f"‚úÖ –î–µ—Ç–µ–∫—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—è: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"‚úÖ –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {'—É—Å–ø–µ—à–Ω–æ' if recovery_success else '–≤—ã–ø–æ–ª–Ω–µ–Ω–∞'}")
        
        print("‚úÖ AutoRecoverySystem: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç —Å–±–æ–∏ –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
        return True
        
    except Exception as e:
        print(f"‚ùå AutoRecoverySystem: {e}")
        return False

def test_emergency_checkpoint_saving():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è checkpoint'–æ–≤"""
    print("\nüß™ –¢–ï–°–¢ 5: Emergency Checkpoint Saving")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            manager = IntelligentCheckpointManager(checkpoint_dir=temp_dir)
            
            model = SimpleTestModel()
            optimizer = torch.optim.Adam(model.parameters())
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –ø–ª–æ—Ö–∏—Ö –º–µ—Ç—Ä–∏–∫
            emergency_metrics = create_test_metrics(
                step=500,
                validation_loss=1000.0,  # –û—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–π loss
                attention_diagonality=0.001,  # –ö–æ–ª–ª–∞–ø—Å attention
                has_problems=True
            )
            
            # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            emergency_path = manager.save_checkpoint(
                model=model,
                optimizer=optimizer,
                metrics=emergency_metrics,
                is_emergency=True
            )
            
            assert emergency_path is not None, "–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π checkpoint –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
            assert "emergency" in emergency_path, "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 'emergency' –≤ –∏–º–µ–Ω–∏"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ checkpoint –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π
            emergency_checkpoints = [cp for cp in manager.checkpoints if cp.is_emergency_backup]
            assert len(emergency_checkpoints) > 0, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π checkpoint"
            
            print(f"‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π checkpoint —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {os.path.basename(emergency_path)}")
        
        print("‚úÖ Emergency Checkpoint Saving: –†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå Emergency Checkpoint Saving: {e}")
        return False

def test_integration_with_context_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Context-Aware Manager"""
    print("\nüß™ –¢–ï–°–¢ 6: Integration with Context-Aware Manager")
    
    if not CONTEXT_MANAGER_AVAILABLE:
        print("‚ö†Ô∏è Context-Aware Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç")
        return True
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            checkpoint_manager = IntelligentCheckpointManager(checkpoint_dir=temp_dir)
            
            context_config = {
                'initial_lr': 1e-3,
                'history_size': 50,
                'logging_level': 'INFO'
            }
            context_manager = ContextAwareTrainingManager(context_config)
            
            # –°–∏–º—É–ª—è—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ checkpoint'–∞ –≤ context-aware –æ–±—É—á–µ–Ω–∏–µ
            model = SimpleTestModel()
            optimizer = torch.optim.Adam(model.parameters())
            
            # –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∞–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è —Å checkpoint'–∞–º–∏
            for step in range(100, 400, 100):
                metrics = create_test_metrics(
                    step=step,
                    validation_loss=8.0 - step/100.0,
                    attention_diagonality=0.3 + step/1000.0
                )
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ checkpoint'–∞
                path = checkpoint_manager.save_checkpoint(
                    model=model,
                    optimizer=optimizer,
                    metrics=metrics,
                    force_save=True
                )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏
                if step == 300:  # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã
                    critical_metrics = create_test_metrics(
                        step=step,
                        validation_loss=float('inf'),
                        has_problems=True
                    )
                    
                    recovery_attempted = checkpoint_manager.check_and_recover(
                        model, optimizer, critical_metrics
                    )
                    
                    print(f"‚úÖ –®–∞–≥ {step}: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {'–≤—ã–ø–æ–ª–Ω–µ–Ω–æ' if recovery_attempted else '–Ω–µ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å'}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ checkpoint'–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            best_checkpoint = checkpoint_manager.get_best_checkpoint()
            if best_checkpoint:
                print(f"‚úÖ –õ—É—á—à–∏–π checkpoint –¥–ª—è Context Manager: {best_checkpoint.quality.value}")
            
        print("‚úÖ Integration with Context-Aware Manager: –£—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå Integration with Context-Aware Manager: {e}")
        return False

def test_checkpoint_quality_classification():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ checkpoint'–æ–≤"""
    print("\nüß™ –¢–ï–°–¢ 7: Checkpoint Quality Classification")
    
    try:
        selector = MultiCriteriaModelSelector()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
        test_cases = [
            # (–æ–ø–∏—Å–∞–Ω–∏–µ, –º–µ—Ç—Ä–∏–∫–∏, –æ–∂–∏–¥–∞–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
            (
                "–û—Ç–ª–∏—á–Ω—ã–π checkpoint",
                create_test_metrics(1000, 1.5, 0.85),
                [CheckpointQuality.EXCELLENT, CheckpointQuality.GOOD]
            ),
            (
                "–•–æ—Ä–æ—à–∏–π checkpoint", 
                create_test_metrics(800, 3.0, 0.65),
                [CheckpointQuality.GOOD, CheckpointQuality.ACCEPTABLE]
            ),
            (
                "–ü—Ä–∏–µ–º–ª–µ–º—ã–π checkpoint",
                create_test_metrics(600, 8.0, 0.45),
                [CheckpointQuality.ACCEPTABLE, CheckpointQuality.POOR]
            ),
            (
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π checkpoint",
                create_test_metrics(400, 100.0, 0.01, has_problems=True),
                [CheckpointQuality.CRITICAL, CheckpointQuality.POOR]
            )
        ]
        
        for description, metrics, expected_qualities in test_cases:
            score = selector.calculate_model_score(metrics)
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ score
            if score >= 0.8:
                predicted_quality = CheckpointQuality.EXCELLENT
            elif score >= 0.6:
                predicted_quality = CheckpointQuality.GOOD
            elif score >= 0.4:
                predicted_quality = CheckpointQuality.ACCEPTABLE
            elif score >= 0.2:
                predicted_quality = CheckpointQuality.POOR
            else:
                predicted_quality = CheckpointQuality.CRITICAL
                
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —à—Ç—Ä–∞—Ñ–æ–≤ –∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
            if metrics.has_nan_weights or metrics.has_gradient_explosion:
                predicted_quality = CheckpointQuality.CRITICAL
            
            assert predicted_quality in expected_qualities, \
                f"{description}: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_qualities}, –ø–æ–ª—É—á–µ–Ω–æ {predicted_quality}"
            
            print(f"‚úÖ {description}: {predicted_quality.value} (score: {score:.3f})")
        
        print("‚úÖ Checkpoint Quality Classification: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç checkpoint'—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå Checkpoint Quality Classification: {e}")
        return False

def test_full_system_simulation():
    """–ü–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã checkpoint'–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
    print("\nüß™ –¢–ï–°–¢ 8: Full System Simulation")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            manager = create_checkpoint_manager(
                checkpoint_dir=temp_dir,
                max_checkpoints=5
            )
            
            model = SimpleTestModel()
            optimizer = torch.optim.Adam(model.parameters(), lr=1e-3)
            
            simulation_results = {
                'checkpoints_saved': 0,
                'critical_failures': 0,
                'recoveries_attempted': 0,
                'recoveries_successful': 0
            }
            
            # –°–∏–º—É–ª—è—Ü–∏—è 20 —à–∞–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è
            print("   –°–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è:")
            for step in range(100, 2100, 100):
                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å occasional –ø—Ä–æ–±–ª–µ–º–∞–º–∏
                if step in [500, 1200, 1800]:  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–±–æ–∏
                    metrics = create_test_metrics(
                        step=step,
                        validation_loss=float('inf') if step == 500 else 150.0,
                        attention_diagonality=0.005,
                        has_problems=True
                    )
                    if step == 1200:
                        metrics.gradient_norm = 2000.0  # –í–∑—Ä—ã–≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
                    
                    simulation_results['critical_failures'] += 1
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (—ç—Ç–æ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç emergency checkpoint)
                    recovery_success = manager.check_and_recover(model, optimizer, metrics)
                    simulation_results['recoveries_attempted'] += 1
                    if recovery_success:
                        simulation_results['recoveries_successful'] += 1
                    
                    # Emergency checkpoint —É–∂–µ —Å–æ–∑–¥–∞–Ω –≤ check_and_recover, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ
                    simulation_results['checkpoints_saved'] += 1
                    
                    print(f"     –®–∞–≥ {step}: üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ–π, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {'‚úÖ' if recovery_success else '‚ùå'}")
                    
                else:  # –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —à–∞–≥–∏
                    # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                    base_loss = max(1.0, 15.0 - step/200.0)
                    base_attention = min(0.85, 0.2 + step/2500.0)
                    
                    metrics = create_test_metrics(
                        step=step,
                        validation_loss=base_loss + np.random.normal(0, 0.5),
                        attention_diagonality=base_attention + np.random.normal(0, 0.05)
                    )
                    
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ checkpoint'–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤
                    if step % 300 == 0:  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —à–∞–≥–∞
                        path = manager.save_checkpoint(
                            model=model,
                            optimizer=optimizer,
                            metrics=metrics,
                            force_save=True
                        )
                        if path:
                            simulation_results['checkpoints_saved'] += 1
                            print(f"     –®–∞–≥ {step}: üíæ Checkpoint —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
            final_status = manager.get_status_report()
            best_checkpoint = manager.get_best_checkpoint()
            
            print(f"\n   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏:")
            print(f"     Checkpoint'–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {simulation_results['checkpoints_saved']}")
            print(f"     –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–±–æ–µ–≤: {simulation_results['critical_failures']}")
            print(f"     –ü–æ–ø—ã—Ç–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {simulation_results['recoveries_attempted']}")
            print(f"     –£—Å–ø–µ—à–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: {simulation_results['recoveries_successful']}")
            print(f"     –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏: {best_checkpoint.quality.value if best_checkpoint else '–Ω–µ—Ç'}")
            final_score = f"{best_checkpoint.health_score:.4f}" if best_checkpoint else "–Ω–µ—Ç"
            print(f"     –§–∏–Ω–∞–ª—å–Ω—ã–π score: {final_score}")
            print(f"     –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö backup'–æ–≤: {final_status['emergency_backups']}")
            print(f"     –†–µ–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ checkpoint'–æ–≤: {final_status['total_checkpoints']}/5")
            
            # DEBUG: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö checkpoint'–æ–≤
            print("   üìÇ DEBUG - –°–ø–∏—Å–æ–∫ checkpoint'–æ–≤:")
            for i, cp in enumerate(manager.checkpoints):
                cp_type = "üö®EMERGENCY" if cp.is_emergency_backup else "üíæNORMAL"
                print(f"     {i+1}. {cp_type} - {os.path.basename(cp.path)} (–∫–∞—á–µ—Å—Ç–≤–æ: {cp.quality.value})")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
            assert simulation_results['checkpoints_saved'] > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã checkpoint'—ã"
            assert simulation_results['critical_failures'] == 3, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–±–æ—è"
            assert final_status['total_checkpoints'] <= 5, f"–ù–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç checkpoint'–æ–≤: {final_status['total_checkpoints']}/5"
            
        print("‚úÖ Full System Simulation: –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏")
        return True
        
    except Exception as e:
        print(f"‚ùå Full System Simulation: {e}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Advanced Model Checkpointing System"""
    print("üéØ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: Advanced Model Checkpointing System")
    print("=" * 80)
    
    if not CHECKPOINTING_AVAILABLE:
        print("‚ùå Advanced Model Checkpointing System –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    tests = [
        test_multi_criteria_model_selector,
        test_checkpoint_health_analyzer,
        test_intelligent_checkpoint_manager,
        test_auto_recovery_system,
        test_emergency_checkpoint_saving,
        test_integration_with_context_manager,
        test_checkpoint_quality_classification,
        test_full_system_simulation
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_func in tests:
        try:
            if test_func():
                passed_tests += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests} ({passed_tests/total_tests*100:.1f}%)")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüöÄ Advanced Model Checkpointing System –≥–æ—Ç–æ–≤ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("   ‚Ä¢ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ checkpoint'–æ–≤")
        print("   ‚Ä¢ Multi-criteria –≤—ã–±–æ—Ä –ª—É—á—à–∏—Ö –º–æ–¥–µ–ª–µ–π")
        print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—è—Ö")
        print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∑–¥–æ—Ä–æ–≤—å—è checkpoint'–æ–≤")
        print("   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏—Å–∫–æ–≤—ã–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ–º")
        print("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Context-Aware Manager")
        return True
    else:
        print(f"‚ö†Ô∏è {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1) 