#!/usr/bin/env python3
"""
üî• Unified Logging System –¥–ª—è Tacotron2-New

–†–µ—à–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ exported-assets:
‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã MLflow runs –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ TensorBoard writers
‚ùå –ù–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫
‚ùå –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –±–µ–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏

‚úÖ –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ MLflow –∏ TensorBoard
‚úÖ Priority-based –º–µ—Ç—Ä–∏–∫–∏ —Å —É–º–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π  
‚úÖ Component isolation —Å namespace'–∞–º–∏
‚úÖ Graceful fallback –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
‚úÖ Thread-safe singleton pattern
"""

import logging
import threading
from typing import Dict, Any, Optional, List, Union, Callable
from dataclasses import dataclass, field
from datetime import datetime
from pathlib import Path
import time
import json
import yaml
from enum import Enum, auto
from contextlib import contextmanager
import atexit

# Optional imports —Å graceful fallback
try:
    import mlflow
    import mlflow.pytorch
    MLFLOW_AVAILABLE = True
except ImportError:
    MLFLOW_AVAILABLE = False

try:
    from torch.utils.tensorboard import SummaryWriter
    TENSORBOARD_AVAILABLE = True
except ImportError:
    TENSORBOARD_AVAILABLE = False

try:
    import torch
    TORCH_AVAILABLE = True
except ImportError:
    TORCH_AVAILABLE = False


class LogLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏"""
    CRITICAL = auto()    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, —Å–±–æ–∏ —Å–∏—Å—Ç–µ–º—ã
    ERROR = auto()       # –û—à–∏–±–∫–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
    WARNING = auto()     # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    INFO = auto()        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è  
    DEBUG = auto()       # –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    METRICS = auto()     # –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
    SYSTEM = auto()      # –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (CPU, –ø–∞–º—è—Ç—å)


class MetricPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –º–µ—Ç—Ä–∏–∫ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
    ESSENTIAL = auto()   # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (loss, attention quality)
    IMPORTANT = auto()   # –í–∞–∂–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (learning rate, gradient norm)
    USEFUL = auto()      # –ü–æ–ª–µ–∑–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (system resources)
    VERBOSE = auto()     # –î–µ—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (detailed breakdowns)


@dataclass
class LogEntry:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞"""
    timestamp: datetime
    level: LogLevel
    component: str
    message: str
    metrics: Dict[str, Any] = field(default_factory=dict)
    step: Optional[int] = None
    epoch: Optional[int] = None
    priority: MetricPriority = MetricPriority.USEFUL


@dataclass
class ComponentConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    name: str
    enabled: bool = True
    log_level: LogLevel = LogLevel.INFO
    metric_priority: MetricPriority = MetricPriority.USEFUL
    custom_format: Optional[str] = None
    namespace: Optional[str] = None


class UnifiedLoggingSystem:
    """
    üî• Unified Logging System - –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    
    Singleton pattern –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã.
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑—É–µ—Ç MLflow, TensorBoard –∏ file logging.
    """
    
    _instance = None
    _lock = threading.Lock()
    
    def __new__(cls, *args, **kwargs):
        """Singleton pattern implementation"""
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super().__new__(cls)
        return cls._instance
    
    def __init__(self, config: Optional[Dict[str, Any]] = None):
        # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é singleton
        if hasattr(self, '_initialized'):
            return
        
        self._initialized = True
        self.config = config or self._get_default_config()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self._active = False
        self._mlflow_run = None
        self._tensorboard_writer = None
        self._file_handlers: Dict[str, logging.FileHandler] = {}
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self._components: Dict[str, ComponentConfig] = {}
        self._loggers: Dict[str, logging.Logger] = {}
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∏ –∏—Å—Ç–æ—Ä–∏—è
        self._metrics_history: List[LogEntry] = []
        self._session_start_time = datetime.now()
        
        # Thread safety
        self._logging_lock = threading.Lock()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        atexit.register(self._cleanup)
        
        print("üî• Unified Logging System –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def _get_default_config(self) -> Dict[str, Any]:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'session_name': f"training_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
            'base_log_dir': 'unified_logs',
            'enable_mlflow': MLFLOW_AVAILABLE,
            'enable_tensorboard': TENSORBOARD_AVAILABLE,
            'enable_file_logging': True,
            'enable_console_logging': True,
            'max_history_entries': 10000,
            'metric_priority_threshold': MetricPriority.USEFUL,
            'auto_flush_interval': 30,  # —Å–µ–∫—É–Ω–¥
            'components': {
                'context_aware_manager': {'priority': MetricPriority.ESSENTIAL},
                'stabilization_system': {'priority': MetricPriority.ESSENTIAL},
                'attention_enhancement': {'priority': MetricPriority.IMPORTANT},
                'smart_tuner': {'priority': MetricPriority.IMPORTANT},
                'training_monitor': {'priority': MetricPriority.USEFUL},
                'system_monitor': {'priority': MetricPriority.VERBOSE}
            }
        }
    
    def start_session(self, session_name: Optional[str] = None, 
                     experiment_name: Optional[str] = None) -> bool:
        """
        üöÄ –ó–∞–ø—É—Å–∫ unified logging session
        
        Args:
            session_name: –ò–º—è —Å–µ—Å—Å–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            experiment_name: –ò–º—è MLflow —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞
        """
        if self._active:
            self._log_system_message("Session —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞", LogLevel.WARNING)
            return True
        
        try:
            self._session_start_time = datetime.now()
            session_name = session_name or self.config['session_name']
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            base_dir = Path(self.config['base_log_dir']) / session_name
            base_dir.mkdir(parents=True, exist_ok=True)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è file logging
            if self.config['enable_file_logging']:
                self._setup_file_logging(base_dir)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TensorBoard
            if self.config['enable_tensorboard'] and TENSORBOARD_AVAILABLE:
                self._setup_tensorboard(base_dir)
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MLflow
            if self.config['enable_mlflow'] and MLFLOW_AVAILABLE:
                self._setup_mlflow(experiment_name or "Tacotron2_Unified")
            
            self._active = True
            self._log_system_message(f"üî• Unified Logging Session –∑–∞–ø—É—â–µ–Ω–∞: {session_name}", LogLevel.INFO)
            return True
            
        except Exception as e:
            self._log_system_message(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ session: {e}", LogLevel.ERROR)
            return False
    
    def _setup_file_logging(self, base_dir: Path):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ file logging —Å rotation"""
        try:
            # –ì–ª–∞–≤–Ω—ã–π –ª–æ–≥ —Ñ–∞–π–ª
            main_log_file = base_dir / "unified.log"
            main_handler = logging.FileHandler(main_log_file, encoding='utf-8')
            main_formatter = logging.Formatter(
                '%(asctime)s - [%(levelname)s] - %(name)s - %(message)s'
            )
            main_handler.setFormatter(main_formatter)
            
            # –ú–µ—Ç—Ä–∏–∫–∏ —Ñ–∞–π–ª
            metrics_log_file = base_dir / "metrics.log"
            metrics_handler = logging.FileHandler(metrics_log_file, encoding='utf-8')
            metrics_formatter = logging.Formatter(
                '%(asctime)s - METRICS - %(message)s'
            )
            metrics_handler.setFormatter(metrics_formatter)
            
            self._file_handlers['main'] = main_handler
            self._file_handlers['metrics'] = metrics_handler
            
            print(f"‚úÖ File logging –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {base_dir}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ file logging: {e}")
    
    def _setup_tensorboard(self, base_dir: Path):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ TensorBoard"""
        try:
            tb_dir = base_dir / "tensorboard"
            self._tensorboard_writer = SummaryWriter(str(tb_dir))
            print(f"‚úÖ TensorBoard –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {tb_dir}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TensorBoard: {e}")
            self._tensorboard_writer = None
    
    def _setup_mlflow(self, experiment_name: str):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ MLflow"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ runs
            try:
                mlflow.end_run()
            except:
                pass  # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ run
            
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç
            try:
                experiment = mlflow.get_experiment_by_name(experiment_name)
                if experiment is None:
                    experiment_id = mlflow.create_experiment(experiment_name)
                else:
                    experiment_id = experiment.experiment_id
            except Exception:
                experiment_id = mlflow.create_experiment(experiment_name)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π run
            self._mlflow_run = mlflow.start_run(
                experiment_id=experiment_id,
                run_name=f"unified_{self.config['session_name']}"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Å—Å–∏–∏
            mlflow.log_param("session_name", self.config['session_name'])
            mlflow.log_param("session_start", self._session_start_time.isoformat())
            mlflow.log_param("unified_logging", True)
            
            print(f"‚úÖ MLflow –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {experiment_name}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MLflow: {e}")
            self._mlflow_run = None
    
    def register_component(self, component_name: str, 
                          config: Optional[ComponentConfig] = None) -> 'ComponentLogger':
        """
        üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤ unified logging system
        
        Args:
            component_name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            
        Returns:
            ComponentLogger –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
        """
        if config is None:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ config —Ñ–∞–π–ª–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é
            component_config_dict = self.config['components'].get(component_name, {})
            config = ComponentConfig(
                name=component_name,
                metric_priority=component_config_dict.get('priority', MetricPriority.USEFUL)
            )
        
        self._components[component_name] = config
        
        # –°–æ–∑–¥–∞–µ–º namespace –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        namespace = config.namespace or component_name
        
        # –°–æ–∑–¥–∞–µ–º logger –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        logger = logging.getLogger(f"unified.{namespace}")
        logger.setLevel(self._get_log_level(config.log_level))
        
        # –î–æ–±–∞–≤–ª—è–µ–º handlers –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if 'main' in self._file_handlers:
            logger.addHandler(self._file_handlers['main'])
        
        self._loggers[component_name] = logger
        
        component_logger = ComponentLogger(self, component_name, config)
        
        self._log_system_message(f"üìù –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {component_name}", LogLevel.INFO)
        return component_logger
    
    def log_metrics(self, metrics: Dict[str, Any], 
                   component: str = "system",
                   step: Optional[int] = None,
                   priority: MetricPriority = MetricPriority.USEFUL):
        """
        üìä –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        
        Args:
            metrics: –°–ª–æ–≤–∞—Ä—å –º–µ—Ç—Ä–∏–∫
            component: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            step: –ù–æ–º–µ—Ä —à–∞–≥–∞ (–¥–ª—è time series)
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–µ—Ç—Ä–∏–∫
        """
        with self._logging_lock:
            try:
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
                if not self._should_log_priority(priority):
                    return
                
                # –°–æ–∑–¥–∞–Ω–∏–µ log entry
                log_entry = LogEntry(
                    timestamp=datetime.now(),
                    level=LogLevel.METRICS,
                    component=component,
                    message=f"Metrics from {component}",
                    metrics=metrics,
                    step=step,
                    priority=priority
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                self._add_to_history(log_entry)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª
                self._log_to_file(log_entry)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤ TensorBoard
                self._log_to_tensorboard(metrics, component, step)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –≤ MLflow
                self._log_to_mlflow(metrics, step)
                
            except Exception as e:
                self._log_system_message(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}", LogLevel.ERROR)
    
    def log_message(self, message: str,
                   level: LogLevel = LogLevel.INFO,
                   component: str = "system",
                   **kwargs):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        with self._logging_lock:
            try:
                log_entry = LogEntry(
                    timestamp=datetime.now(),
                    level=level,
                    component=component,
                    message=message,
                    **kwargs
                )
                
                self._add_to_history(log_entry)
                self._log_to_file(log_entry)
                
                # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if level in [LogLevel.CRITICAL, LogLevel.ERROR, LogLevel.WARNING]:
                    print(f"[{level.name}] {component}: {message}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def _should_log_priority(self, priority: MetricPriority) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ –ª–∏ –º–µ—Ç—Ä–∏–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞"""
        threshold = self.config['metric_priority_threshold']
        priority_values = {
            MetricPriority.ESSENTIAL: 4,
            MetricPriority.IMPORTANT: 3, 
            MetricPriority.USEFUL: 2,
            MetricPriority.VERBOSE: 1
        }
        return priority_values.get(priority, 1) >= priority_values.get(threshold, 2)
    
    def _add_to_history(self, entry: LogEntry):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞"""
        self._metrics_history.append(entry)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        max_entries = self.config['max_history_entries']
        if len(self._metrics_history) > max_entries:
            self._metrics_history = self._metrics_history[-max_entries:]
    
    def _log_to_file(self, entry: LogEntry):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
        try:
            if entry.level == LogLevel.METRICS and 'metrics' in self._file_handlers:
                handler = self._file_handlers['metrics']
                logger = logging.getLogger("unified.metrics")
                logger.handlers = [handler]
                
                metrics_str = json.dumps(entry.metrics, default=str)
                logger.info(f"[{entry.component}] {metrics_str}")
                
            elif 'main' in self._file_handlers:
                handler = self._file_handlers['main']
                logger = logging.getLogger("unified.main")
                logger.handlers = [handler]
                
                logger.log(
                    self._get_log_level(entry.level),
                    f"[{entry.component}] {entry.message}"
                )
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª: {e}")
    
    def _log_to_tensorboard(self, metrics: Dict[str, Any], component: str, step: Optional[int]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ TensorBoard"""
        if not self._tensorboard_writer or step is None:
            return
        
        try:
            for metric_name, value in metrics.items():
                if isinstance(value, (int, float)):
                    full_metric_name = f"{component}/{metric_name}"
                    self._tensorboard_writer.add_scalar(full_metric_name, value, step)
            
            self._tensorboard_writer.flush()
            
        except Exception as e:
            self._log_system_message(f"‚ùå –û—à–∏–±–∫–∞ TensorBoard –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", LogLevel.WARNING)
    
    def _log_to_mlflow(self, metrics: Dict[str, Any], step: Optional[int]):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ MLflow"""
        if not self._mlflow_run:
            return
        
        try:
            for metric_name, value in metrics.items():
                if isinstance(value, (int, float)):
                    mlflow.log_metric(metric_name, value, step=step)
                    
        except Exception as e:
            self._log_system_message(f"‚ùå –û—à–∏–±–∫–∞ MLflow –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}", LogLevel.WARNING)
    
    def _get_log_level(self, level: LogLevel) -> int:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è LogLevel –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π logging level"""
        mapping = {
            LogLevel.CRITICAL: logging.CRITICAL,
            LogLevel.ERROR: logging.ERROR,
            LogLevel.WARNING: logging.WARNING,
            LogLevel.INFO: logging.INFO,
            LogLevel.DEBUG: logging.DEBUG,
            LogLevel.METRICS: logging.INFO,
            LogLevel.SYSTEM: logging.DEBUG
        }
        return mapping.get(level, logging.INFO)
    
    def _log_system_message(self, message: str, level: LogLevel):
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.log_message(message, level, "unified_logging_system")
    
    def get_session_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        current_time = datetime.now()
        session_duration = current_time - self._session_start_time
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º
        component_stats = {}
        for entry in self._metrics_history:
            comp = entry.component
            if comp not in component_stats:
                component_stats[comp] = {'count': 0, 'last_update': None}
            component_stats[comp]['count'] += 1
            component_stats[comp]['last_update'] = entry.timestamp
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç—Ä–∏–∫
        total_metrics = len([e for e in self._metrics_history if e.level == LogLevel.METRICS])
        
        return {
            'session_name': self.config['session_name'],
            'session_start': self._session_start_time.isoformat(),
            'session_duration': str(session_duration),
            'active': self._active,
            'mlflow_active': self._mlflow_run is not None,
            'tensorboard_active': self._tensorboard_writer is not None,
            'total_log_entries': len(self._metrics_history),
            'total_metrics_logged': total_metrics,
            'registered_components': list(self._components.keys()),
            'component_statistics': component_stats
        }
    
    def end_session(self):
        """üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ unified logging session"""
        if not self._active:
            return
        
        try:
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
            summary = self.get_session_summary()
            self._log_system_message(f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏: {json.dumps(summary, indent=2, default=str)}", LogLevel.INFO)
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ TensorBoard
            if self._tensorboard_writer:
                self._tensorboard_writer.close()
                self._tensorboard_writer = None
                self._log_system_message("‚úÖ TensorBoard –∑–∞–∫—Ä—ã—Ç", LogLevel.INFO)
            
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ MLflow
            if self._mlflow_run and MLFLOW_AVAILABLE:
                try:
                    # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Å—Å–∏–∏
                    session_duration = datetime.now() - self._session_start_time
                    mlflow.log_param("session_duration_minutes", session_duration.total_seconds() / 60)
                    mlflow.log_param("total_log_entries", len(self._metrics_history))
                    
                    mlflow.end_run()
                    self._mlflow_run = None
                    self._log_system_message("‚úÖ MLflow run –∑–∞–≤–µ—Ä—à–µ–Ω", LogLevel.INFO)
                except Exception as e:
                    self._log_system_message(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è MLflow: {e}", LogLevel.WARNING)
            
            # –ó–∞–∫—Ä—ã—Ç–∏–µ file handlers
            for handler_name, handler in self._file_handlers.items():
                try:
                    handler.close()
                except:
                    pass
            self._file_handlers.clear()
            
            self._active = False
            print("üèÅ Unified Logging Session –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è session: {e}")
    
    def _cleanup(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ"""
        if self._active:
            self.end_session()
    
    @contextmanager
    def session_context(self, session_name: Optional[str] = None):
        """Context manager –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–µ–π"""
        try:
            if self.start_session(session_name):
                yield self
            else:
                raise RuntimeError("Failed to start logging session")
        finally:
            self.end_session()


class ComponentLogger:
    """
    üìù –õ–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    
    –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤, —Å–∫—Ä—ã–≤–∞—è
    —Å–ª–æ–∂–Ω–æ—Å—Ç—å unified logging system.
    """
    
    def __init__(self, unified_system: UnifiedLoggingSystem, 
                 component_name: str, config: ComponentConfig):
        self.unified_system = unified_system
        self.component_name = component_name
        self.config = config
        self._step_counter = 0
    
    def log_metrics(self, metrics: Dict[str, Any], step: Optional[int] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        if step is None:
            step = self._step_counter
            self._step_counter += 1
        
        self.unified_system.log_metrics(
            metrics=metrics,
            component=self.component_name,
            step=step,
            priority=self.config.metric_priority
        )
    
    def info(self, message: str, **kwargs):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.unified_system.log_message(
            message, LogLevel.INFO, self.component_name, **kwargs
        )
    
    def warning(self, message: str, **kwargs):
        """–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        self.unified_system.log_message(
            message, LogLevel.WARNING, self.component_name, **kwargs
        )
    
    def error(self, message: str, **kwargs):
        """–û—à–∏–±–∫–∞"""
        self.unified_system.log_message(
            message, LogLevel.ERROR, self.component_name, **kwargs
        )
    
    def critical(self, message: str, **kwargs):
        """–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞"""
        self.unified_system.log_message(
            message, LogLevel.CRITICAL, self.component_name, **kwargs
        )
    
    def debug(self, message: str, **kwargs):
        """–û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        self.unified_system.log_message(
            message, LogLevel.DEBUG, self.component_name, **kwargs
        )


# Global instance
_global_unified_logging = None
_global_lock = threading.Lock()


def get_unified_logger() -> UnifiedLoggingSystem:
    """
    üåç –ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Unified Logging System
    
    Thread-safe singleton access
    """
    global _global_unified_logging
    
    if _global_unified_logging is None:
        with _global_lock:
            if _global_unified_logging is None:
                _global_unified_logging = UnifiedLoggingSystem()
    
    return _global_unified_logging


def setup_component_logging(component_name: str, 
                          priority: MetricPriority = MetricPriority.USEFUL) -> ComponentLogger:
    """
    üîß –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    
    Args:
        component_name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –º–µ—Ç—Ä–∏–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        
    Returns:
        ComponentLogger –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    """
    unified_system = get_unified_logger()
    
    config = ComponentConfig(
        name=component_name,
        metric_priority=priority
    )
    
    return unified_system.register_component(component_name, config)


# Convenience functions –¥–ª—è backward compatibility
def log_training_metrics(metrics: Dict[str, Any], step: Optional[int] = None, component: str = "training"):
    """Convenience —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –æ–±—É—á–µ–Ω–∏—è"""
    unified_system = get_unified_logger()
    unified_system.log_metrics(
        metrics=metrics,
        component=component,
        step=step,
        priority=MetricPriority.ESSENTIAL
    )


def start_unified_logging_session(session_name: Optional[str] = None, 
                                experiment_name: Optional[str] = None) -> bool:
    """–ó–∞–ø—É—Å–∫ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    unified_system = get_unified_logger()
    return unified_system.start_session(session_name, experiment_name)


def end_unified_logging_session():
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–µ—Å—Å–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    unified_system = get_unified_logger()
    unified_system.end_session()


# Availability check
UNIFIED_LOGGING_AVAILABLE = True

def get_unified_logging_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ unified logging system"""
    return {
        'available': UNIFIED_LOGGING_AVAILABLE,
        'mlflow_available': MLFLOW_AVAILABLE,
        'tensorboard_available': TENSORBOARD_AVAILABLE,
        'torch_available': TORCH_AVAILABLE,
        'features': [
            'Centralized MLflow management',
            'Unified TensorBoard writer',
            'Priority-based metric filtering',
            'Component isolation',
            'Thread-safe logging',
            'Automatic session management',
            'Graceful fallback'
        ]
    }


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("üî• –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Unified Logging System")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ unified logger
    unified_logger = get_unified_logger()
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏
    with unified_logger.session_context("demo_session"):
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        context_logger = setup_component_logging("context_aware_manager", MetricPriority.ESSENTIAL)
        training_logger = setup_component_logging("training_monitor", MetricPriority.IMPORTANT)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        context_logger.log_metrics({
            "loss": 15.5,
            "attention_diagonality": 0.045,
            "guided_attention_weight": 8.0
        })
        
        training_logger.log_metrics({
            "learning_rate": 1e-4,
            "gradient_norm": 2.3
        })
        
        # –°–æ–æ–±—â–µ–Ω–∏—è
        context_logger.info("Context analysis completed")
        training_logger.warning("High gradient norm detected")
        
        # –°–≤–æ–¥–∫–∞ —Å–µ—Å—Å–∏–∏
        summary = unified_logger.get_session_summary()
        print(f"üìä –°–≤–æ–¥–∫–∞ —Å–µ—Å—Å–∏–∏: {json.dumps(summary, indent=2)}")
    
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞") 