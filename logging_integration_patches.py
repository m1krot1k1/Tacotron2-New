#!/usr/bin/env python3
"""
üîß Logging Integration Patches –¥–ª—è Tacotron2-New

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Unified Logging System –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.
–ó–∞–º–µ–Ω—è–µ—Ç —Ö–∞–æ—Ç–∏—á–Ω—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É.

–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ exported-assets:
‚ùå 5+ MLflow runs –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ ‚Üí ‚úÖ –û–¥–∏–Ω —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π run
‚ùå 3+ TensorBoard writers ‚Üí ‚úÖ –û–¥–∏–Ω shared writer  
‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ‚Üí ‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ ‚Üí ‚úÖ Priority-based —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
"""

import logging
import sys
from pathlib import Path
from typing import Dict, Any, Optional, List, Union
import importlib.util
from contextlib import contextmanager
import threading
import warnings

# –ò–º–ø–æ—Ä—Ç unified logging system
try:
    from unified_logging_system import (
        get_unified_logger, setup_component_logging, 
        MetricPriority, LogLevel, ComponentLogger,
        start_unified_logging_session, end_unified_logging_session
    )
    UNIFIED_LOGGING_AVAILABLE = True
except ImportError as e:
    print(f"‚ö†Ô∏è Unified Logging System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    UNIFIED_LOGGING_AVAILABLE = False


class LoggingIntegrationManager:
    """
    üîß –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–º–µ–Ω–æ–π –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
    –Ω–∞ unified logging system —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    """
    
    def __init__(self):
        self.integration_active = False
        self.patched_components = {}
        self.original_loggers = {}
        self.component_loggers: Dict[str, ComponentLogger] = {}
        self._lock = threading.Lock()
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        self.target_components = {
            'context_aware_training_manager': {
                'priority': MetricPriority.ESSENTIAL,
                'file_pattern': 'context_aware_training_manager.py',
                'class_name': 'ContextAwareTrainingManager'
            },
            'training_stabilization_system': {
                'priority': MetricPriority.ESSENTIAL,
                'file_pattern': 'training_stabilization_system.py',
                'class_name': 'TrainingStabilizationSystem'
            },
            'advanced_attention_enhancement': {
                'priority': MetricPriority.IMPORTANT,
                'file_pattern': 'advanced_attention_enhancement_system.py',
                'class_name': 'AdvancedAttentionEnhancementSystem'
            },
            'ultimate_tacotron_trainer': {
                'priority': MetricPriority.IMPORTANT,
                'file_pattern': 'ultimate_tacotron_trainer.py',
                'class_name': 'UltimateEnhancedTacotronTrainer'
            },
            'smart_training_logger': {
                'priority': MetricPriority.USEFUL,
                'file_pattern': 'smart_training_logger.py',
                'class_name': 'SmartTrainingLogger'
            },
            'enhanced_mlflow_logger': {
                'priority': MetricPriority.USEFUL,
                'file_pattern': 'enhanced_mlflow_logger.py',
                'class_name': 'EnhancedMLflowLogger'
            },
            'smart_tuner_integration': {
                'priority': MetricPriority.IMPORTANT,
                'file_pattern': 'smart_tuner/smart_tuner_integration.py',
                'class_name': 'SmartTunerIntegration'
            }
        }
        
        self.logger = self._setup_manager_logger()
    
    def _setup_manager_logger(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        logger = logging.getLogger('LoggingIntegrationManager')
        logger.setLevel(logging.INFO)
        
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - [Integration] - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            logger.addHandler(handler)
        
        return logger
    
    def start_unified_integration(self, session_name: Optional[str] = None) -> bool:
        """
        üöÄ –ó–∞–ø—É—Å–∫ unified logging integration
        
        Args:
            session_name: –ò–º—è —Å–µ—Å—Å–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        """
        if not UNIFIED_LOGGING_AVAILABLE:
            self.logger.error("‚ùå Unified Logging System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return False
        
        if self.integration_active:
            self.logger.warning("‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞")
            return True
        
        try:
            with self._lock:
                # –ó–∞–ø—É—Å–∫–∞–µ–º unified logging session
                if not start_unified_logging_session(session_name, "Tacotron2_Unified"):
                    self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å unified logging session")
                    return False
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                self._register_all_components()
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º patches
                self._install_logging_patches()
                
                self.integration_active = True
                self.logger.info("‚úÖ Unified Logging Integration –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                return True
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def _register_all_components(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤ unified system"""
        for component_name, config in self.target_components.items():
            try:
                component_logger = setup_component_logging(
                    component_name, 
                    config['priority']
                )
                self.component_loggers[component_name] = component_logger
                self.logger.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: {component_name}")
                
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {component_name}: {e}")
    
    def _install_logging_patches(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ patches –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # Patch MLflow
        self._patch_mlflow()
        
        # Patch TensorBoard
        self._patch_tensorboard()
        
        # Patch —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._patch_standard_logging()
        
        self.logger.info("üîß Logging patches —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def _patch_mlflow(self):
        """Patch MLflow –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö runs"""
        try:
            import mlflow
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            original_start_run = mlflow.start_run
            original_end_run = mlflow.end_run
            original_log_metric = mlflow.log_metric
            original_log_param = mlflow.log_param
            
            def patched_start_run(*args, **kwargs):
                """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º start_run - unified system —É–∂–µ —É–ø—Ä–∞–≤–ª—è–µ—Ç run"""
                self.logger.debug("üîß MLflow start_run –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è unified run")
                return None  # Unified system —É–∂–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π run
            
            def patched_end_run(*args, **kwargs):
                """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º end_run"""
                self.logger.debug("üîß MLflow end_run –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω - unified system —É–ø—Ä–∞–≤–ª—è–µ—Ç")
                return None
            
            def patched_log_metric(key, value, step=None, *args, **kwargs):
                """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º log_metric –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ unified system"""
                try:
                    unified_logger = get_unified_logger()
                    unified_logger.log_metrics({key: value}, step=step)
                except Exception as e:
                    self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ unified metric logging: {e}")
                    # Fallback –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                    return original_log_metric(key, value, step, *args, **kwargs)
            
            def patched_log_param(key, value, *args, **kwargs):
                """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º log_param"""
                self.logger.debug(f"üîß MLflow param –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω: {key}={value}")
                # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ unified system
                return None
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º patches
            mlflow.start_run = patched_start_run
            mlflow.end_run = patched_end_run
            mlflow.log_metric = patched_log_metric
            mlflow.log_param = patched_log_param
            
            self.patched_components['mlflow'] = {
                'original_start_run': original_start_run,
                'original_end_run': original_end_run,
                'original_log_metric': original_log_metric,
                'original_log_param': original_log_param
            }
            
            self.logger.info("‚úÖ MLflow patched –¥–ª—è unified integration")
            
        except ImportError:
            self.logger.debug("MLflow –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è patching")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ patching MLflow: {e}")
    
    def _patch_tensorboard(self):
        """Patch TensorBoard –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è shared writer"""
        try:
            from torch.utils.tensorboard import SummaryWriter
            
            original_summary_writer = SummaryWriter
            
            class UnifiedSummaryWriter:
                """Wrapper –¥–ª—è SummaryWriter, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π unified system"""
                
                def __init__(self, *args, **kwargs):
                    self.unified_logger = get_unified_logger()
                    self.component_name = kwargs.get('comment', 'tensorboard')
                    # –ù–µ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π SummaryWriter - –∏—Å–ø–æ–ª—å–∑—É–µ–º unified
                
                def add_scalar(self, tag, scalar_value, global_step=None, walltime=None):
                    """–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ unified system"""
                    try:
                        metrics = {tag: scalar_value}
                        self.unified_logger.log_metrics(
                            metrics=metrics,
                            component=self.component_name,
                            step=global_step,
                            priority=MetricPriority.USEFUL
                        )
                    except Exception as e:
                        # Fallback - —Å–æ–∑–¥–∞–µ–º temporary writer
                        print(f"‚ö†Ô∏è Fallback TensorBoard logging: {e}")
                
                def add_histogram(self, tag, values, global_step=None, bins='tensorflow', walltime=None):
                    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è histogram"""
                    pass  # Unified system –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç histograms –ø–æ–∫–∞
                
                def flush(self):
                    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è flush"""
                    pass
                
                def close(self):
                    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è close"""
                    pass
            
            # –ó–∞–º–µ–Ω—è–µ–º SummaryWriter –Ω–∞ –Ω–∞—à wrapper
            import torch.utils.tensorboard
            torch.utils.tensorboard.SummaryWriter = UnifiedSummaryWriter
            
            self.patched_components['tensorboard'] = {
                'original_summary_writer': original_summary_writer
            }
            
            self.logger.info("‚úÖ TensorBoard patched –¥–ª—è unified integration")
            
        except ImportError:
            self.logger.debug("TensorBoard –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è patching")
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ patching TensorBoard: {e}")
    
    def _patch_standard_logging(self):
        """Patch —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ logging –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ unified system"""
        try:
            # –°–æ–∑–¥–∞–µ–º handler –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ unified system
            class UnifiedLoggingHandler(logging.Handler):
                def __init__(self, component_name='unknown'):
                    super().__init__()
                    self.component_name = component_name
                    self.unified_logger = get_unified_logger()
                
                def emit(self, record):
                    try:
                        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º logging level –≤ LogLevel
                        level_mapping = {
                            logging.CRITICAL: LogLevel.CRITICAL,
                            logging.ERROR: LogLevel.ERROR,
                            logging.WARNING: LogLevel.WARNING,
                            logging.INFO: LogLevel.INFO,
                            logging.DEBUG: LogLevel.DEBUG
                        }
                        
                        log_level = level_mapping.get(record.levelno, LogLevel.INFO)
                        message = self.format(record)
                        
                        self.unified_logger.log_message(
                            message=message,
                            level=log_level,
                            component=self.component_name
                        )
                        
                    except Exception:
                        pass  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º recursion –≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º unified handler –∫–∞–∫ default –¥–ª—è –Ω–æ–≤—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
            self.unified_handler = UnifiedLoggingHandler('system')
            
            self.logger.info("‚úÖ Standard logging patched –¥–ª—è unified integration")
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ patching standard logging: {e}")
    
    def get_component_logger(self, component_name: str) -> Optional[ComponentLogger]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        
        Args:
            component_name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
            
        Returns:
            ComponentLogger –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        return self.component_loggers.get(component_name)
    
    def stop_unified_integration(self):
        """üèÅ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ unified logging integration"""
        if not self.integration_active:
            return
        
        try:
            with self._lock:
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
                self._restore_patches()
                
                # –ó–∞–≤–µ—Ä—à–∞–µ–º unified logging session
                end_unified_logging_session()
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                self.component_loggers.clear()
                self.patched_components.clear()
                
                self.integration_active = False
                self.logger.info("‚úÖ Unified Logging Integration –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
    
    def _restore_patches(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        try:
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º MLflow
            if 'mlflow' in self.patched_components:
                import mlflow
                patches = self.patched_components['mlflow']
                mlflow.start_run = patches['original_start_run']
                mlflow.end_run = patches['original_end_run']
                mlflow.log_metric = patches['original_log_metric']
                mlflow.log_param = patches['original_log_param']
                self.logger.info("‚úÖ MLflow patches –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TensorBoard
            if 'tensorboard' in self.patched_components:
                import torch.utils.tensorboard
                patches = self.patched_components['tensorboard']
                torch.utils.tensorboard.SummaryWriter = patches['original_summary_writer']
                self.logger.info("‚úÖ TensorBoard patches –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è patches: {e}")
    
    def get_integration_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        status = {
            'active': self.integration_active,
            'unified_logging_available': UNIFIED_LOGGING_AVAILABLE,
            'registered_components': list(self.component_loggers.keys()),
            'patched_systems': list(self.patched_components.keys()),
            'target_components': len(self.target_components)
        }
        
        if self.integration_active:
            try:
                unified_logger = get_unified_logger()
                status['session_summary'] = unified_logger.get_session_summary()
            except Exception as e:
                status['session_error'] = str(e)
        
        return status
    
    @contextmanager
    def unified_integration_context(self, session_name: Optional[str] = None):
        """Context manager –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
        try:
            if self.start_unified_integration(session_name):
                yield self
            else:
                raise RuntimeError("Failed to start unified logging integration")
        finally:
            self.stop_unified_integration()


# Global instance
_global_integration_manager = None
_integration_lock = threading.Lock()


def get_integration_manager() -> LoggingIntegrationManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    global _global_integration_manager
    
    if _global_integration_manager is None:
        with _integration_lock:
            if _global_integration_manager is None:
                _global_integration_manager = LoggingIntegrationManager()
    
    return _global_integration_manager


def start_unified_logging_integration(session_name: Optional[str] = None) -> bool:
    """
    üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ unified logging integration
    
    Args:
        session_name: –ò–º—è —Å–µ—Å—Å–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        
    Returns:
        True –µ—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
    """
    manager = get_integration_manager()
    return manager.start_unified_integration(session_name)


def stop_unified_logging_integration():
    """üèÅ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ unified logging integration"""
    manager = get_integration_manager()
    manager.stop_unified_integration()


def get_unified_component_logger(component_name: str) -> Optional[ComponentLogger]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ unified –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    
    Args:
        component_name: –ò–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        
    Returns:
        ComponentLogger –µ—Å–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞
    """
    manager = get_integration_manager()
    return manager.get_component_logger(component_name)


# Convenience decorators
def unified_logging_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ç—Ä–µ–±—É—é—â–∏–π –∞–∫—Ç–∏–≤–Ω–æ–π unified logging integration"""
    def wrapper(*args, **kwargs):
        manager = get_integration_manager()
        if not manager.integration_active:
            warnings.warn(
                "Unified logging integration –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ start_unified_logging_integration()",
                UserWarning
            )
        return func(*args, **kwargs)
    return wrapper


def with_unified_logging(session_name: Optional[str] = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è unified logging
    
    Args:
        session_name: –ò–º—è —Å–µ—Å—Å–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    """
    def decorator(func):
        def wrapper(*args, **kwargs):
            manager = get_integration_manager()
            with manager.unified_integration_context(session_name):
                return func(*args, **kwargs)
        return wrapper
    return decorator


# Availability info
def get_integration_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    return {
        'available': UNIFIED_LOGGING_AVAILABLE,
        'features': [
            'MLflow conflict resolution',
            'TensorBoard writer unification',
            'Standard logging redirection', 
            'Component isolation',
            'Priority-based filtering',
            'Automatic session management'
        ],
        'target_components': list(LoggingIntegrationManager().target_components.keys())
    }


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    print("üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Logging Integration")
    
    manager = get_integration_manager()
    
    with manager.unified_integration_context("demo_integration"):
        # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        context_logger = get_unified_component_logger("context_aware_training_manager")
        training_logger = get_unified_component_logger("training_stabilization_system")
        
        if context_logger and training_logger:
            # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            context_logger.log_metrics({
                "loss": 12.5,
                "attention_diagonality": 0.089
            })
            
            training_logger.log_metrics({
                "gradient_norm": 1.8,
                "learning_rate": 1e-4
            })
            
            context_logger.info("Integration test successful")
            training_logger.warning("Demo warning message")
        
        # –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        status = manager.get_integration_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {status}")
    
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞") 