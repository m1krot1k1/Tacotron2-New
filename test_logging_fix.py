#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è TensorBoard –∏ MLflow
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∞ utils
"""

import os
import sys
import torch
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_utils_import():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç utils –º–æ–¥—É–ª–µ–π"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç utils –º–æ–¥—É–ª–µ–π...")
    
    try:
        from utils.dynamic_padding import DynamicPaddingCollator
        logger.info("‚úÖ DynamicPaddingCollator –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ DynamicPaddingCollator: {e}")
        return False
    
    try:
        from utils.bucket_batching import BucketBatchSampler
        logger.info("‚úÖ BucketBatchSampler –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ BucketBatchSampler: {e}")
        return False
    
    return True

def test_tensorboard_setup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É TensorBoard"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É TensorBoard...")
    
    try:
        from torch.utils.tensorboard import SummaryWriter
        logger.info("‚úÖ SummaryWriter –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π writer
        log_dir = Path("test_tensorboard_logs")
        log_dir.mkdir(exist_ok=True)
        
        writer = SummaryWriter(log_dir=str(log_dir))
        logger.info(f"‚úÖ TensorBoard writer —Å–æ–∑–¥–∞–Ω: {log_dir}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –º–µ—Ç—Ä–∏–∫
        writer.add_scalar("test/loss", 1.0, 0)
        writer.add_scalar("test/accuracy", 0.8, 0)
        writer.flush()
        logger.info("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ TensorBoard")
        
        writer.close()
        logger.info("‚úÖ TensorBoard writer –∑–∞–∫—Ä—ã—Ç")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TensorBoard: {e}")
        return False

def test_mlflow_setup():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É MLflow"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É MLflow...")
    
    try:
        import mlflow
        logger.info("‚úÖ MLflow –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º MLflow
        mlflow.set_tracking_uri("file:./mlruns")
        mlflow.set_experiment("test_experiment")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π run
        with mlflow.start_run(run_name="test_run"):
            mlflow.log_param("test_param", "test_value")
            mlflow.log_metric("test_metric", 1.0, step=0)
            logger.info("‚úÖ MLflow run —Å–æ–∑–¥–∞–Ω –∏ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø–∏—Å–∞–Ω—ã")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ MLflow: {e}")
        return False

def test_training_imports():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è...")
    
    try:
        from model import Tacotron2
        logger.info("‚úÖ Tacotron2 –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Tacotron2: {e}")
        return False
    
    try:
        from loss_function import Tacotron2Loss
        logger.info("‚úÖ Tacotron2Loss –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Tacotron2Loss: {e}")
        return False
    
    try:
        from hparams import create_hparams
        logger.info("‚úÖ create_hparams –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ create_hparams: {e}")
        return False
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç utils
    if not test_utils_import():
        logger.error("‚ùå –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ utils –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return False
    
    # –¢–µ—Å—Ç 2: TensorBoard
    if not test_tensorboard_setup():
        logger.error("‚ùå –¢–µ—Å—Ç TensorBoard –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return False
    
    # –¢–µ—Å—Ç 3: MLflow
    if not test_mlflow_setup():
        logger.error("‚ùå –¢–µ—Å—Ç MLflow –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return False
    
    # –¢–µ—Å—Ç 4: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–±—É—á–µ–Ω–∏—è
    if not test_training_imports():
        logger.error("‚ùå –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω")
        return False
    
    logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    logger.info("üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 