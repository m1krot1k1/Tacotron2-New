#!/usr/bin/env python3
"""
üöÄ –°–ò–°–¢–ï–ú–ê –≠–ö–°–ü–û–†–¢–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –û–ë–£–ß–ï–ù–ò–Ø TTS
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è TTS –º–æ–¥–µ–ª–µ–π.

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –≠–∫—Å–ø–æ—Ä—Ç –≤ MLflow —Å –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö  
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—É–¥–∏–æ
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
"""

import os
import json
import torch
import shutil
import logging
from typing import Dict, Any, Optional, List
from datetime import datetime
from pathlib import Path

try:
    import mlflow
    import mlflow.pytorch
    MLFLOW_AVAILABLE = True
except ImportError:
    MLFLOW_AVAILABLE = False
    print("‚ö†Ô∏è MLflow –Ω–µ –Ω–∞–π–¥–µ–Ω. –≠–∫—Å–ø–æ—Ä—Ç –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.")

try:
    import matplotlib.pyplot as plt
    import numpy as np
    VISUALIZATION_AVAILABLE = True
except ImportError:
    VISUALIZATION_AVAILABLE = False

try:
    import librosa
    import soundfile as sf
    AUDIO_AVAILABLE = True
except ImportError:
    AUDIO_AVAILABLE = False


class TrainingExportSystem:
    """
    üéØ –°–∏—Å—Ç–µ–º–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è TTS
    """
    
    def __init__(self, config: Dict[str, Any] = None):
        self.config = config or {}
        self.logger = self._setup_logger()
        self.export_dir = Path(self.config.get('export_dir', 'exports'))
        self.export_dir.mkdir(exist_ok=True)
        
        # MLflow –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if MLFLOW_AVAILABLE:
            self.mlflow_tracking_uri = self.config.get('mlflow_tracking_uri', 'file:./mlruns')
            mlflow.set_tracking_uri(self.mlflow_tracking_uri)
            self.logger.info(f"‚úÖ MLflow –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {self.mlflow_tracking_uri}")
        
    def _setup_logger(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞"""
        logger = logging.getLogger('TrainingExport')
        logger.setLevel(logging.INFO)
        
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            logger.addHandler(handler)
        
        return logger
    
    def export_training_results(self, 
                              model: torch.nn.Module,
                              metrics: Dict[str, float],
                              training_config: Dict[str, Any],
                              output_directory: str,
                              epoch: int,
                              experiment_name: str = "TTS_Training") -> Dict[str, str]:
        """
        üéØ –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            model: –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
            metrics: –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
            training_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
            output_directory: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            epoch: –ù–æ–º–µ—Ä —ç–ø–æ—Ö–∏
            experiment_name: –ò–º—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            
        Returns:
            Dict —Å –ø—É—Ç—è–º–∏ –∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ–∞–π–ª–∞–º
        """
        export_paths = {}
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        export_name = f"{experiment_name}_{timestamp}_epoch_{epoch}"
        
        try:
            # 1. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
            current_export_dir = self.export_dir / export_name
            current_export_dir.mkdir(exist_ok=True)
            
            # 2. –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏
            model_paths = self._export_model(model, current_export_dir, epoch)
            export_paths.update(model_paths)
            
            # 3. –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config_paths = self._export_config_and_metrics(
                training_config, metrics, current_export_dir
            )
            export_paths.update(config_paths)
            
            # 4. –≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π
            viz_paths = self._export_visualizations(
                metrics, output_directory, current_export_dir
            )
            export_paths.update(viz_paths)
            
            # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—É–¥–∏–æ (–µ—Å–ª–∏ –µ—Å—Ç—å —á–µ–∫–ø–æ–∏–Ω—Ç)
            audio_paths = self._generate_test_audio(
                model, current_export_dir, training_config
            )
            export_paths.update(audio_paths)
            
            # 6. MLflow —ç–∫—Å–ø–æ—Ä—Ç
            if MLFLOW_AVAILABLE:
                mlflow_info = self._export_to_mlflow(
                    model, metrics, training_config, current_export_dir, experiment_name
                )
                export_paths.update(mlflow_info)
            
            # 7. –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
            report_path = self._create_export_report(
                export_paths, metrics, current_export_dir
            )
            export_paths['report'] = str(report_path)
            
            self.logger.info(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {current_export_dir}")
            return export_paths
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return {'error': str(e)}
    
    def _export_model(self, model: torch.nn.Module, export_dir: Path, epoch: int) -> Dict[str, str]:
        """–≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        model_paths = {}
        
        try:
            # PyTorch —Ñ–æ—Ä–º–∞—Ç
            pytorch_path = export_dir / f"model_epoch_{epoch}.pth"
            torch.save({
                'model_state_dict': model.state_dict(),
                'epoch': epoch,
                'model_class': model.__class__.__name__
            }, pytorch_path)
            model_paths['pytorch_model'] = str(pytorch_path)
            
            # Checkpoint —Ñ–æ—Ä–º–∞—Ç (–ø–æ–ª–Ω—ã–π)
            checkpoint_path = export_dir / f"checkpoint_epoch_{epoch}.pth"
            torch.save({
                'model': model,
                'model_state_dict': model.state_dict(),
                'epoch': epoch,
                'timestamp': datetime.now().isoformat()
            }, checkpoint_path)
            model_paths['checkpoint'] = str(checkpoint_path)
            
            # –¢–æ–ª—å–∫–æ –≤–µ—Å–∞ (–ª–µ–≥–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)
            weights_path = export_dir / f"weights_epoch_{epoch}.pth"
            torch.save(model.state_dict(), weights_path)
            model_paths['weights_only'] = str(weights_path)
            
            self.logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {len(model_paths)} —Ñ–æ—Ä–º–∞—Ç–∞—Ö")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–∏: {e}")
            
        return model_paths
    
    def _export_config_and_metrics(self, 
                                 training_config: Dict[str, Any], 
                                 metrics: Dict[str, float], 
                                 export_dir: Path) -> Dict[str, str]:
        """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –º–µ—Ç—Ä–∏–∫"""
        config_paths = {}
        
        try:
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
            config_path = export_dir / "training_config.json"
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(training_config, f, indent=2, ensure_ascii=False)
            config_paths['training_config'] = str(config_path)
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
            metrics_path = export_dir / "training_metrics.json"
            with open(metrics_path, 'w', encoding='utf-8') as f:
                json.dump(metrics, f, indent=2, ensure_ascii=False)
            config_paths['training_metrics'] = str(metrics_path)
            
            # –°–≤–æ–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            summary = {
                'export_timestamp': datetime.now().isoformat(),
                'training_config_summary': {
                    'batch_size': training_config.get('batch_size', 'unknown'),
                    'learning_rate': training_config.get('learning_rate', 'unknown'),
                    'epochs': training_config.get('epochs', 'unknown')
                },
                'metrics_summary': {
                    'final_loss': metrics.get('total_loss', 'unknown'),
                    'best_loss': min(metrics.values()) if metrics else 'unknown'
                }
            }
            
            summary_path = export_dir / "export_summary.json"
            with open(summary_path, 'w', encoding='utf-8') as f:
                json.dump(summary, f, indent=2, ensure_ascii=False)
            config_paths['export_summary'] = str(summary_path)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            
        return config_paths
    
    def _export_visualizations(self, 
                             metrics: Dict[str, float], 
                             output_directory: str,
                             export_dir: Path) -> Dict[str, str]:
        """–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π"""
        viz_paths = {}
        
        try:
            # –ì—Ä–∞—Ñ–∏–∫ –º–µ—Ç—Ä–∏–∫
            if metrics:
                plt.figure(figsize=(12, 8))
                metric_names = list(metrics.keys())
                metric_values = list(metrics.values())
                
                plt.bar(metric_names, metric_values)
                plt.title('–ú–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è TTS', fontsize=16)
                plt.xlabel('–ú–µ—Ç—Ä–∏–∫–∏')
                plt.ylabel('–ó–Ω–∞—á–µ–Ω–∏—è')
                plt.xticks(rotation=45)
                plt.tight_layout()
                
                metrics_plot_path = export_dir / "metrics_plot.png"
                plt.savefig(metrics_plot_path, dpi=300, bbox_inches='tight')
                plt.close()
                viz_paths['metrics_plot'] = str(metrics_plot_path)
            
            # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ TensorBoard –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            tensorboard_dir = Path(output_directory) / "logs"
            if tensorboard_dir.exists():
                exported_tb_dir = export_dir / "tensorboard_logs"
                shutil.copytree(tensorboard_dir, exported_tb_dir, dirs_exist_ok=True)
                viz_paths['tensorboard_logs'] = str(exported_tb_dir)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π: {e}")
            
        return viz_paths
    
    def _generate_test_audio(self, 
                           model: torch.nn.Module, 
                           export_dir: Path,
                           training_config: Dict[str, Any]) -> Dict[str, str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤"""
        audio_paths = {}
        
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã
            test_phrases = [
                "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ –Ω–æ–º–µ—Ä –æ–¥–∏–Ω.",
                "–ö–∞—á–µ—Å—Ç–≤–æ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–µ–µ.",
                "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏."
            ]
            
            audio_dir = export_dir / "test_audio"
            audio_dir.mkdir(exist_ok=True)
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ
            # –ü–æ–∫–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
            for i, phrase in enumerate(test_phrases):
                audio_path = audio_dir / f"test_{i+1}.wav"
                # –ó–∞–≥–ª—É—à–∫–∞ - —Å–æ–∑–¥–∞–µ–º —Ç–∏—à–∏–Ω—É
                silence = np.zeros(22050)  # 1 —Å–µ–∫—É–Ω–¥–∞ —Ç–∏—à–∏–Ω—ã
                sf.write(audio_path, silence, 22050)
                audio_paths[f'test_audio_{i+1}'] = str(audio_path)
            
            # –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
            test_info_path = audio_dir / "test_info.json"
            test_info = {
                'test_phrases': test_phrases,
                'audio_format': 'WAV',
                'sample_rate': 22050,
                'note': '–¢–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏'
            }
            
            with open(test_info_path, 'w', encoding='utf-8') as f:
                json.dump(test_info, f, indent=2, ensure_ascii=False)
            audio_paths['test_info'] = str(test_info_path)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ: {e}")
            
        return audio_paths
    
    def _export_to_mlflow(self, 
                        model: torch.nn.Module,
                        metrics: Dict[str, float],
                        training_config: Dict[str, Any],
                        export_dir: Path,
                        experiment_name: str) -> Dict[str, str]:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ MLflow"""
        mlflow_info = {}
        
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞
            mlflow.set_experiment(experiment_name)
            
            with mlflow.start_run():
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                for key, value in training_config.items():
                    if isinstance(value, (int, float, str, bool)):
                        mlflow.log_param(key, value)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                for key, value in metrics.items():
                    if isinstance(value, (int, float)):
                        mlflow.log_metric(key, value)
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
                mlflow.pytorch.log_model(model, "model")
                
                # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
                mlflow.log_artifacts(str(export_dir))
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ run
                run_info = mlflow.active_run().info
                mlflow_info['mlflow_run_id'] = run_info.run_id
                mlflow_info['mlflow_experiment_id'] = run_info.experiment_id
                mlflow_info['mlflow_tracking_uri'] = mlflow.get_tracking_uri()
                
                self.logger.info(f"‚úÖ MLflow —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: Run ID {run_info.run_id}")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ MLflow —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            
        return mlflow_info
    
    def _create_export_report(self, 
                            export_paths: Dict[str, str], 
                            metrics: Dict[str, float],
                            export_dir: Path) -> Path:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ"""
        report_path = export_dir / "EXPORT_REPORT.md"
        
        try:
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(f"# üöÄ –û—Ç—á–µ—Ç –æ–± —ç–∫—Å–ø–æ—Ä—Ç–µ TTS –º–æ–¥–µ–ª–∏\n\n")
                f.write(f"**–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
                f.write("## üìä –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è\n\n")
                if metrics:
                    for metric, value in metrics.items():
                        f.write(f"- **{metric}:** {value}\n")
                else:
                    f.write("–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã\n")
                f.write("\n")
                
                # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                f.write("## üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n\n")
                for category, path in export_paths.items():
                    if category != 'error':
                        f.write(f"- **{category}:** `{path}`\n")
                f.write("\n")
                
                # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
                f.write("## üîß –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n\n")
                f.write("### –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏:\n")
                f.write("```python\n")
                f.write("import torch\n")
                f.write("model = torch.load('checkpoint_epoch_X.pth')['model']\n")
                f.write("# –∏–ª–∏\n")
                f.write("model_state = torch.load('weights_epoch_X.pth')\n")
                f.write("```\n\n")
                
                f.write("### –ó–∞–ø—É—Å–∫ TensorBoard:\n")
                f.write("```bash\n")
                f.write("tensorboard --logdir=tensorboard_logs\n")
                f.write("```\n\n")
                
                if MLFLOW_AVAILABLE and 'mlflow_run_id' in export_paths:
                    f.write("### MLflow UI:\n")
                    f.write("```bash\n")
                    f.write("mlflow ui\n")
                    f.write("```\n\n")
                
                f.write("## ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            
        return report_path
    
    def quick_export(self, model_path: str, output_name: str = None) -> str:
        """
        –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –º–æ–¥–µ–ª–∏
        
        Args:
            model_path: –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
            output_name: –ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
            
        Returns:
            –ü—É—Ç—å –∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∞—Ä—Ö–∏–≤—É
        """
        try:
            if output_name is None:
                output_name = f"quick_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
            checkpoint = torch.load(model_path, map_location='cpu')
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞
            export_paths = self.export_training_results(
                model=checkpoint.get('model'),
                metrics=checkpoint.get('metrics', {}),
                training_config=checkpoint.get('config', {}),
                output_directory='.',
                epoch=checkpoint.get('epoch', 0),
                experiment_name=output_name
            )
            
            self.logger.info(f"‚úÖ –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {output_name}")
            return export_paths.get('report', 'Unknown')
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return str(e)


def create_export_system(config: Dict[str, Any] = None) -> TrainingExportSystem:
    """
    –§–∞–±—Ä–∏—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
    """
    return TrainingExportSystem(config)


def export_training_for_ai(model, metrics, config, output_dir, epoch=0, **kwargs):
    """
    ü§ñ –ù–ï–î–û–°–¢–ê–Æ–©–ê–Ø –§–£–ù–ö–¶–ò–Ø: –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è AI —Å–∏—Å—Ç–µ–º—ã
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω—É–∂–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ Smart Tuner —Å–∏—Å—Ç–µ–º–æ–π.
    """
    try:
        export_system = create_export_system()
        
        result = export_system.export_training_results(
            model=model,
            metrics=metrics,
            training_config=config,
            output_directory=output_dir,
            epoch=epoch,
            experiment_name=kwargs.get('experiment_name', 'TTS_AI_Training')
        )
        
        print(f"‚úÖ AI —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {result.get('report', 'Unknown')}")
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ AI —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return {'error': str(e)}


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_system = create_export_system()
    print("üöÄ –°–∏—Å—Ç–µ–º–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ TTS —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    test_config = {
        'batch_size': 12,
        'learning_rate': 1e-5,
        'epochs': 1000
    }
    
    test_metrics = {
        'total_loss': 0.5,
        'mel_loss': 0.3,
        'gate_loss': 0.2
    }
    
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!") 