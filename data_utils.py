import random
import os
import numpy as np
import torch
import torch.utils.data

import layers
from text import text_to_sequence, sequence_to_ctc_sequence

try:
    from utils import load_wav_to_torch, load_filepaths_and_text, guide_attention_fast
except ImportError:
    import importlib.util
    import sys
    import os
    utils_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'utils.py')
    spec = importlib.util.spec_from_file_location('utils', utils_path)
    utils_mod = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(utils_mod)
    load_wav_to_torch = utils_mod.load_wav_to_torch
    load_filepaths_and_text = utils_mod.load_filepaths_and_text
    guide_attention_fast = utils_mod.guide_attention_fast


class TextMelLoader(torch.utils.data.Dataset):
    """
        1) loads audio,text pairs
        2) normalizes text and converts them to sequences of one-hot vectors
        3) computes mel-spectrograms from audio files.
    """
    def __init__(self, audiopaths_and_text, hparams):
        self.audiopaths_and_text = load_filepaths_and_text(audiopaths_and_text)
        self.text_cleaners = hparams.text_cleaners
        self.max_wav_value = hparams.max_wav_value
        self.sampling_rate = hparams.sampling_rate
        self.ds_path = hparams.dataset_path
        self.load_mel_from_disk = hparams.load_mel_from_disk
        self.stft = layers.TacotronSTFT(
            hparams.filter_length, hparams.hop_length, hparams.win_length,
            hparams.n_mel_channels, hparams.sampling_rate, hparams.mel_fmin,
            hparams.mel_fmax)
        self.clean_non_existent()
        random.seed(hparams.seed)
        random.shuffle(self.audiopaths_and_text)
        # Dataset files —Å–∫—Ä—ã—Ç–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –ª–æ–≥–æ–≤

    def clean_non_existent(self):
        """–£–¥–∞–ª—è—é –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
        out = []
        for el in self.audiopaths_and_text:
            # –§–∞–π–ª—ã –≤ CSV —É–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ–ª–Ω—ã–µ –ø—É—Ç–∏
            audio_path = el[0]
            if os.path.exists(audio_path):
                out.append(el)
            else:
                print(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")
        self.audiopaths_and_text = out

    def get_mel_text_pair(self, audiopath_and_text):
        # –ü–æ–ª—É—á–∞—é –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ —Ç–µ–∫—Å—Ç
        audiopath, text = audiopath_and_text[0], audiopath_and_text[1].strip()
        text, ctc_text = self.get_text(text)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ (–º–∞—Å–∫–∞ 200x1000)
        if text.size(0) > 200:
            # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤, —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã guide-–º–∞—Å–∫–∏
            text = text[:200]
            ctc_text = ctc_text[:200]
            # Text truncated warning —Å–∫—Ä—ã—Ç –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –ª–æ–≥–æ–≤

        mel = self.get_mel(audiopath)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –º–µ–ª-—Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã –¥–æ 1000 —Ñ—Ä–µ–π–º–æ–≤
        if mel.shape[-1] > 1000:
            mel = mel[:, :1000]
            # Mel truncated warning —Å–∫—Ä—ã—Ç –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –ª–æ–≥–æ–≤

        guide_mask = torch.FloatTensor(guide_attention_fast(len(text), mel.shape[-1], 200, 1000))
        return (text, ctc_text, mel, guide_mask)

    def get_mel(self, filename):
        """–ó–∞–≥—Ä—É–∂–∞—é –∏–ª–∏ –≤—ã—á–∏—Å–ª—è—é –º–µ–ª-—Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—É"""
        if not os.path.exists(filename+'.npy'):
            audio, sampling_rate = load_wav_to_torch(filename)
            if sampling_rate != self.stft.sampling_rate:
                raise ValueError("{} {} SR doesn't match target {} SR".format(
                    sampling_rate, self.stft.sampling_rate))
            audio_norm = audio / self.max_wav_value
            audio_norm = audio_norm.unsqueeze(0)
            audio_norm = torch.autograd.Variable(audio_norm, requires_grad=False)
            melspec = self.stft.mel_spectrogram(audio_norm)
            melspec = torch.squeeze(melspec, 0)
            np.save(filename+'.npy',melspec)
        else:
            melspec = torch.from_numpy(np.load(filename+'.npy'))
            assert melspec.size(0) == self.stft.n_mel_channels, (
                'Mel dimension mismatch: given {}, expected {}'.format(
                    melspec.size(0), self.stft.n_mel_channels))

        return melspec

    def get_text(self, text):
        sequence = text_to_sequence(text, self.text_cleaners)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ –ø—É—Å—Ç–∞—è
        if len(sequence) == 0:
            # –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç warning —Å–∫—Ä—ã—Ç –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –ª–æ–≥–æ–≤
            sequence = [0]  # –î–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
        text_norm = torch.IntTensor(sequence)
        ctc_text_norm = torch.IntTensor(sequence_to_ctc_sequence(sequence))
        return text_norm, ctc_text_norm

    def __getitem__(self, index):
        return self.get_mel_text_pair(self.audiopaths_and_text[index])

    def __len__(self):
        return len(self.audiopaths_and_text)


class TextMelCollate():
    """ Zero-pads model inputs and targets based on number of frames per setep
    """
    def __init__(self, n_frames_per_step):
        self.n_frames_per_step = n_frames_per_step

    def __call__(self, batch):
        """Collate's training batch from normalized text and mel-spectrogram
        PARAMS
        ------
        batch: [text_normalized, mel_normalized]
        """
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        MAX_TEXT_LEN = 200  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞
        MAX_MEL_LEN = 1000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ mel
        
        # Right zero-pad all one-hot text sequences to max input length
        text_lengths = [min(len(x[0]), MAX_TEXT_LEN) for x in batch]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω—É–ª–µ–≤—ã–µ –¥–ª–∏–Ω—ã –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
        text_lengths = [max(1, length) for length in text_lengths]  # –ú–∏–Ω–∏–º—É–º 1
        
        input_lengths, ids_sorted_decreasing = torch.sort(
            torch.LongTensor(text_lengths),
            dim=0, descending=True)
        max_input_len = min(input_lengths[0], MAX_TEXT_LEN)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º

        text_padded = torch.LongTensor(len(batch), max_input_len)
        text_padded.zero_()
        for i in range(len(ids_sorted_decreasing)):
            text = batch[ids_sorted_decreasing[i]][0]
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω–µ–µ –º–∞–∫—Å–∏–º—É–º–∞
            text_len = min(text.size(0), max_input_len, MAX_TEXT_LEN)
            text_padded[i, :text_len] = text[:text_len]

        max_ctc_txt_len = max([len(x[1]) for x in batch])
        ctc_text_paded = torch.LongTensor(len(batch), max_ctc_txt_len)
        ctc_text_paded .zero_()
        ctc_text_lengths = torch.LongTensor(len(batch))
        for i in range(len(ids_sorted_decreasing)):
            ctc_text = batch[ids_sorted_decreasing[i]][1]
            ctc_text_paded[i, :ctc_text.size(0)] = ctc_text
            ctc_text_lengths[i] = ctc_text.size(0)

        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Right zero-pad mel-spec —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
        num_mels = batch[0][2].size(0)
        max_target_len = min(max([x[2].size(1) for x in batch]), MAX_MEL_LEN)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
        if max_target_len % self.n_frames_per_step != 0:
            max_target_len += self.n_frames_per_step - max_target_len % self.n_frames_per_step
            max_target_len = min(max_target_len, MAX_MEL_LEN)  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
            assert max_target_len % self.n_frames_per_step == 0

        # include mel padded and gate padded
        mel_padded = torch.FloatTensor(len(batch), num_mels, max_target_len)
        mel_padded.zero_()
        gate_padded = torch.FloatTensor(len(batch), max_target_len)
        gate_padded.zero_()
        output_lengths = torch.LongTensor(len(batch))
        for i in range(len(ids_sorted_decreasing)):
            mel = batch[ids_sorted_decreasing[i]][2]
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–µ–∑–∞–µ–º mel –µ—Å–ª–∏ –æ–Ω –¥–ª–∏–Ω–Ω–µ–µ –º–∞–∫—Å–∏–º—É–º–∞
            mel_len = min(mel.size(1), max_target_len, MAX_MEL_LEN)
            mel_padded[i, :, :mel_len] = mel[:, :mel_len]
            gate_padded[i, mel_len-1:] = 1
            output_lengths[i] = mel_len

        guide_padded = torch.FloatTensor(len(batch), 200, 1000)
        guide_padded.zero_()

        for i in range(len(ids_sorted_decreasing)):
            guide = batch[ids_sorted_decreasing[i]][3]
            guide_padded[i, :, :] = guide

        return text_padded, input_lengths, mel_padded, gate_padded, \
            output_lengths, ctc_text_paded, ctc_text_lengths, guide_padded