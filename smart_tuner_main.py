#!/usr/bin/env python3
"""Smart Tuner V2 Main"""

import os
import sys
import logging
import argparse
import yaml
import threading
import time
import subprocess
import requests
from smart_tuner.trainer_wrapper import TrainerWrapper
from smart_tuner.optimization_engine import OptimizationEngine
from smart_tuner.alert_manager import AlertManager
from smart_tuner.web_interfaces import WebInterfaceManager
from smart_tuner.early_stop_controller import EarlyStopController
from smart_tuner.log_watcher import LogWatcher
from smart_tuner.metrics_store import MetricsStore
from utils import find_latest_checkpoint, load_hparams, save_hparams

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [%(levelname)s] - (%(name)s) - %(message)s',
    handlers=[
        logging.FileHandler('smart_tuner_main.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SmartTunerMain:
    def __init__(self, config_path="smart_tuner/config.yaml"):
        self.config_path = config_path
        with open(config_path, 'r') as f:
            self.config = yaml.safe_load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º MLflow –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self.ensure_mlflow_running()
        
        self.trainer = TrainerWrapper(self.config)
        self.optimizer = OptimizationEngine(config_path)
        self.alert_manager = AlertManager(self.config)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        self.web_manager = WebInterfaceManager(config_path)
        self.web_manager.create_interfaces()
        
        logger.info("SmartTunerMain –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        self.start_web_interfaces()
        
    def is_mlflow_running(self, port=5000):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ MLflow –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É"""
        try:
            response = requests.get(f"http://localhost:{port}", timeout=3)
            return response.status_code == 200
        except:
            return False
    
    def ensure_mlflow_running(self):
        """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ MLflow —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"""
        if not self.is_mlflow_running():
            logger.info("MLflow –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º...")
            try:
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                os.makedirs("mlruns", exist_ok=True)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º MLflow –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                subprocess.Popen([
                    sys.executable, "-m", "mlflow", "ui",
                    "--host", "0.0.0.0",
                    "--port", "5000",
                    "--backend-store-uri", f"file://{os.path.abspath('mlruns')}"
                ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                
                # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
                for _ in range(10):
                    time.sleep(1)
                    if self.is_mlflow_running():
                        logger.info("‚úÖ MLflow —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
                        return
                
                logger.warning("‚ö†Ô∏è MLflow –∑–∞–ø—É—â–µ–Ω, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MLflow: {e}")
        else:
            logger.info("‚úÖ MLflow —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        
    def start_web_interfaces(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ."""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ Smart Tuner V2...")
            
            # –ú–µ—Ç–æ–¥ start_all —É–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –≤ —Ñ–æ–Ω–æ–≤—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö,
            # –ø–æ—ç—Ç–æ–º—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –Ω–µ –Ω—É–∂–µ–Ω.
            self.web_manager.start_all()
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤
            time.sleep(2)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
            self.web_manager.print_dashboard()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {e}")
        
    def run_proactive_training(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ —Å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º.
        –¶–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
        """
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è –≤ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
        self.alert_manager.send_info_notification("üöÄ –ù–∞—á–∞–ª–æ—Å—å –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ Smart Tuner V2!")

        hparams = load_hparams(self.config['hparams_path'])
        current_checkpoint = find_latest_checkpoint(self.config['checkpoint_path'])
        
        controller = EarlyStopController(self.config_path)
        metrics_store = MetricsStore() # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
        log_watcher = LogWatcher(
            metrics_store=metrics_store,
            tracking_uri=self.config.get('mlflow', {}).get('tracking_uri', 'mlruns')
        )
        
        training_active = True
        while training_active:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ hparams –∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–µ–∫–ø–æ–∏–Ω—Ç–∞
            process, run_id = self.trainer.start_training(
                hparams_override=hparams, 
                checkpoint_path=current_checkpoint
            )
            if not process:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è. –ü—Ä–µ—Ä—ã–≤–∞–µ–º.")
                self.alert_manager.send_error_notification("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
                break
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ª–æ–≥–∞–º–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ run_id
            log_watcher.set_run_id(run_id)
            watcher_thread = threading.Thread(target=log_watcher.watch, daemon=True)
            watcher_thread.start()

            # –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
            while process.poll() is None:
                time.sleep(self.config.get('proactive_measures', {}).get('check_interval', 60))
                
                new_metrics = metrics_store.get_latest_metrics()
                if not new_metrics:
                    continue

                controller.add_metrics(new_metrics)
                
                decision = controller.decide_next_step(hparams)
                action = decision.get('action', 'continue')

                if action == 'stop':
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ 'stop': {decision.get('reason')}")
                    self.alert_manager.send_success_notification(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {decision.get('reason')}")
                    self.trainer.stop_training()
                    training_active = False
                    break

                if action == 'restart':
                    logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ —Ä–µ—à–µ–Ω–∏–µ 'restart': {decision.get('reason')}")
                    self.alert_manager.send_info_notification(f"üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è: {decision.get('reason')}")
                    
                    self.trainer.stop_training() # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å
                    time.sleep(5) # –î–∞–µ–º –≤—Ä–µ–º—è –ø—Ä–æ—Ü–µ—Å—Å—É –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è

                    hparams = decision['new_params']
                    save_hparams(self.config['hparams_path'], hparams) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —á–µ–∫–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                    current_checkpoint = find_latest_checkpoint(self.config['checkpoint_path'])
                    
                    logger.info(f"–ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {hparams}")
                    logger.info(f"–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —á–µ–∫–ø–æ–∏–Ω—Ç–∞: {current_checkpoint}")
                    break # –í—ã—Ö–æ–¥–∏–º –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ
            
            # –ï—Å–ª–∏ —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è, –∞ —Ñ–ª–∞–≥ training_active –≤—Å–µ –µ—â–µ True,
            # –∑–Ω–∞—á–∏—Ç, –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å–∞–º–æ –ø–æ —Å–µ–±–µ (—É—Å–ø–µ—à–Ω–æ –∏–ª–∏ —Å –æ—à–∏–±–∫–æ–π).
            if process.poll() is not None and training_active:
                logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}.")
                if process.returncode == 0:
                    self.alert_manager.send_success_notification("üéâ –û–±—É—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                else:
                    self.alert_manager.send_error_notification(f"‚ùå –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {process.returncode}).")
                training_active = False

        logger.info("–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")

    def run_optimization(self, n_trials=10):
        """–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å {n_trials} trials")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.alert_manager.send_info_notification(
            "ü§ñ Smart Tuner V2 - –°—Ç–∞—Ä—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏\n\n"
            f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ trials: {n_trials}\n"
            f"‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~{n_trials * 15} –º–∏–Ω—É—Ç\n\n"
            "üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö:\n"
            "‚Ä¢ MLflow UI –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ Optimization Engine –¥–ª—è Optuna\n"
            "‚Ä¢ Metrics Store –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )
        
        try:
            best_params = self.optimizer.optimize(self.objective, n_trials)
            
            logger.info(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_params}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            params_text = "\n".join([f"‚Ä¢ {k}: {v}" for k, v in best_params.items()])
            self.alert_manager.send_success_notification(
                "üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üèÜ –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n{params_text}\n\n"
                "üìÅ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ smart_tuner/models/\n"
                "üåê –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö"
            )
            
            return best_params
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            self.alert_manager.send_error_notification(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏\n\n"
                f"üî¥ –û—à–∏–±–∫–∞: {str(e)}\n"
                "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
            )
            raise
    
    def objective(self, trial):
        """
        –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Optuna
        
        Args:
            trial: –û–±—ä–µ–∫—Ç trial –æ—Ç Optuna
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            hyperparams = self.optimizer.suggest_hyperparameters(trial)
            logger.info(f"Trial {trial.number}: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã {hyperparams}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ trial
            params_text = "\n".join([f"‚Ä¢ {k}: {v}" for k, v in hyperparams.items()])
            self.alert_manager.send_info_notification(
                f"üß™ Trial #{trial.number} –Ω–∞—á–∞—Ç\n\n"
                f"üîß –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n{params_text}\n\n"
                f"‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~15 –º–∏–Ω—É—Ç\n"
                "üåê –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            metrics = self.trainer.train_with_params(hyperparams)
            
            if not metrics:
                logger.warning(f"Trial {trial.number}: –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
                # –í —Å–ª—É—á–∞–µ —Å–±–æ—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã Optuna –∏–∑–±–µ–≥–∞–ª–∞ —ç—Ç–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                return float('inf')

            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤—É—é –º–µ—Ç—Ä–∏–∫—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            objective_metric = self.config.get("optimization", {}).get("objective_metric", "val_loss")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ trial
            self.alert_manager.send_success_notification(
                f"‚úÖ Trial #{trial.number} –∑–∞–≤–µ—Ä—à–µ–Ω\n\n"
                f"üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç ({objective_metric}): {metrics.get(objective_metric, 'N/A'):.4f}"
            )

            return metrics.get(objective_metric, float('inf'))
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ objective function –¥–ª—è trial {trial.number}: {e}")
            self.alert_manager.send_error_notification(
                f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ Trial #{trial.number}\n\n"
                f"üî¥ –û—à–∏–±–∫–∞: {str(e)}\n"
                "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
            )
            # –°–æ–æ–±—â–∞–µ–º Optuna –æ —Å–±–æ–µ
            raise optuna.exceptions.TrialPruned()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="Smart Tuner V2 –¥–ª—è Tacotron2")
    parser.add_argument('--config', default='smart_tuner/config.yaml', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--optimize', action='store_true', help='–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')
    parser.add_argument('--train', action='store_true', help='–ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è')
    parser.add_argument('--n_trials', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ trials –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏')

    args = parser.parse_args()
    
    tuner = SmartTunerMain(args.config)
    
    if args.optimize:
        tuner.run_optimization(n_trials=args.n_trials)
    elif args.train:
        tuner.run_proactive_training()
    else:
        logger.info("–ù–µ –≤—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --train –∏–ª–∏ --optimize.")
        parser.print_help()

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logger.critical(f"–ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}", exc_info=True)
        sys.exit(1)

