#!/usr/bin/env python3
"""Smart Tuner V2 Main"""

import os
import sys
import logging
import argparse
import yaml
import threading
import time
import subprocess
import requests
from smart_tuner.trainer_wrapper import TrainerWrapper
from smart_tuner.optimization_engine import OptimizationEngine
from smart_tuner.alert_manager import AlertManager
from smart_tuner.web_interfaces import WebInterfaceManager

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [%(levelname)s] - (%(name)s) - %(message)s',
    handlers=[
        logging.FileHandler('smart_tuner_main.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class SmartTunerMain:
    def __init__(self, config_path="smart_tuner/config.yaml"):
        self.config_path = config_path
        with open(config_path, 'r') as f:
            self.config = yaml.safe_load(f)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º MLflow –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        self.ensure_mlflow_running()
        
        self.trainer = TrainerWrapper(self.config)
        self.optimizer = OptimizationEngine(config_path)
        self.alert_manager = AlertManager(self.config)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        self.web_manager = WebInterfaceManager(config_path)
        self.web_manager.create_interfaces()
        
        logger.info("SmartTunerMain –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        self.start_web_interfaces()
        
    def is_mlflow_running(self, port=5000):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ MLflow –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É"""
        try:
            response = requests.get(f"http://localhost:{port}", timeout=3)
            return response.status_code == 200
        except:
            return False
    
    def ensure_mlflow_running(self):
        """–£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ MLflow —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω"""
        if not self.is_mlflow_running():
            logger.info("MLflow –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º...")
            try:
                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                os.makedirs("mlruns", exist_ok=True)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º MLflow –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
                subprocess.Popen([
                    sys.executable, "-m", "mlflow", "ui",
                    "--host", "0.0.0.0",
                    "--port", "5000",
                    "--backend-store-uri", f"file://{os.path.abspath('mlruns')}"
                ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                
                # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
                for _ in range(10):
                    time.sleep(1)
                    if self.is_mlflow_running():
                        logger.info("‚úÖ MLflow —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
                        return
                
                logger.warning("‚ö†Ô∏è MLflow –∑–∞–ø—É—â–µ–Ω, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MLflow: {e}")
        else:
            logger.info("‚úÖ MLflow —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        
    def start_web_interfaces(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ Smart Tuner V2...")
            
            # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            web_thread = threading.Thread(
                target=self.web_manager.start_all,
                name="WebInterfaceManager",
                daemon=True
            )
            web_thread.start()
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            time.sleep(2)
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞
            self.web_manager.print_dashboard()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤: {e}")
        
    def run_single_training(self, hyperparams=None):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        logger.info("–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–∫—à–Ω –æ–±—É—á–µ–Ω–∏—è")
        
        if hyperparams:
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω—ã–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {hyperparams}")
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è
        self.alert_manager.send_info_notification(
            "üöÄ Smart Tuner V2 - –ü–û–õ–ù–û–¶–ï–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï\n\n"
            "üéØ –†–µ–∂–∏–º: –ü—Ä–æ–¥–∞–∫—à–Ω –æ–±—É—á–µ–Ω–∏–µ\n"
            f"‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {'–ö–∞—Å—Ç–æ–º–Ω—ã–µ' if hyperparams else '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é'}\n"
            "üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤: –í–ö–õ\n"
            "üíæ –ü–æ–ª–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π: –í–ö–õ\n\n"
            "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã!"
        )
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
            if hyperparams:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å
                hparams_str = ",".join([f"{k}={v}" for k, v in hyperparams.items()])
            else:
                hparams_str = None
                
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
            process = self.trainer.start_training(hparams_override=hparams_str)
            
            if process:
                logger.info("–ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
                return_code = process.wait()
                
                if return_code == 0:
                    metrics = {"status": "completed", "return_code": return_code}
                    logger.info("–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    metrics = {"status": "failed", "return_code": return_code}
                    logger.error(f"–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π, –∫–æ–¥: {return_code}")
            else:
                metrics = {"status": "failed", "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å"}
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            if metrics["status"] == "completed":
                self.alert_manager.send_success_notification(
                    "üéâ –ü–û–õ–ù–û–¶–ï–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!\n\n"
                    "‚úÖ –°—Ç–∞—Ç—É—Å: –£—Å–ø–µ—à–Ω–æ\n"
                    "üìÅ –ú–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ output/\n"
                    "üìä –õ–æ–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ MLflow UI\n"
                    "üåê –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö\n"
                    "üèÜ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!"
                )
            else:
                self.alert_manager.send_error_notification(
                    "‚ùå –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π\n\n"
                    f"üî¥ –°—Ç–∞—Ç—É—Å: {metrics.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}\n"
                    "üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏\n"
                    "üåê –î–µ—Ç–∞–ª–∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö"
                )
            
            return metrics
            
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏: {e}")
            self.alert_manager.send_error_notification(
                f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è\n\n"
                f"üî¥ –û—à–∏–±–∫–∞: {str(e)}\n"
                "üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ\n"
                "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
            )
            raise
        
    def run_optimization(self, n_trials=10):
        """–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        logger.info(f"–ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å {n_trials} trials")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        self.alert_manager.send_info_notification(
            "ü§ñ Smart Tuner V2 - –°—Ç–∞—Ä—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏\n\n"
            f"üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ trials: {n_trials}\n"
            f"‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~{n_trials * 15} –º–∏–Ω—É—Ç\n\n"
            "üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö:\n"
            "‚Ä¢ MLflow UI –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ Optimization Engine –¥–ª—è Optuna\n"
            "‚Ä¢ Metrics Store –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )
        
        try:
            best_params = self.optimizer.optimize(self.objective, n_trials)
            
            logger.info(f"–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_params}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            params_text = "\n".join([f"‚Ä¢ {k}: {v}" for k, v in best_params.items()])
            self.alert_manager.send_success_notification(
                "üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"üèÜ –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n{params_text}\n\n"
                "üìÅ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ smart_tuner/models/\n"
                "üåê –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö"
            )
            
            return best_params
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            self.alert_manager.send_error_notification(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏\n\n"
                f"üî¥ –û—à–∏–±–∫–∞: {str(e)}\n"
                "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"
            )
            raise
    
    def objective(self, trial):
        """
        –¶–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Optuna
        
        Args:
            trial: –û–±—ä–µ–∫—Ç trial –æ—Ç Optuna
            
        Returns:
            –ó–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            hyperparams = self.optimizer.suggest_hyperparameters(trial)
            logger.info(f"Trial {trial.number}: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã {hyperparams}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ trial
            params_text = "\n".join([f"‚Ä¢ {k}: {v}" for k, v in hyperparams.items()])
            self.alert_manager.send_info_notification(
                f"üß™ Trial #{trial.number} –Ω–∞—á–∞—Ç\n\n"
                f"üîß –ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n{params_text}\n\n"
                f"‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~15 –º–∏–Ω—É—Ç\n"
                "üåê –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö"
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å —ç—Ç–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            metrics = self.trainer.train_with_params(hyperparams)
            
            if not metrics:
                logger.warning(f"Trial {trial.number}: –ü–æ–ª—É—á–µ–Ω—ã –ø—É—Å—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
                return float('inf')  # –ü–ª–æ—Ö–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
            objective_value = self.optimizer.calculate_objective_value(metrics)
            
            logger.info(f"Trial {trial.number}: –†–µ–∑—É–ª—å—Ç–∞—Ç = {objective_value}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ trial
            best_value = trial.study.best_value if hasattr(trial.study, 'best_value') and trial.study.best_value else float('inf')
            self.alert_manager.send_info_notification(
                f"‚úÖ Trial #{trial.number} –∑–∞–≤–µ—Ä—à–µ–Ω\n\n"
                f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {objective_value:.4f}\n"
                f"üèÜ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {best_value:.4f}\n\n"
                f"‚è≠Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É trial...\n"
                "üåê –î–µ—Ç–∞–ª–∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö"
            )
            
            return objective_value
            
        except Exception as e:
            logger.error(f"Trial {trial.number}: –û—à–∏–±–∫–∞ - {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            self.alert_manager.send_error_notification(
                f"‚ùå Trial #{trial.number} –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π\n\n"
                f"üî¥ –û—à–∏–±–∫–∞: {str(e)}\n\n"
                f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É trial\n"
                "üåê –õ–æ–≥–∏ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö"
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–ª–æ—Ö–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            return float('inf')

def main():
    parser = argparse.ArgumentParser(description='Smart Tuner V2 - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')
    parser.add_argument('--mode', choices=['train', 'optimize'], default='train',
                        help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: train (–æ–±—É—á–µ–Ω–∏–µ) –∏–ª–∏ optimize (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)')
    parser.add_argument('--trials', type=int, default=10,
                        help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ trials –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 10)')
    parser.add_argument('--hyperparams', type=str, default=None,
                        help='–ö–∞—Å—Ç–æ–º–Ω—ã–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ key1=value1,key2=value2')
    args = parser.parse_args()
    
    try:
        tuner = SmartTunerMain()
        
        if args.mode == 'train':
            # –ü–∞—Ä—Å–∏–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å
            hyperparams = None
            if args.hyperparams:
                hyperparams = {}
                for param in args.hyperparams.split(','):
                    key, value = param.split('=')
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
                    try:
                        if '.' in value:
                            hyperparams[key.strip()] = float(value.strip())
                        else:
                            hyperparams[key.strip()] = int(value.strip())
                    except ValueError:
                        hyperparams[key.strip()] = value.strip()
            
            # –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è
            result = tuner.run_single_training(hyperparams)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è: {result}")
            
        elif args.mode == 'optimize':
            # –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            best_params = tuner.run_optimization(args.trials)
            print(f"–õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: {best_params}")
        
        # –î–µ—Ä–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∞–∫—Ç–∏–≤–Ω–æ–π –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
        print("\nüåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∞–∫—Ç–∏–≤–Ω—ã. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Smart Tuner V2...")
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
