"""
üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï Training Stabilization System
==========================================

–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è:
1. ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Training Stabilization System
2. ‚úÖ Intelligent Gradient Manager —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
3. ‚úÖ Adaptive Learning Rate Scheduler
4. ‚úÖ Training Stability Monitor
5. ‚úÖ Emergency Stabilization System
6. ‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Context-Aware Manager

–í–µ—Ä—Å–∏—è: 1.0.0
"""

import sys
import os
import torch
import torch.nn as nn
import numpy as np
import logging
from typing import Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)


def test_stabilization_system_import():
    """üß™ –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç Training Stabilization System"""
    logger.info("\nüß™ –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç Training Stabilization System")
    logger.info("-" * 60)
    
    try:
        from training_stabilization_system import (
            create_training_stabilization_system,
            IntelligentGradientManager,
            AdaptiveLearningRateScheduler,
            TrainingStabilityMonitor,
            EmergencyStabilizationSystem,
            StabilityLevel,
            StabilityMetrics
        )
        
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Training Stabilization System –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        class MockHParams:
            learning_rate = 1e-3
            target_gradient_norm = 2.0
            max_gradient_norm = 5.0
            min_learning_rate = 1e-5
            stability_window_size = 20
        
        hparams = MockHParams()
        stabilization_system = create_training_stabilization_system(hparams)
        
        logger.info("‚úÖ Training Stabilization System —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        logger.info("   –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: Gradient Manager, LR Scheduler, Stability Monitor, Emergency System")
        
        return True
        
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False


def test_gradient_manager():
    """üß™ –¢–µ—Å—Ç 2: Intelligent Gradient Manager"""
    logger.info("\nüß™ –¢–µ—Å—Ç 2: Intelligent Gradient Manager")
    logger.info("-" * 60)
    
    try:
        from training_stabilization_system import IntelligentGradientManager
        
        # –°–æ–∑–¥–∞–µ–º gradient manager
        gradient_manager = IntelligentGradientManager(
            target_norm=2.0,
            max_norm=5.0,
            min_norm=0.1
        )
        logger.info("‚úÖ IntelligentGradientManager —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class SimpleModel(nn.Module):
            def __init__(self):
                super().__init__()
                self.linear = nn.Linear(10, 1)
                
            def forward(self, x):
                return self.linear(x)
        
        model = SimpleModel()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –±–æ–ª—å—à–∏–º–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏
        x = torch.randn(32, 10)
        y = torch.randn(32, 1)
        
        output = model(x)
        loss = nn.MSELoss()(output, y)
        loss = loss * 100  # –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º loss –¥–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
        metrics = gradient_manager.process_gradients(model, loss)
        
        logger.info(f"‚úÖ –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:")
        logger.info(f"   –ò—Å—Ö–æ–¥–Ω–∞—è –Ω–æ—Ä–º–∞: {metrics['original_norm']:.3f}")
        logger.info(f"   –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞: {metrics['final_norm']:.3f}")
        logger.info(f"   –ö–ª–∏–ø–ø–∏–Ω–≥ –ø—Ä–∏–º–µ–Ω–µ–Ω: {metrics['clipped']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–ª–∏–ø–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
        if metrics['clipped']:
            logger.info("‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–ª–∏–ø–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            logger.info("‚úÖ –ì—Ä–∞–¥–∏–µ–Ω—Ç—ã –≤ –Ω–æ—Ä–º–µ, –∫–ª–∏–ø–ø–∏–Ω–≥ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Gradient Manager: {e}")
        return False


def test_lr_scheduler():
    """üß™ –¢–µ—Å—Ç 3: Adaptive Learning Rate Scheduler"""
    logger.info("\nüß™ –¢–µ—Å—Ç 3: Adaptive Learning Rate Scheduler")
    logger.info("-" * 60)
    
    try:
        from training_stabilization_system import AdaptiveLearningRateScheduler, StabilityMetrics, StabilityLevel
        
        # –°–æ–∑–¥–∞–µ–º LR scheduler
        lr_scheduler = AdaptiveLearningRateScheduler(
            initial_lr=1e-3,
            min_lr=1e-5,
            max_lr=1e-2,
            patience=5
        )
        logger.info("‚úÖ AdaptiveLearningRateScheduler —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        scenarios = [
            (StabilityLevel.STABLE, 2.0, "–°—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"),
            (StabilityLevel.MODERATE, 3.0, "–£–º–µ—Ä–µ–Ω–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"),
            (StabilityLevel.UNSTABLE, 8.0, "–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"),
            (StabilityLevel.CRITICAL, 15.0, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å")
        ]
        
        for stability_level, loss_value, description in scenarios:
            stability_metrics = StabilityMetrics(
                loss_std=2.0,
                gradient_norm=3.0,
                stability_level=stability_level
            )
            
            old_lr = lr_scheduler.current_lr
            new_lr = lr_scheduler.step(loss_value, stability_metrics)
            
            logger.info(f"‚úÖ {description}:")
            logger.info(f"   LR: {old_lr:.2e} ‚Üí {new_lr:.2e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ LR –∏–∑–º–µ–Ω–∏–ª—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ —É—Ä–æ–≤–Ω—é —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            if stability_level == StabilityLevel.CRITICAL:
                assert new_lr <= old_lr, "LR –¥–æ–ª–∂–µ–Ω —Å–Ω–∏–∂–∞—Ç—å—Å—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"
            
        logger.info("‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π LR scheduler —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LR Scheduler: {e}")
        return False


def test_stability_monitor():
    """üß™ –¢–µ—Å—Ç 4: Training Stability Monitor"""
    logger.info("\nüß™ –¢–µ—Å—Ç 4: Training Stability Monitor")
    logger.info("-" * 60)
    
    try:
        from training_stabilization_system import TrainingStabilityMonitor, StabilityLevel
        
        # –°–æ–∑–¥–∞–µ–º stability monitor
        stability_monitor = TrainingStabilityMonitor(window_size=10)
        logger.info("‚úÖ TrainingStabilityMonitor —Å–æ–∑–¥–∞–Ω")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è
        
        # 1. –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:")
        for i in range(15):
            loss = 2.0 + 0.1 * np.random.randn()  # –°—Ç–∞–±–∏–ª—å–Ω–∞—è loss
            grad_norm = 1.5 + 0.2 * np.random.randn()  # –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
            
            metrics = stability_monitor.update_metrics(
                loss=loss,
                gradient_norm=abs(grad_norm),
                learning_rate=1e-3,
                attention_quality=0.7
            )
        
        logger.info(f"   –£—Ä–æ–≤–µ–Ω—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {metrics.stability_level.value}")
        logger.info(f"   Loss std: {metrics.loss_std:.3f}")
        logger.info(f"   Gradient norm: {metrics.gradient_norm:.3f}")
        
        # 2. –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
        logger.info("üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è:")
        for i in range(15):
            loss = 5.0 + 3.0 * np.random.randn()  # –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–∞—è loss
            grad_norm = 8.0 + 4.0 * np.random.randn()  # –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
            
            metrics = stability_monitor.update_metrics(
                loss=abs(loss),
                gradient_norm=abs(grad_norm),
                learning_rate=1e-3,
                attention_quality=0.3
            )
        
        logger.info(f"   –£—Ä–æ–≤–µ–Ω—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {metrics.stability_level.value}")
        logger.info(f"   Loss std: {metrics.loss_std:.3f}")
        logger.info(f"   Gradient norm: {metrics.gradient_norm:.3f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ monitor –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        assert metrics.stability_level in [StabilityLevel.UNSTABLE, StabilityLevel.CRITICAL], \
            "Monitor –¥–æ–ª–∂–µ–Ω –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å"
        
        logger.info("‚úÖ Training Stability Monitor —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Stability Monitor: {e}")
        return False


def test_emergency_system():
    """üß™ –¢–µ—Å—Ç 5: Emergency Stabilization System"""
    logger.info("\nüß™ –¢–µ—Å—Ç 5: Emergency Stabilization System")
    logger.info("-" * 60)
    
    try:
        from training_stabilization_system import EmergencyStabilizationSystem, StabilityMetrics, StabilityLevel
        
        # –°–æ–∑–¥–∞–µ–º emergency system
        emergency_system = EmergencyStabilizationSystem()
        logger.info("‚úÖ EmergencyStabilizationSystem —Å–æ–∑–¥–∞–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class SimpleModel(nn.Module):
            def __init__(self):
                super().__init__()
                self.linear = nn.Linear(10, 1)
        
        model = SimpleModel()
        optimizer = torch.optim.Adam(model.parameters(), lr=1e-3)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        normal_metrics = StabilityMetrics(
            loss_std=1.0,
            gradient_norm=2.0,
            stability_level=StabilityLevel.STABLE
        )
        
        need_emergency = emergency_system.check_emergency_conditions(normal_metrics)
        logger.info(f"‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è: {need_emergency}")
        assert not need_emergency, "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
        critical_metrics = StabilityMetrics(
            loss_std=12.0,  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
            gradient_norm=20.0,  # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
            stability_level=StabilityLevel.CRITICAL
        )
        
        need_emergency = emergency_system.check_emergency_conditions(critical_metrics)
        logger.info(f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è - —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è: {need_emergency}")
        assert need_emergency, "–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö"
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        measures = emergency_system.activate_emergency_stabilization(model, optimizer, critical_metrics)
        logger.info("‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:")
        for key, value in measures.items():
            logger.info(f"   {key}: {value}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ LR —Å–Ω–∏–∂–µ–Ω
        current_lr = optimizer.param_groups[0]['lr']
        assert current_lr < 1e-3, "Learning rate –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–Ω–∏–∂–µ–Ω –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
        
        logger.info("‚úÖ Emergency Stabilization System —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Emergency System: {e}")
        return False


def test_context_aware_integration():
    """üß™ –¢–µ—Å—Ç 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Context-Aware Manager"""
    logger.info("\nüß™ –¢–µ—Å—Ç 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Context-Aware Manager")
    logger.info("-" * 60)
    
    try:
        from context_aware_training_manager import create_context_aware_manager
        
        # –°–æ–∑–¥–∞–µ–º mock hparams —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        class MockHParams:
            learning_rate = 1e-3
            guide_loss_weight = 4.5
            target_gradient_norm = 2.0
            max_gradient_norm = 5.0
            min_learning_rate = 1e-5
            stability_window_size = 20
        
        hparams = MockHParams()
        
        # –°–æ–∑–¥–∞–µ–º Context-Aware Manager
        context_manager = create_context_aware_manager(hparams)
        logger.info("‚úÖ Context-Aware Training Manager —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        if hasattr(context_manager, 'stabilization_available') and context_manager.stabilization_available:
            logger.info("‚úÖ Training Stabilization System –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ Context-Aware Manager")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
            stabilization_diagnostics = context_manager.get_stabilization_diagnostics()
            logger.info("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∞:")
            
            if 'gradient_manager' in stabilization_diagnostics:
                logger.info(f"   Gradient Manager: —Ç–µ–∫—É—â–∏–π –º–∞—Å—à—Ç–∞–± = {stabilization_diagnostics['gradient_manager'].get('current_scale', 'N/A')}")
                
            if 'lr_scheduler' in stabilization_diagnostics:
                logger.info(f"   LR Scheduler: —Ç–µ–∫—É—â–∏–π LR = {stabilization_diagnostics['lr_scheduler'].get('current_lr', 'N/A')}")
                
            if 'emergency_system' in stabilization_diagnostics:
                emergency_active = stabilization_diagnostics['emergency_system'].get('active', False)
                logger.info(f"   Emergency System: –∞–∫—Ç–∏–≤–Ω–∞ = {emergency_active}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            stats = context_manager.get_statistics()
            if 'stabilization_system' in stats:
                logger.info("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≤ –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
            
        else:
            logger.warning("‚ö†Ô∏è Training Stabilization System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ Context-Aware Manager")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Context-Aware Manager: {e}")
        return False


def test_full_system_simulation():
    """üß™ –¢–µ—Å—Ç 7: –ü–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏"""
    logger.info("\nüß™ –¢–µ—Å—Ç 7: –ü–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏")
    logger.info("-" * 60)
    
    try:
        from training_stabilization_system import create_training_stabilization_system
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        class MockHParams:
            learning_rate = 1e-3
            target_gradient_norm = 2.0
            max_gradient_norm = 5.0
            min_learning_rate = 1e-5
            stability_window_size = 10
        
        hparams = MockHParams()
        stabilization_system = create_training_stabilization_system(hparams)
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä
        class TestModel(nn.Module):
            def __init__(self):
                super().__init__()
                self.linear1 = nn.Linear(20, 10)
                self.linear2 = nn.Linear(10, 1)
                
            def forward(self, x):
                x = torch.relu(self.linear1(x))
                return self.linear2(x)
        
        model = TestModel()
        optimizer = torch.optim.Adam(model.parameters(), lr=1e-3)
        
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω—ã")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —à–∞–≥–∏ –æ–±—É—á–µ–Ω–∏—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        scenarios = [
            ("–°—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", 2.0, 0.5),
            ("–£–º–µ—Ä–µ–Ω–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", 5.0, 1.0),
            ("–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", 10.0, 2.0),
            ("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", 25.0, 5.0)
        ]
        
        for scenario_name, base_loss, noise_factor in scenarios:
            logger.info(f"üìä –°–∏–º—É–ª—è—Ü–∏—è: {scenario_name}")
            
            for step in range(5):
                # –°–æ–∑–¥–∞–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—É—é loss —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                loss_value = base_loss + noise_factor * np.random.randn()
                loss = torch.tensor(abs(loss_value), requires_grad=True)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é
                report = stabilization_system.stabilize_training_step(
                    model=model,
                    optimizer=optimizer,
                    loss=loss,
                    attention_quality=0.5
                )
                
                if step == 4:  # –û—Ç—á–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —à–∞–≥–∞ –∫–∞–∂–¥–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
                    logger.info(f"   –£—Ä–æ–≤–µ–Ω—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {report['stability_level']}")
                    if report['emergency_measures']:
                        logger.info("   üö® –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                    else:
                        logger.info("   ‚úÖ –û–±—É—á–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
        diagnostics = stabilization_system.get_system_diagnostics()
        logger.info(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:")
        logger.info(f"   –í—Å–µ–≥–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤: {diagnostics['statistics']['interventions']}")
        logger.info(f"   –≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {diagnostics['statistics']['emergency_activations']}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return False


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Training Stabilization System"""
    logger.info("üöÄ –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø Training Stabilization System")
    logger.info("=" * 80)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç —Å–∏—Å—Ç–µ–º—ã", test_stabilization_system_import),
        ("Gradient Manager", test_gradient_manager),
        ("LR Scheduler", test_lr_scheduler),
        ("Stability Monitor", test_stability_monitor),
        ("Emergency System", test_emergency_system),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Context-Aware Manager", test_context_aware_integration),
        ("–ü–æ–ª–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", test_full_system_simulation)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    logger.info("\n" + "=" * 80)
    logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø Training Stabilization System:")
    logger.info("=" * 80)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        logger.info(f"{status}: {test_name}")
    
    logger.info(f"\nüéØ –ò–¢–û–ì–û: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ ({passed/total*100:.1f}%)")
    
    if passed == total:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! Training Stabilization System –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        logger.info("üõ°Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è")
    else:
        logger.warning(f"‚ö†Ô∏è {total-passed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")
    
    return passed == total


if __name__ == "__main__":
    success = run_all_tests()
    exit_code = 0 if success else 1
    exit(exit_code) 