#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üìä PRODUCTION REAL-TIME DASHBOARD
Production-ready real-time dashboard –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚úÖ Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å auto-refresh
‚úÖ System metrics (CPU, GPU, Memory) –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚úÖ Training progress —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø–æ —Ñ–∞–∑–∞–º
‚úÖ Performance optimization recommendations
‚úÖ Alert system –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
‚úÖ Responsive –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
‚úÖ Export –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:
- Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
- Plotly –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
- Bootstrap responsive UI
- WebSocket –¥–ª—è real-time updates
- SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ—Ç—Ä–∏–∫
"""

import os
import sys
import time
import json
import sqlite3
import threading
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
from pathlib import Path
import logging

# Flask –∏ –≤–µ–±-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from flask import Flask, render_template, jsonify, request, send_file
from flask_socketio import SocketIO, emit
import plotly.graph_objs as go
import plotly.utils
import psutil
import numpy as np
from collections import deque

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –Ω–∞—à–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
try:
    from unified_performance_optimization_system import UnifiedPerformanceOptimizationSystem
    PERFORMANCE_OPTIMIZER_AVAILABLE = True
except ImportError:
    PERFORMANCE_OPTIMIZER_AVAILABLE = False

try:
    from production_monitoring import ProductionMonitor
    PRODUCTION_MONITORING_AVAILABLE = True
except ImportError:
    PRODUCTION_MONITORING_AVAILABLE = False

try:
    from context_aware_training_manager import ContextAwareTrainingManager
    CONTEXT_AWARE_AVAILABLE = True
except ImportError:
    CONTEXT_AWARE_AVAILABLE = False

try:
    from unified_logging_system import UnifiedLoggingSystem
    UNIFIED_LOGGING_AVAILABLE = True
except ImportError:
    UNIFIED_LOGGING_AVAILABLE = False

try:
    import torch
    PYTORCH_AVAILABLE = True
except ImportError:
    PYTORCH_AVAILABLE = False

# GPU –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
try:
    import pynvml
    pynvml.nvmlInit()
    GPU_MONITORING_AVAILABLE = True
except ImportError:
    GPU_MONITORING_AVAILABLE = False


class MetricsDatabase:
    """üìä Database –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ dashboard"""
    
    def __init__(self, db_path: str = "dashboard_metrics.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS system_metrics (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    cpu_usage REAL,
                    memory_usage REAL,
                    gpu_usage REAL,
                    gpu_memory_usage REAL,
                    disk_usage REAL
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ –æ–±—É—á–µ–Ω–∏—è
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS training_metrics (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    loss REAL,
                    learning_rate REAL,
                    gradient_norm REAL,
                    attention_quality REAL,
                    epoch INTEGER,
                    step INTEGER,
                    phase TEXT
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –∞–ª–µ—Ä—Ç–æ–≤
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS alerts (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    level TEXT,
                    component TEXT,
                    message TEXT,
                    resolved BOOLEAN DEFAULT FALSE
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS optimizations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    component TEXT,
                    parameter_name TEXT,
                    old_value TEXT,
                    new_value TEXT,
                    improvement_expected REAL
                )
            """)
            
            conn.commit()
    
    def insert_system_metrics(self, metrics: Dict):
        """–í—Å—Ç–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO system_metrics 
                (cpu_usage, memory_usage, gpu_usage, gpu_memory_usage, disk_usage)
                VALUES (?, ?, ?, ?, ?)
            """, (
                metrics.get('cpu_usage', 0),
                metrics.get('memory_usage', 0),
                metrics.get('gpu_usage', 0),
                metrics.get('gpu_memory_usage', 0),
                metrics.get('disk_usage', 0)
            ))
            conn.commit()
    
    def insert_training_metrics(self, metrics: Dict):
        """–í—Å—Ç–∞–≤–∫–∞ –º–µ—Ç—Ä–∏–∫ –æ–±—É—á–µ–Ω–∏—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO training_metrics 
                (loss, learning_rate, gradient_norm, attention_quality, epoch, step, phase)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                metrics.get('loss', 0),
                metrics.get('learning_rate', 0),
                metrics.get('gradient_norm', 0),
                metrics.get('attention_quality', 0),
                metrics.get('epoch', 0),
                metrics.get('step', 0),
                metrics.get('phase', 'unknown')
            ))
            conn.commit()
    
    def insert_alert(self, level: str, component: str, message: str):
        """–í—Å—Ç–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO alerts (level, component, message)
                VALUES (?, ?, ?)
            """, (level, component, message))
            conn.commit()
    
    def get_recent_metrics(self, table: str, minutes: int = 60) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute(f"""
                SELECT * FROM {table}
                WHERE timestamp > datetime('now', '-{minutes} minutes')
                ORDER BY timestamp DESC
            """)
            
            columns = [desc[0] for desc in cursor.description]
            return [dict(zip(columns, row)) for row in cursor.fetchall()]


class RealtimeMetricsCollector:
    """üîÑ Real-time —Å–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫"""
    
    def __init__(self, database: MetricsDatabase):
        self.database = database
        self.running = False
        self.collection_thread = None
        self.metrics_cache = {}
        
        # GPU handles
        self.gpu_handles = []
        if GPU_MONITORING_AVAILABLE:
            try:
                device_count = pynvml.nvmlDeviceGetCount()
                self.gpu_handles = [pynvml.nvmlDeviceGetHandleByIndex(i) 
                                  for i in range(device_count)]
            except Exception:
                pass
        
        self.logger = logging.getLogger(__name__)
    
    def collect_system_metrics(self) -> Dict:
        """–°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            # CPU –∏ –ø–∞–º—è—Ç—å
            cpu_usage = psutil.cpu_percent(interval=0.1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            metrics = {
                'cpu_usage': cpu_usage,
                'memory_usage': memory.percent,
                'disk_usage': (disk.used / disk.total) * 100,
                'gpu_usage': 0,
                'gpu_memory_usage': 0
            }
            
            # GPU –º–µ—Ç—Ä–∏–∫–∏
            if self.gpu_handles:
                try:
                    handle = self.gpu_handles[0]
                    util = pynvml.nvmlDeviceGetUtilizationRates(handle)
                    mem_info = pynvml.nvmlDeviceGetMemoryInfo(handle)
                    
                    metrics['gpu_usage'] = util.gpu
                    metrics['gpu_memory_usage'] = (mem_info.used / mem_info.total) * 100
                except Exception:
                    pass
            
            return metrics
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
            return {}
    
    def start_collection(self, interval: float = 2.0):
        """–ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
        if self.running:
            return
        
        self.running = True
        self.collection_thread = threading.Thread(
            target=self._collection_loop,
            args=(interval,),
            daemon=True
        )
        self.collection_thread.start()
        self.logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω real-time —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫")
    
    def stop_collection(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
        self.running = False
        if self.collection_thread:
            self.collection_thread.join()
        self.logger.info("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫")
    
    def _collection_loop(self, interval: float):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫"""
        while self.running:
            try:
                # –°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
                system_metrics = self.collect_system_metrics()
                if system_metrics:
                    self.database.insert_system_metrics(system_metrics)
                    self.metrics_cache['system'] = system_metrics
                
                time.sleep(interval)
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫: {e}")
                time.sleep(interval)
    
    def get_cached_metrics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        return self.metrics_cache.copy()


class AlertManager:
    """üö® –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self, database: MetricsDatabase):
        self.database = database
        self.alert_thresholds = {
            'cpu_usage': 90.0,
            'memory_usage': 90.0,
            'gpu_memory_usage': 95.0,
            'gradient_norm': 10.0,
            'loss_spike': 50.0
        }
        self.recent_alerts = deque(maxlen=100)
        
    def check_system_alerts(self, metrics: Dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        alerts = []
        
        # CPU –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞
        if metrics.get('cpu_usage', 0) > self.alert_thresholds['cpu_usage']:
            alert = {
                'level': 'warning',
                'component': 'system',
                'message': f"–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU: {metrics['cpu_usage']:.1f}%"
            }
            alerts.append(alert)
        
        # –ü–∞–º—è—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞
        if metrics.get('memory_usage', 0) > self.alert_thresholds['memory_usage']:
            alert = {
                'level': 'critical',
                'component': 'system',
                'message': f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {metrics['memory_usage']:.1f}%"
            }
            alerts.append(alert)
        
        # GPU –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞
        if metrics.get('gpu_memory_usage', 0) > self.alert_thresholds['gpu_memory_usage']:
            alert = {
                'level': 'critical',
                'component': 'gpu',
                'message': f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU –ø–∞–º—è—Ç–∏: {metrics['gpu_memory_usage']:.1f}%"
            }
            alerts.append(alert)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
        for alert in alerts:
            self.database.insert_alert(
                alert['level'], 
                alert['component'], 
                alert['message']
            )
            self.recent_alerts.append(alert)
        
        return alerts
    
    def check_training_alerts(self, metrics: Dict):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è"""
        alerts = []
        
        # –í–∑—Ä—ã–≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
        if metrics.get('gradient_norm', 0) > self.alert_thresholds['gradient_norm']:
            alert = {
                'level': 'warning',
                'component': 'training',
                'message': f"–í—ã—Å–æ–∫–∞—è –Ω–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤: {metrics['gradient_norm']:.2f}"
            }
            alerts.append(alert)
        
        # –°–∫–∞—á–æ–∫ loss
        if metrics.get('loss', 0) > self.alert_thresholds['loss_spike']:
            alert = {
                'level': 'critical',
                'component': 'training',
                'message': f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–∞—á–æ–∫ loss: {metrics['loss']:.2f}"
            }
            alerts.append(alert)
        
        # –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ attention
        if metrics.get('attention_quality', 1.0) < 0.1:
            alert = {
                'level': 'warning',
                'component': 'attention',
                'message': f"–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ attention: {metrics['attention_quality']:.3f}"
            }
            alerts.append(alert)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
        for alert in alerts:
            self.database.insert_alert(
                alert['level'], 
                alert['component'], 
                alert['message']
            )
            self.recent_alerts.append(alert)
        
        return alerts
    
    def get_recent_alerts(self, limit: int = 10) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤"""
        return list(self.recent_alerts)[-limit:]


class DashboardGraphGenerator:
    """üìà –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è dashboard"""
    
    def __init__(self, database: MetricsDatabase):
        self.database = database
    
    def create_system_metrics_plot(self, minutes: int = 30) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            metrics = self.database.get_recent_metrics('system_metrics', minutes)
            
            if not metrics:
                return json.dumps({})
            
            timestamps = [m['timestamp'] for m in metrics]
            
            fig = go.Figure()
            
            # CPU Usage
            fig.add_trace(go.Scatter(
                x=timestamps,
                y=[m['cpu_usage'] for m in metrics],
                mode='lines+markers',
                name='CPU Usage (%)',
                line=dict(color='#FF6B6B', width=2)
            ))
            
            # Memory Usage
            fig.add_trace(go.Scatter(
                x=timestamps,
                y=[m['memory_usage'] for m in metrics],
                mode='lines+markers',
                name='Memory Usage (%)',
                line=dict(color='#4ECDC4', width=2)
            ))
            
            # GPU Usage
            fig.add_trace(go.Scatter(
                x=timestamps,
                y=[m['gpu_usage'] for m in metrics],
                mode='lines+markers',
                name='GPU Usage (%)',
                line=dict(color='#45B7D1', width=2)
            ))
            
            fig.update_layout(
                title='System Performance Metrics',
                xaxis_title='Time',
                yaxis_title='Usage (%)',
                hovermode='x unified',
                showlegend=True,
                height=400,
                margin=dict(l=50, r=50, t=50, b=50)
            )
            
            return json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")
            return json.dumps({})
    
    def create_training_progress_plot(self, minutes: int = 60) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è"""
        try:
            metrics = self.database.get_recent_metrics('training_metrics', minutes)
            
            if not metrics:
                return json.dumps({})
            
            timestamps = [m['timestamp'] for m in metrics]
            
            fig = go.Figure()
            
            # Loss
            fig.add_trace(go.Scatter(
                x=timestamps,
                y=[m['loss'] for m in metrics],
                mode='lines+markers',
                name='Loss',
                line=dict(color='#FF6B6B', width=2),
                yaxis='y'
            ))
            
            # Learning Rate
            fig.add_trace(go.Scatter(
                x=timestamps,
                y=[m['learning_rate'] for m in metrics],
                mode='lines+markers',
                name='Learning Rate',
                line=dict(color='#96CEB4', width=2),
                yaxis='y2'
            ))
            
            # Attention Quality
            fig.add_trace(go.Scatter(
                x=timestamps,
                y=[m['attention_quality'] for m in metrics],
                mode='lines+markers',
                name='Attention Quality',
                line=dict(color='#FFEAA7', width=2),
                yaxis='y3'
            ))
            
            fig.update_layout(
                title='Training Progress',
                xaxis_title='Time',
                yaxis=dict(title='Loss', side='left'),
                yaxis2=dict(title='Learning Rate', side='right', overlaying='y'),
                yaxis3=dict(title='Attention Quality', side='right', overlaying='y', anchor='free', position=0.95),
                hovermode='x unified',
                showlegend=True,
                height=400,
                margin=dict(l=50, r=50, t=50, b=50)
            )
            
            return json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")
            return json.dumps({})
    
    def create_performance_gauge(self, current_metrics: Dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ gauge –¥–ª—è –æ–±—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            cpu_score = max(0, 100 - current_metrics.get('cpu_usage', 0))
            memory_score = max(0, 100 - current_metrics.get('memory_usage', 0))
            gpu_score = current_metrics.get('gpu_usage', 0)
            
            overall_score = (cpu_score + memory_score + gpu_score) / 3
            
            fig = go.Figure(go.Indicator(
                mode = "gauge+number+delta",
                value = overall_score,
                domain = {'x': [0, 1], 'y': [0, 1]},
                title = {'text': "Overall Performance"},
                delta = {'reference': 75},
                gauge = {
                    'axis': {'range': [None, 100]},
                    'bar': {'color': "darkblue"},
                    'steps': [
                        {'range': [0, 50], 'color': "lightgray"},
                        {'range': [50, 75], 'color': "yellow"},
                        {'range': [75, 100], 'color': "green"}
                    ],
                    'threshold': {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.75,
                        'value': 90
                    }
                }
            ))
            
            fig.update_layout(height=300, margin=dict(l=20, r=20, t=40, b=20))
            
            return json.dumps(fig, cls=plotly.utils.PlotlyJSONEncoder)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è gauge: {e}")
            return json.dumps({})


class ProductionRealtimeDashboard:
    """üéØ –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å production real-time dashboard"""
    
    def __init__(self, host: str = '0.0.0.0', port: int = 5001):
        self.host = host
        self.port = port
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = Flask(__name__)
        self.app.config['SECRET_KEY'] = 'dashboard_secret_key_2025'
        self.socketio = SocketIO(self.app, cors_allowed_origins="*")
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã dashboard
        self.database = MetricsDatabase()
        self.metrics_collector = RealtimeMetricsCollector(self.database)
        self.alert_manager = AlertManager(self.database)
        self.graph_generator = DashboardGraphGenerator(self.database)
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–∞–º–∏
        self.performance_optimizer = None
        self.production_monitor = None
        self.context_manager = None
        
        self._initialize_integrations()
        self._setup_routes()
        self._setup_websocket_handlers()
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        if UNIFIED_LOGGING_AVAILABLE:
            self.logger = UnifiedLoggingSystem().get_logger("Dashboard")
        else:
            self.logger = logging.getLogger(__name__)
    
    def _initialize_integrations(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å —Å–∏—Å—Ç–µ–º–∞–º–∏"""
        try:
            if PERFORMANCE_OPTIMIZER_AVAILABLE:
                from hparams import create_hparams
                hparams = create_hparams()
                self.performance_optimizer = UnifiedPerformanceOptimizationSystem(hparams)
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å Performance Optimizer: {e}")
        
        try:
            if PRODUCTION_MONITORING_AVAILABLE:
                self.production_monitor = ProductionMonitor()
        except Exception as e:
            self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å Production Monitor: {e}")
    
    def _setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ Flask"""
        
        @self.app.route('/')
        def index():
            """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ dashboard"""
            return render_template('dashboard.html')
        
        @self.app.route('/api/metrics/system')
        def get_system_metrics():
            """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
            cached_metrics = self.metrics_collector.get_cached_metrics()
            return jsonify(cached_metrics.get('system', {}))
        
        @self.app.route('/api/metrics/training')
        def get_training_metrics():
            """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –æ–±—É—á–µ–Ω–∏—è"""
            cached_metrics = self.metrics_collector.get_cached_metrics()
            return jsonify(cached_metrics.get('training', {}))
        
        @self.app.route('/api/alerts')
        def get_alerts():
            """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–ª–µ—Ä—Ç–æ–≤"""
            alerts = self.alert_manager.get_recent_alerts(20)
            return jsonify(alerts)
        
        @self.app.route('/api/charts/system')
        def get_system_chart():
            """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
            minutes = request.args.get('minutes', 30, type=int)
            chart_data = self.graph_generator.create_system_metrics_plot(minutes)
            return jsonify({'chart': chart_data})
        
        @self.app.route('/api/charts/training')
        def get_training_chart():
            """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è"""
            minutes = request.args.get('minutes', 60, type=int)
            chart_data = self.graph_generator.create_training_progress_plot(minutes)
            return jsonify({'chart': chart_data})
        
        @self.app.route('/api/charts/performance')
        def get_performance_gauge():
            """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è gauge –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
            cached_metrics = self.metrics_collector.get_cached_metrics()
            gauge_data = self.graph_generator.create_performance_gauge(
                cached_metrics.get('system', {})
            )
            return jsonify({'gauge': gauge_data})
        
        @self.app.route('/api/optimize', methods=['POST'])
        def trigger_optimization():
            """API –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
            if self.performance_optimizer:
                try:
                    result = self.performance_optimizer.optimize_performance_step(
                        force_optimization=True
                    )
                    return jsonify({'success': True, 'result': result})
                except Exception as e:
                    return jsonify({'success': False, 'error': str(e)})
            else:
                return jsonify({'success': False, 'error': 'Performance optimizer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'})
    
    def _setup_websocket_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        @self.socketio.on('connect')
        def handle_connect():
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
            print(f'üîó –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {request.sid}')
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            cached_metrics = self.metrics_collector.get_cached_metrics()
            emit('metrics_update', cached_metrics)
        
        @self.socketio.on('disconnect')
        def handle_disconnect():
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
            print(f'‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {request.sid}')
    
    def start_realtime_updates(self):
        """–ó–∞–ø—É—Å–∫ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
        def update_loop():
            while True:
                try:
                    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
                    cached_metrics = self.metrics_collector.get_cached_metrics()
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤
                    if 'system' in cached_metrics:
                        system_alerts = self.alert_manager.check_system_alerts(
                            cached_metrics['system']
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ WebSocket
                        if system_alerts:
                            self.socketio.emit('new_alerts', system_alerts)
                    
                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
                    self.socketio.emit('metrics_update', cached_metrics)
                    
                    time.sleep(2)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
                    time.sleep(5)
        
        # –ó–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        update_thread = threading.Thread(target=update_loop, daemon=True)
        update_thread.start()
    
    def run(self, debug: bool = False):
        """–ó–∞–ø—É—Å–∫ dashboard —Å–µ—Ä–≤–µ—Ä–∞"""
        # –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
        self.metrics_collector.start_collection()
        
        # –ó–∞–ø—É—Å–∫ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        self.start_realtime_updates()
        
        self.logger.info(f"üöÄ Production Real-time Dashboard –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://{self.host}:{self.port}")
        
        # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
        self.socketio.run(
            self.app,
            host=self.host,
            port=self.port,
            debug=debug,
            allow_unsafe_werkzeug=True
        )
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ dashboard"""
        self.metrics_collector.stop_collection()
        self.logger.info("‚èπÔ∏è Dashboard –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


def create_dashboard_template():
    """–°–æ–∑–¥–∞–Ω–∏–µ HTML —à–∞–±–ª–æ–Ω–∞ –¥–ª—è dashboard"""
    template_dir = Path("templates")
    template_dir.mkdir(exist_ok=True)
    
    html_content = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üöÄ Tacotron2 Production Dashboard</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Plotly.js -->
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    
    <!-- Socket.IO -->
    <script src="https://cdn.socket.io/4.5.0/socket.io.min.js"></script>
    
    <style>
        .metric-card {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 15px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .alert-badge {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }
        
        .chart-container {
            background: white;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .status-indicator {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            display: inline-block;
            margin-right: 10px;
        }
        
        .status-healthy { background-color: #28a745; }
        .status-warning { background-color: #ffc107; }
        .status-critical { background-color: #dc3545; }
        
        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
        }
        
        .navbar {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%) !important;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <nav class="navbar navbar-dark">
        <div class="container-fluid">
            <span class="navbar-brand mb-0 h1">üöÄ Tacotron2 Production Dashboard</span>
            <div class="d-flex">
                <span class="navbar-text me-3">
                    <span class="status-indicator status-healthy" id="connection-status"></span>
                    <span id="connection-text">Connected</span>
                </span>
                <button class="btn btn-outline-light" onclick="triggerOptimization()">
                    ‚ö° Optimize
                </button>
            </div>
        </div>
    </nav>

    <!-- Alert Badge -->
    <div id="alert-badge" class="alert-badge" style="display: none;">
        <div class="alert alert-warning alert-dismissible" role="alert">
            <strong>üö® Alert!</strong> <span id="alert-message"></span>
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    </div>

    <div class="container-fluid mt-4">
        <!-- System Metrics Row -->
        <div class="row">
            <div class="col-md-3">
                <div class="metric-card">
                    <h5>üíª CPU Usage</h5>
                    <h2 id="cpu-usage">--</h2>
                    <small>Current load</small>
                </div>
            </div>
            <div class="col-md-3">
                <div class="metric-card">
                    <h5>üß† Memory Usage</h5>
                    <h2 id="memory-usage">--</h2>
                    <small>RAM utilization</small>
                </div>
            </div>
            <div class="col-md-3">
                <div class="metric-card">
                    <h5>üéÆ GPU Usage</h5>
                    <h2 id="gpu-usage">--</h2>
                    <small>GPU utilization</small>
                </div>
            </div>
            <div class="col-md-3">
                <div class="metric-card">
                    <h5>‚ö° Performance</h5>
                    <h2 id="performance-score">--</h2>
                    <small>Overall efficiency</small>
                </div>
            </div>
        </div>

        <!-- Charts Row -->
        <div class="row">
            <div class="col-md-8">
                <div class="chart-container">
                    <h5>üìä System Performance</h5>
                    <div id="system-chart"></div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="chart-container">
                    <h5>üéØ Performance Gauge</h5>
                    <div id="performance-gauge"></div>
                </div>
            </div>
        </div>

        <!-- Training Metrics Row -->
        <div class="row">
            <div class="col-md-12">
                <div class="chart-container">
                    <h5>üéµ Training Progress</h5>
                    <div id="training-chart"></div>
                </div>
            </div>
        </div>

        <!-- Recent Alerts -->
        <div class="row">
            <div class="col-md-12">
                <div class="chart-container">
                    <h5>üö® Recent Alerts</h5>
                    <div id="alerts-list">
                        <p class="text-muted">No recent alerts</p>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        // Socket.IO connection
        const socket = io();
        
        // Connection status
        socket.on('connect', function() {
            document.getElementById('connection-status').className = 'status-indicator status-healthy';
            document.getElementById('connection-text').textContent = 'Connected';
        });
        
        socket.on('disconnect', function() {
            document.getElementById('connection-status').className = 'status-indicator status-critical';
            document.getElementById('connection-text').textContent = 'Disconnected';
        });
        
        // Metrics updates
        socket.on('metrics_update', function(data) {
            updateMetricCards(data);
            updateCharts();
        });
        
        // New alerts
        socket.on('new_alerts', function(alerts) {
            showAlert(alerts[0]); // Show first alert
            updateAlertsList(alerts);
        });
        
        function updateMetricCards(data) {
            if (data.system) {
                document.getElementById('cpu-usage').textContent = 
                    data.system.cpu_usage ? data.system.cpu_usage.toFixed(1) + '%' : '--';
                document.getElementById('memory-usage').textContent = 
                    data.system.memory_usage ? data.system.memory_usage.toFixed(1) + '%' : '--';
                document.getElementById('gpu-usage').textContent = 
                    data.system.gpu_usage ? data.system.gpu_usage.toFixed(1) + '%' : '--';
                
                // Calculate performance score
                const cpuScore = Math.max(0, 100 - (data.system.cpu_usage || 0));
                const memScore = Math.max(0, 100 - (data.system.memory_usage || 0));
                const gpuScore = data.system.gpu_usage || 0;
                const perfScore = ((cpuScore + memScore + gpuScore) / 3).toFixed(0);
                document.getElementById('performance-score').textContent = perfScore + '%';
            }
        }
        
        function updateCharts() {
            // Update system chart
            fetch('/api/charts/system')
                .then(response => response.json())
                .then(data => {
                    if (data.chart) {
                        const chartData = JSON.parse(data.chart);
                        Plotly.newPlot('system-chart', chartData.data, chartData.layout, {responsive: true});
                    }
                });
            
            // Update performance gauge
            fetch('/api/charts/performance')
                .then(response => response.json())
                .then(data => {
                    if (data.gauge) {
                        const gaugeData = JSON.parse(data.gauge);
                        Plotly.newPlot('performance-gauge', gaugeData.data, gaugeData.layout, {responsive: true});
                    }
                });
            
            // Update training chart
            fetch('/api/charts/training')
                .then(response => response.json())
                .then(data => {
                    if (data.chart) {
                        const chartData = JSON.parse(data.chart);
                        Plotly.newPlot('training-chart', chartData.data, chartData.layout, {responsive: true});
                    }
                });
        }
        
        function showAlert(alert) {
            document.getElementById('alert-message').textContent = alert.message;
            const alertBadge = document.getElementById('alert-badge');
            alertBadge.style.display = 'block';
            
            // Auto-hide after 10 seconds
            setTimeout(() => {
                alertBadge.style.display = 'none';
            }, 10000);
        }
        
        function updateAlertsList(alerts) {
            const alertsList = document.getElementById('alerts-list');
            if (alerts.length === 0) {
                alertsList.innerHTML = '<p class="text-muted">No recent alerts</p>';
                return;
            }
            
            const alertsHtml = alerts.map(alert => `
                <div class="alert alert-${alert.level === 'critical' ? 'danger' : 'warning'} py-2">
                    <strong>${alert.component}:</strong> ${alert.message}
                </div>
            `).join('');
            
            alertsList.innerHTML = alertsHtml;
        }
        
        function triggerOptimization() {
            fetch('/api/optimize', {method: 'POST'})
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showAlert({message: 'Optimization triggered successfully', level: 'info'});
                    } else {
                        showAlert({message: 'Optimization failed: ' + data.error, level: 'critical'});
                    }
                });
        }
        
        // Initial chart load
        updateCharts();
        
        // Auto-refresh charts every 30 seconds
        setInterval(updateCharts, 30000);
    </script>
</body>
</html>
    '''
    
    with open(template_dir / "dashboard.html", 'w', encoding='utf-8') as f:
        f.write(html_content)


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–Ω–∏–µ HTML —à–∞–±–ª–æ–Ω–∞
    create_dashboard_template()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ dashboard
    dashboard = ProductionRealtimeDashboard(host='0.0.0.0', port=5001)
    
    try:
        dashboard.run(debug=False)
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ dashboard...")
        dashboard.stop() 