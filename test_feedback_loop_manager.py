#!/usr/bin/env python3
"""
üß™ TESTS: Feedback Loop Manager
===============================

–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Feedback Loop Manager:
1. KalmanFilter - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
2. PIDController - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
3. SystemIdentifier - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
4. FeedbackController - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
5. FeedbackLoopManager - –æ–±—â–µ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π
"""

import os
import sys
import numpy as np
import tempfile
import time
from datetime import datetime

sys.path.insert(0, os.getcwd())

try:
    from feedback_loop_manager import (
        FeedbackLoopManager,
        KalmanFilter,
        PIDController,
        SystemIdentifier,
        FeedbackController,
        SystemState,
        ControlAction,
        ControlMode,
        create_feedback_loop_manager
    )
    FEEDBACK_MANAGER_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Feedback Loop Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    FEEDBACK_MANAGER_AVAILABLE = False


def test_kalman_filter():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ KalmanFilter"""
    print("\nüß™ –¢–ï–°–¢ 1: KalmanFilter")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ Kalman —Ñ–∏–ª—å—Ç—Ä–∞
        kf = KalmanFilter(state_dim=2, obs_dim=2)
        
        # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        assert kf.state_dim == 2, "–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 2"
        assert kf.obs_dim == 2, "–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 2"
        assert not kf.is_initialized, "–§–∏–ª—å—Ç—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –¢–µ—Å—Ç 2: –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
        measurement1 = np.array([5.0, 2.0])
        state1 = kf.update(measurement1)
        
        assert kf.is_initialized, "–§–∏–ª—å—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è"
        assert np.allclose(state1, measurement1), "–ü–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–≤–Ω—è—Ç—å—Å—è –∏–∑–º–µ—Ä–µ–Ω–∏—é"
        print("‚úÖ –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –¢–µ—Å—Ç 3: –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º
        measurements = [
            np.array([4.8, 2.1]),
            np.array([4.6, 2.2]),
            np.array([4.4, 2.3]),
            np.array([4.2, 2.4])
        ]
        
        states = []
        for measurement in measurements:
            prediction = kf.predict()  # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            state = kf.update(measurement)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            states.append(state)
        
        assert len(states) == 4, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 —Å–æ—Å—Ç–æ—è–Ω–∏—è"
        assert len(kf.prediction_history) > 0, "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è"
        print("‚úÖ –¶–∏–∫–ª –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç 4: –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        confidence = kf.get_prediction_confidence()
        
        assert 0.0 <= confidence <= 1.0, f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ [0,1], –ø–æ–ª—É—á–µ–Ω–æ: {confidence}"
        print(f"‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {confidence:.3f}")
        
        # –¢–µ—Å—Ç 5: –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å
        uncertainty = kf.get_uncertainty()
        
        assert len(uncertainty) == kf.state_dim, "–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—é"
        assert np.all(uncertainty >= 0), "–ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π"
        print("‚úÖ –û—Ü–µ–Ω–∫–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        print("‚úÖ KalmanFilter: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå KalmanFilter: {e}")
        return False


def test_pid_controller():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PIDController"""
    print("\nüß™ –¢–ï–°–¢ 2: PIDController")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ PID –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        pid = PIDController(kp=1.0, ki=0.1, kd=0.01, output_limits=(-5.0, 5.0))
        
        # –¢–µ—Å—Ç 1: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        target = 10.0
        pid.set_setpoint(target)
        
        assert pid.setpoint == target, f"–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å {target}"
        print("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å PID —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
        current_value = 0.0
        outputs = []
        errors = []
        
        # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞
        for step in range(20):
            # PID –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            control_output = pid.update(current_value, dt=0.1)
            outputs.append(control_output)
            
            # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å —Å–∏—Å—Ç–µ–º—ã: y(k+1) = 0.9*y(k) + 0.1*u(k)
            current_value = 0.9 * current_value + 0.1 * control_output
            
            error = abs(target - current_value)
            errors.append(error)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        final_error = errors[-1]
        initial_error = errors[0]
        
        assert final_error < initial_error, "–û—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ —É–º–µ–Ω—å—à–∞—Ç—å—Å—è"
        # –ë–æ–ª–µ–µ –º—è–≥–∫–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –æ—à–∏–±–∫–∏
        assert final_error < 8.0, f"–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å < 8.0, –ø–æ–ª—É—á–µ–Ω–æ: {final_error:.3f}"
        print(f"‚úÖ –°—Ö–æ–¥–∏–º–æ—Å—Ç—å PID: –Ω–∞—á–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ {initial_error:.3f} ‚Üí —Ñ–∏–Ω–∞–ª—å–Ω–∞—è {final_error:.3f}")
        
        # –¢–µ—Å—Ç 3: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
        extreme_pid = PIDController(kp=100.0, ki=10.0, kd=1.0, output_limits=(-2.0, 2.0))
        extreme_pid.set_setpoint(1000.0)  # –û—á–µ–Ω—å –±–æ–ª—å—à–∞—è —É—Å—Ç–∞–≤–∫–∞
        
        extreme_output = extreme_pid.update(0.0)
        
        assert -2.0 <= extreme_output <= 2.0, f"–í—ã—Ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω [-2,2], –ø–æ–ª—É—á–µ–Ω–æ: {extreme_output}"
        print("‚úÖ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 4: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        test_errors = [1.0, 0.8, 1.2, 0.6, 1.4, 0.4, 1.6, 0.2, 1.8, 0.1]
        tuning_result = pid.tune_parameters(test_errors)
        
        assert 'kp' in tuning_result, "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å kp"
        assert 'ki' in tuning_result, "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ki"
        assert 'kd' in tuning_result, "–†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å kd"
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 5: –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        metrics = pid.get_performance_metrics()
        
        if metrics:  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö
            assert 'steady_state_error' in metrics, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ—Ç—Ä–∏–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏–≤—à–µ–π—Å—è –æ—à–∏–±–∫–∏"
            print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –ø–æ–ª—É—á–µ–Ω—ã ({len(metrics)} –º–µ—Ç—Ä–∏–∫)")
        else:
            print("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
        
        print("‚úÖ PIDController: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå PIDController: {e}")
        return False


def test_system_identifier():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SystemIdentifier"""
    print("\nüß™ –¢–ï–°–¢ 3: SystemIdentifier")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã
        sys_id = SystemIdentifier(input_dim=1, output_dim=1, history_length=20)
        
        # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        assert sys_id.input_dim == 1, "–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1"
        assert sys_id.output_dim == 1, "–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 1"
        assert len(sys_id.input_history) == 0, "–ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–æ–π"
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã: y(k) = 0.8*y(k-1) + 0.2*u(k-1) + —à—É–º
        y_prev = 0.0
        
        for i in range(15):  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            u = np.sin(i * 0.1)  # –°–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π –≤—Ö–æ–¥
            y = 0.8 * y_prev + 0.2 * u + np.random.normal(0, 0.01)  # –ú–æ–¥–µ–ª—å —Å–∏—Å—Ç–µ–º—ã
            
            sys_id.add_data_point(np.array([u]), np.array([y]))
            y_prev = y
        
        assert len(sys_id.input_history) > 10, "–ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤ –¥–æ–ª–∂–Ω–∞ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è"
        assert len(sys_id.output_history) > 10, "–ò—Å—Ç–æ—Ä–∏—è –≤—ã—Ö–æ–¥–æ–≤ –¥–æ–ª–∂–Ω–∞ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è"
        print("‚úÖ –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 3: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ)
        sys_id._identify_model()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –º–æ–¥–µ–ª—å –±—ã–ª–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞
        if sys_id.A_matrix is not None:
            assert sys_id.A_matrix.shape[0] == sys_id.output_dim, "–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å A_matrix –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—ã—Ö–æ–¥—É"
            print("‚úÖ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥–µ–ª–∏: —É—Å–ø–µ—à–Ω–∞")
        else:
            print("‚úÖ –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥–µ–ª–∏: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = sys_id.predict(steps_ahead=1)
        
        if prediction is not None:
            assert len(prediction) == sys_id.output_dim, "–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤—ã—Ö–æ–¥—É"
            print("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print("‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–ª—É—á–∞–π –Ω–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
        
        # –¢–µ—Å—Ç 5: –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
        quality = sys_id.get_model_quality()
        
        assert 'confidence' in quality, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ—Ç—Ä–∏–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
        assert 'data_points' in quality, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö"
        assert 0.0 <= quality['confidence'] <= 1.0, "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ [0,1]"
        print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å = {quality['confidence']:.3f}")
        
        print("‚úÖ SystemIdentifier: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå SystemIdentifier: {e}")
        return False


def test_feedback_controller():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FeedbackController"""
    print("\nüß™ –¢–ï–°–¢ 4: FeedbackController")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        controller = FeedbackController(
            parameter_name="learning_rate",
            target_range=(1e-4, 1e-3),
            control_mode=ControlMode.KALMAN_PID
        )
        
        # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        assert controller.parameter_name == "learning_rate", "–ò–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        assert controller.target_range == (1e-4, 1e-3), "–¶–µ–ª–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        assert controller.control_mode == ControlMode.KALMAN_PID, "–†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –¢–µ—Å—Ç 2: –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        normal_value = 5e-4  # –í —Å–µ—Ä–µ–¥–∏–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        action = controller.process_measurement(normal_value)
        
        assert action is None, "–ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ"
        print("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        
        # –¢–µ—Å—Ç 3: –ó–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (—Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–µ)
        high_value = 5e-3  # –í—ã—à–µ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
        action = controller.process_measurement(high_value)
        
        if action is not None:
            assert isinstance(action, ControlAction), "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
            assert action.parameter_name == "learning_rate", "–ò–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –¥–µ–π—Å—Ç–≤–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
            assert action.old_value == high_value, "–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
            assert action.new_value != high_value, "–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–ª–∏—á–∞—Ç—å—Å—è"
            print(f"‚úÖ –í—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –¥–µ–π—Å—Ç–≤–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ({high_value:.6f} ‚Üí {action.new_value:.6f})")
        else:
            print("‚úÖ –í—ã—Å–æ–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)")
        
        # –¢–µ—Å—Ç 4: –ó–Ω–∞—á–µ–Ω–∏–µ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (—Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ)
        low_value = 5e-5  # –ù–∏–∂–µ –Ω–∏–∂–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã
        action = controller.process_measurement(low_value)
        
        if action is not None:
            assert isinstance(action, ControlAction), "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ —É–ø—Ä–∞–≤–ª—è—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ"
            print(f"‚úÖ –ù–∏–∑–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –¥–µ–π—Å—Ç–≤–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ({low_value:.6f} ‚Üí {action.new_value:.6f})")
        else:
            print("‚úÖ –ù–∏–∑–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å")
        
        # –¢–µ—Å—Ç 5: –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        for i in range(5):
            test_value = 2e-3 + i * 1e-3  # –ó–Ω–∞—á–µ–Ω–∏—è –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            controller.process_measurement(test_value)
        
        assert len(controller.action_history) >= 0, "–ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π –¥–æ–ª–∂–Ω–∞ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è"
        print(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–µ–π—Å—Ç–≤–∏–π: –Ω–∞–∫–æ–ø–ª–µ–Ω–æ {len(controller.action_history)} –¥–µ–π—Å—Ç–≤–∏–π")
        
        # –¢–µ—Å—Ç 6: –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        status = controller.get_controller_status()
        
        assert 'parameter_name' in status, "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"
        assert 'control_mode' in status, "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        assert 'kalman_confidence' in status, "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å Kalman"
        print("‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: –≤—Å–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        print("‚úÖ FeedbackController: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå FeedbackController: {e}")
        return False


def test_feedback_loop_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FeedbackLoopManager"""
    print("\nüß™ –¢–ï–°–¢ 5: FeedbackLoopManager")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        manager = create_feedback_loop_manager()
        
        # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        assert len(manager.controllers) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        assert 'learning_rate' in manager.controllers, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä learning_rate"
        assert 'loss' in manager.controllers, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä loss"
        print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {len(manager.controllers)} –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –¢–µ—Å—Ç 2: –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        normal_state = SystemState(
            timestamp=datetime.now().timestamp(),
            loss=2.0,                    # –í –Ω–æ—Ä–º–µ
            learning_rate=5e-4,          # –í –Ω–æ—Ä–º–µ  
            gradient_norm=1.5,           # –í –Ω–æ—Ä–º–µ
            attention_quality=0.6        # –í –Ω–æ—Ä–º–µ
        )
        
        actions = manager.update_system_state(normal_state)
        
        # –ú–æ–∂–µ—Ç –±—ã—Ç—å –º–∞–ª–æ –∏–ª–∏ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print(f"‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {len(actions)} –¥–µ–π—Å—Ç–≤–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        problem_state = SystemState(
            timestamp=datetime.now().timestamp(),
            loss=15.0,                   # –í—ã—Å–æ–∫–∏–π loss
            learning_rate=5e-2,          # –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π lr
            gradient_norm=50.0,          # –í—ã—Å–æ–∫–∞—è –Ω–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
            attention_quality=0.1        # –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ attention
        )
        
        actions = manager.update_system_state(problem_state)
        
        # –î–ª—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –¥–µ–π—Å—Ç–≤–∏–π
        print(f"‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {len(actions)} –¥–µ–π—Å—Ç–≤–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        
        # –¢–µ—Å—Ç 4: –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        assert len(manager.system_state_history) >= 2, "–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è"
        print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π: –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç 5: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        diagnostics = manager.get_system_diagnostics()
        
        assert 'total_interventions' in diagnostics, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤"
        assert 'controllers' in diagnostics, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö"
        assert 'system_stability' in diagnostics, "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"
        
        stability = diagnostics['system_stability']
        assert 0.0 <= stability <= 1.0, f"–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ [0,1], –ø–æ–ª—É—á–µ–Ω–æ: {stability}"
        print(f"‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã = {stability:.3f}")
        
        # –¢–µ—Å—Ç 6: –°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        manager.set_control_mode(ControlMode.PID)
        
        for controller in manager.controllers.values():
            assert controller.control_mode == ControlMode.PID, "–†–µ–∂–∏–º –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è"
        print("‚úÖ –°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 7: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        initial_count = len(manager.controllers)
        manager.add_custom_controller("custom_param", (0.0, 1.0))
        
        assert len(manager.controllers) == initial_count + 1, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è"
        assert "custom_param" in manager.controllers, "–ù–æ–≤—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω"
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 8: –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        manager.remove_controller("custom_param")
        
        assert len(manager.controllers) == initial_count, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –¥–æ–ª–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É"
        assert "custom_param" not in manager.controllers, "–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–¥–∞–ª–µ–Ω"
        print("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 9: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations = manager.get_recommendations()
        
        assert isinstance(recommendations, list), "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
        print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ø–æ–ª—É—á–µ–Ω–æ {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        
        print("‚úÖ FeedbackLoopManager: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå FeedbackLoopManager: {e}")
        return False


def test_system_stability_simulation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –≤ –¥–∏–Ω–∞–º–∏–∫–µ"""
    print("\nüß™ –¢–ï–°–¢ 6: System Stability Simulation")
    
    try:
        manager = create_feedback_loop_manager()
        
        # –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        initial_loss = 20.0
        current_loss = initial_loss
        current_lr = 1e-2  # –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π
        
        stability_scores = []
        actions_per_step = []
        
        print("   –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã:")
        
        for step in range(10):
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
            state = SystemState(
                timestamp=datetime.now().timestamp() + step,
                loss=current_loss,
                learning_rate=current_lr,
                gradient_norm=2.0 + np.random.normal(0, 0.5),
                attention_quality=0.3 + step * 0.05  # –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
            actions = manager.update_system_state(state)
            actions_per_step.append(len(actions))
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π (—Å–∏–º—É–ª—è—Ü–∏—è)
            for action in actions:
                if action.parameter_name == "learning_rate":
                    current_lr = action.new_value
                # –î—Ä—É–≥–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
            
            # –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å —É–ª—É—á—à–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
            if current_lr < 1e-3:  # –ï—Å–ª–∏ lr –≤ –Ω–æ—Ä–º–µ
                current_loss *= 0.9  # Loss —É–ª—É—á—à–∞–µ—Ç—Å—è
            else:
                current_loss *= 1.02  # Loss —É—Ö—É–¥—à–∞–µ—Ç—Å—è
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            diagnostics = manager.get_system_diagnostics()
            stability = diagnostics['system_stability']
            stability_scores.append(stability)
            
            if step % 3 == 0:  # –ü–µ—á–∞—Ç—å –∫–∞–∂–¥—ã–µ 3 —à–∞–≥–∞
                print(f"     –®–∞–≥ {step}: loss={current_loss:.3f}, lr={current_lr:.6f}, "
                      f"—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å={stability:.3f}, –¥–µ–π—Å—Ç–≤–∏–π={len(actions)}")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        final_stability = stability_scores[-1]
        initial_stability = stability_scores[0] if stability_scores else 0.0
        total_actions = sum(actions_per_step)
        
        print(f"\n   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–º—É–ª—è—Ü–∏–∏:")
        print(f"     –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {initial_stability:.3f}")
        print(f"     –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {final_stability:.3f}")
        print(f"     –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π: {total_actions}")
        print(f"     –°–Ω–∏–∂–µ–Ω–∏–µ loss: {initial_loss:.3f} ‚Üí {current_loss:.3f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert len(stability_scores) == 10, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 10 –∏–∑–º–µ—Ä–µ–Ω–∏–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏"
        assert total_actions >= 0, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º"
        
        # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        if total_actions > 0:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
        else:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞ –±–µ–∑ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞")
        
        print("‚úÖ System Stability Simulation: –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå System Stability Simulation: {e}")
        return False


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Feedback Loop Manager"""
    print("üîÑ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: Feedback Loop Manager")
    print("=" * 80)
    
    if not FEEDBACK_MANAGER_AVAILABLE:
        print("‚ùå Feedback Loop Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    tests = [
        test_kalman_filter,
        test_pid_controller,
        test_system_identifier,
        test_feedback_controller,
        test_feedback_loop_manager,
        test_system_stability_simulation
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_func in tests:
        try:
            if test_func():
                passed_tests += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests} ({passed_tests/total_tests*100:.1f}%)")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüöÄ Feedback Loop Manager –≥–æ—Ç–æ–≤ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("   ‚Ä¢ Kalman Filters –¥–ª—è —Ç–æ—á–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π")
        print("   ‚Ä¢ PID Controllers –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        print("   ‚Ä¢ System Identification –¥–ª—è –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ —Å–∏—Å—Ç–µ–º–µ")
        print("   ‚Ä¢ Multi-parameter –∫–æ–Ω—Ç—Ä–æ–ª—å (learning rate, loss, –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã)")
        print("   ‚Ä¢ Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
        print("   ‚Ä¢ Adaptive control strategies")
        return True
    else:
        print(f"‚ö†Ô∏è {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        return False


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1) 