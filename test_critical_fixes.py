#!/usr/bin/env python3
"""
üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ IMMEDIATE_ACTION_PLAN.md

–ê–≤—Ç–æ—Ä: AI Assistant –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Intelligent TTS Training Pipeline
"""

import os
import sys
import torch
import numpy as np
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class CriticalFixesTester:
    """–¢–µ—Å—Ç–µ—Ä –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Tacotron2-New"""
    
    def __init__(self):
        self.test_results = {}
        self.passed_tests = 0
        self.total_tests = 0
        
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        logger.info("üß™ –ù–ê–ß–ê–õ–û –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
        
        # –¢–µ—Å—Ç 1: Gradient Clipping
        self.test_gradient_clipping()
        
        # –¢–µ—Å—Ç 2: Guided Attention Loss
        self.test_guided_attention_loss()
        
        # –¢–µ—Å—Ç 3: Learning Rate
        self.test_learning_rate()
        
        # –¢–µ—Å—Ç 4: Alignment Diagnostics
        self.test_alignment_diagnostics()
        
        # –¢–µ—Å—Ç 5: Smart Tuner Integration
        self.test_smart_tuner_integration()
        
        # –¢–µ—Å—Ç 6: Model Loading
        self.test_model_loading()
        
        # –¢–µ—Å—Ç 7: Loss Function
        self.test_loss_function()
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.print_final_report()
        
    def test_gradient_clipping(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ gradient clipping"""
        logger.info("üîß –¢–µ—Å—Ç 1: Gradient Clipping")
        self.total_tests += 1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ train.py –µ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π gradient clipping
            with open('train.py', 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ gradient clipping
            if 'torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)' in content:
                logger.info("‚úÖ Gradient clipping —Å max_norm=1.0 –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
                if 'grad_norm > 10.0' in content and 'grad_norm > 100.0' in content:
                    logger.info("‚úÖ –ê–ª–µ—Ä—Ç—ã –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω—ã")
                    self.passed_tests += 1
                    self.test_results['gradient_clipping'] = 'PASS'
                else:
                    logger.error("‚ùå –ê–ª–µ—Ä—Ç—ã –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    self.test_results['gradient_clipping'] = 'FAIL'
            else:
                logger.error("‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π gradient clipping –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.test_results['gradient_clipping'] = 'FAIL'
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ gradient clipping: {e}")
            self.test_results['gradient_clipping'] = 'ERROR'
    
    def test_guided_attention_loss(self):
        """–¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ guided attention loss"""
        logger.info("üéØ –¢–µ—Å—Ç 2: Guided Attention Loss")
        self.total_tests += 1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º loss_function.py
            with open('loss_function.py', 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ guided attention loss
            if 'guided_attention_loss' in content and 'guide_loss_weight' in content:
                logger.info("‚úÖ Guided attention loss –Ω–∞–π–¥–µ–Ω –≤ loss_function.py")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º train.py –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–µ—Å–∞
                with open('train.py', 'r', encoding='utf-8') as f:
                    train_content = f.read()
                    
                if 'guide_loss_weight * loss_guide' in train_content:
                    logger.info("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–µ—Å –¥–ª—è guided attention loss –Ω–∞–π–¥–µ–Ω")
                    self.passed_tests += 1
                    self.test_results['guided_attention_loss'] = 'PASS'
                else:
                    logger.error("‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–µ—Å –¥–ª—è guided attention loss –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    self.test_results['guided_attention_loss'] = 'FAIL'
            else:
                logger.error("‚ùå Guided attention loss –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.test_results['guided_attention_loss'] = 'FAIL'
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ guided attention loss: {e}")
            self.test_results['guided_attention_loss'] = 'ERROR'
    
    def test_learning_rate(self):
        """–¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ learning rate"""
        logger.info("üìà –¢–µ—Å—Ç 3: Learning Rate")
        self.total_tests += 1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º hparams.py
            with open('hparams.py', 'r', encoding='utf-8') as f:
                content = f.read()
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ learning rate —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 1e-4
            if 'learning_rate=1e-4' in content:
                logger.info("‚úÖ Learning rate —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 1e-4")
                self.passed_tests += 1
                self.test_results['learning_rate'] = 'PASS'
            else:
                logger.error("‚ùå Learning rate –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 1e-4")
                self.test_results['learning_rate'] = 'FAIL'
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ learning rate: {e}")
            self.test_results['learning_rate'] = 'ERROR'
    
    def test_alignment_diagnostics(self):
        """–¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ alignment diagnostics"""
        logger.info("üîç –¢–µ—Å—Ç 4: Alignment Diagnostics")
        self.total_tests += 1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ alignment_diagnostics.py
            if os.path.exists('alignment_diagnostics.py'):
                logger.info("‚úÖ –§–∞–π–ª alignment_diagnostics.py –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ train.py
                with open('train.py', 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                if 'AlignmentDiagnostics' in content and 'alignment_diagnostics.analyze_alignment_matrix' in content:
                    logger.info("‚úÖ Alignment diagnostics –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ train.py")
                    self.passed_tests += 1
                    self.test_results['alignment_diagnostics'] = 'PASS'
                else:
                    logger.error("‚ùå Alignment diagnostics –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ train.py")
                    self.test_results['alignment_diagnostics'] = 'FAIL'
            else:
                logger.error("‚ùå –§–∞–π–ª alignment_diagnostics.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.test_results['alignment_diagnostics'] = 'FAIL'
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ alignment diagnostics: {e}")
            self.test_results['alignment_diagnostics'] = 'ERROR'
    
    def test_smart_tuner_integration(self):
        """–¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ Smart Tuner integration"""
        logger.info("ü§ñ –¢–µ—Å—Ç 5: Smart Tuner Integration")
        self.total_tests += 1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ smart_tuner_main.py
            if os.path.exists('smart_tuner_main.py'):
                logger.info("‚úÖ –§–∞–π–ª smart_tuner_main.py –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ integrate_critical_components
                with open('smart_tuner_main.py', 'r', encoding='utf-8') as f:
                    content = f.read()
                    
                if 'integrate_critical_components' in content:
                    logger.info("‚úÖ –§—É–Ω–∫—Ü–∏—è integrate_critical_components –Ω–∞–π–¥–µ–Ω–∞")
                    self.passed_tests += 1
                    self.test_results['smart_tuner_integration'] = 'PASS'
                else:
                    logger.error("‚ùå –§—É–Ω–∫—Ü–∏—è integrate_critical_components –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    self.test_results['smart_tuner_integration'] = 'FAIL'
            else:
                logger.error("‚ùå –§–∞–π–ª smart_tuner_main.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.test_results['smart_tuner_integration'] = 'FAIL'
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ Smart Tuner integration: {e}")
            self.test_results['smart_tuner_integration'] = 'ERROR'
    
    def test_model_loading(self):
        """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏"""
        logger.info("üèóÔ∏è –¢–µ—Å—Ç 6: Model Loading")
        self.total_tests += 1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ model.py
            if os.path.exists('model.py'):
                logger.info("‚úÖ –§–∞–π–ª model.py –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ hparams.py
                if os.path.exists('hparams.py'):
                    logger.info("‚úÖ –§–∞–π–ª hparams.py –Ω–∞–π–¥–µ–Ω")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å
                    try:
                        from hparams import create_hparams
                        from model import Tacotron2
                        
                        hparams = create_hparams()
                        logger.info("‚úÖ HParams —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞
                        if torch.cuda.is_available():
                            logger.info("‚úÖ CUDA –¥–æ—Å—Ç—É–ø–Ω–∞")
                            self.passed_tests += 1
                            self.test_results['model_loading'] = 'PASS'
                        else:
                            logger.warning("‚ö†Ô∏è CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –Ω–æ –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ CPU")
                            self.passed_tests += 1
                            self.test_results['model_loading'] = 'PASS'
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
                        self.test_results['model_loading'] = 'FAIL'
                else:
                    logger.error("‚ùå –§–∞–π–ª hparams.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    self.test_results['model_loading'] = 'FAIL'
            else:
                logger.error("‚ùå –§–∞–π–ª model.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.test_results['model_loading'] = 'FAIL'
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ model loading: {e}")
            self.test_results['model_loading'] = 'ERROR'
    
    def test_loss_function(self):
        """–¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ loss function"""
        logger.info("üìä –¢–µ—Å—Ç 7: Loss Function")
        self.total_tests += 1
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ loss_function.py
            if os.path.exists('loss_function.py'):
                logger.info("‚úÖ –§–∞–π–ª loss_function.py –Ω–∞–π–¥–µ–Ω")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å loss function
                try:
                    from hparams import create_hparams
                    from loss_function import Tacotron2Loss
                    
                    hparams = create_hparams()
                    criterion = Tacotron2Loss(hparams)
                    logger.info("‚úÖ Tacotron2Loss —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ guided attention loss
                    if hasattr(criterion, 'guided_attention_loss'):
                        logger.info("‚úÖ Guided attention loss –Ω–∞–π–¥–µ–Ω –≤ criterion")
                        self.passed_tests += 1
                        self.test_results['loss_function'] = 'PASS'
                    else:
                        logger.error("‚ùå Guided attention loss –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ criterion")
                        self.test_results['loss_function'] = 'FAIL'
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è loss function: {e}")
                    self.test_results['loss_function'] = 'FAIL'
            else:
                logger.error("‚ùå –§–∞–π–ª loss_function.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                self.test_results['loss_function'] = 'FAIL'
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ loss function: {e}")
            self.test_results['loss_function'] = 'ERROR'
    
    def print_final_report(self):
        """–ü–µ—á–∞—Ç—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        logger.info("\n" + "="*60)
        logger.info("üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
        logger.info("="*60)
        
        for test_name, result in self.test_results.items():
            status_emoji = "‚úÖ" if result == 'PASS' else "‚ùå" if result == 'FAIL' else "‚ö†Ô∏è"
            logger.info(f"{status_emoji} {test_name}: {result}")
        
        logger.info(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {self.passed_tests}/{self.total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        success_rate = (self.passed_tests / self.total_tests) * 100 if self.total_tests > 0 else 0
        logger.info(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
        
        if success_rate >= 80:
            logger.info("üéâ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ì–û–¢–û–í–´ –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
        elif success_rate >= 60:
            logger.warning("‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –¢–†–ï–ë–£–Æ–¢ –î–û–†–ê–ë–û–¢–ö–ò")
        else:
            logger.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ù–ï –ì–û–¢–û–í–´!")
        
        logger.info("="*60)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    tester = CriticalFixesTester()
    tester.run_all_tests()

if __name__ == "__main__":
    main() 