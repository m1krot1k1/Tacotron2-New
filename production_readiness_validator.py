#!/usr/bin/env python3
"""
üéØ PRODUCTION READINESS VALIDATOR
–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Tacotron2-New –∫ production deployment

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö 10 –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º –º–µ–∂–¥—É —Å–æ–±–æ–π
‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
‚úÖ Monitoring –∏ health checks
‚úÖ Security –∏ backup –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
"""

import os
import sys
import time
import json
import requests
import subprocess
import importlib
import socket
from pathlib import Path
from typing import Dict, List, Tuple, Optional, Any
from dataclasses import dataclass, asdict
from datetime import datetime
import logging

@dataclass
class ComponentStatus:
    """–°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å–∏—Å—Ç–µ–º—ã"""
    name: str
    available: bool = False
    version: Optional[str] = None
    size_mb: Optional[float] = None
    last_modified: Optional[str] = None
    integration_status: str = "unknown"
    performance_score: Optional[float] = None
    notes: List[str] = None

    def __post_init__(self):
        if self.notes is None:
            self.notes = []

@dataclass 
class ValidationResults:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    total_components: int = 0
    available_components: int = 0
    readiness_percentage: float = 0.0
    critical_issues: List[str] = None
    warnings: List[str] = None
    recommendations: List[str] = None
    timestamp: str = None

    def __post_init__(self):
        if self.critical_issues is None:
            self.critical_issues = []
        if self.warnings is None:
            self.warnings = []
        if self.recommendations is None:
            self.recommendations = []
        if self.timestamp is None:
            self.timestamp = datetime.now().isoformat()

class ProductionReadinessValidator:
    """üéØ –ì–ª–∞–≤–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ production"""

    def __init__(self):
        self.logger = self._setup_logging()
        self.project_root = Path(".")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.key_components = {
            "ultimate_tacotron_trainer": {
                "file": "ultimate_tacotron_trainer.py",
                "class": "UltimateEnhancedTacotronTrainer",
                "critical": True,
                "min_size_mb": 0.05
            },
            "context_aware_training_manager": {
                "file": "context_aware_training_manager.py", 
                "class": "ContextAwareTrainingManager",
                "critical": True,
                "min_size_mb": 0.02
            },
            "adaptive_loss_system": {
                "file": "adaptive_loss_system.py",
                "class": "DynamicTverskyLoss", 
                "critical": True,
                "min_size_mb": 0.01
            },
            "advanced_attention_enhancement": {
                "file": "advanced_attention_enhancement_system.py",
                "class": "MultiHeadLocationAwareAttention",
                "critical": True,
                "min_size_mb": 0.01
            },
            "training_stabilization": {
                "file": "training_stabilization_system.py",
                "class": "TrainingStabilizationSystem",
                "critical": True,
                "min_size_mb": 0.01
            },
            "unified_guided_attention": {
                "file": "unified_guided_attention.py",
                "class": "UnifiedGuidedAttentionLoss",
                "critical": True,
                "min_size_mb": 0.01
            },
            "production_dashboard": {
                "file": "production_realtime_dashboard.py",
                "class": "ProductionRealtimeDashboard",
                "critical": True,
                "min_size_mb": 8
            },
            "performance_optimization": {
                "file": "unified_performance_optimization_system.py",
                "class": "UnifiedPerformanceOptimizationSystem",
                "critical": True,
                "min_size_mb": 8
            },
            "production_monitoring": {
                "file": "simple_monitoring.py",
                "class": "SimpleProductionMonitor",
                "critical": False,
                "min_size_mb": 3
            },
            "deployment_system": {
                "file": "production_deployment_system.py",
                "class": "ProductionDeploymentSystem",
                "critical": True,
                "min_size_mb": 0.01
            }
        }

        self.validation_results = ValidationResults()
        
    def _setup_logging(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - üéØ VALIDATOR - %(levelname)s - %(message)s',
            datefmt='%H:%M:%S'
        )
        return logging.getLogger(__name__)

    def validate_production_readiness(self) -> ValidationResults:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ production"""
        self.logger.info("üéØ –ù–ê–ß–ê–õ–û PRODUCTION READINESS VALIDATION")
        self.logger.info("=" * 80)
        
        # 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        component_results = self._validate_components()
        
        # 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ 
        integration_results = self._validate_integration()
        
        # 3. –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_results = self._validate_configuration()
        
        # 4. –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        docs_results = self._validate_documentation()
        
        # 5. –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitoring_results = self._validate_monitoring()
        
        # 6. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        performance_results = self._validate_performance()
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self._compile_final_results(
            component_results, integration_results, config_results,
            docs_results, monitoring_results, performance_results
        )
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        self._generate_final_report()
        
        return self.validation_results

    def _validate_components(self) -> Dict[str, ComponentStatus]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.logger.info("üì¶ –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        component_statuses = {}
        available_count = 0
        
        for component_name, component_info in self.key_components.items():
            status = ComponentStatus(name=component_name)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–∞
            file_path = self.project_root / component_info["file"]
            
            if file_path.exists():
                status.available = True
                available_count += 1
                
                # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                status.size_mb = file_path.stat().st_size / (1024 * 1024)
                
                # –î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                status.last_modified = datetime.fromtimestamp(
                    file_path.stat().st_mtime
                ).strftime('%Y-%m-%d %H:%M')
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
                if status.size_mb < component_info["min_size_mb"]:
                    status.notes.append(f"‚ö†Ô∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –º–∞–ª: {status.size_mb:.1f}MB")
                    if component_info["critical"]:
                        self.validation_results.warnings.append(
                            f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} –∏–º–µ–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª—ã–π —Ä–∞–∑–º–µ—Ä"
                        )
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
                try:
                    self._test_component_import(component_info["file"], component_info["class"])
                    status.integration_status = "importable"
                    status.notes.append("‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–µ–Ω")
                except Exception as e:
                    status.integration_status = "import_error"
                    status.notes.append(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)[:50]}")
                    if component_info["critical"]:
                        self.validation_results.critical_issues.append(
                            f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è"
                        )
                
                self.logger.info(f"  ‚úÖ {component_name}: {status.size_mb:.1f}MB ({status.integration_status})")
                
            else:
                status.available = False
                status.integration_status = "missing"
                status.notes.append("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
                if component_info["critical"]:
                    self.validation_results.critical_issues.append(
                        f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç {component_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
                    )
                
                self.logger.error(f"  ‚ùå {component_name}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            component_statuses[component_name] = status
        
        self.validation_results.total_components = len(self.key_components)
        self.validation_results.available_components = available_count
        
        self.logger.info(f"üìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {available_count}/{len(self.key_components)} –¥–æ—Å—Ç—É–ø–Ω—ã")
        
        return component_statuses

    def _test_component_import(self, file_path: str, class_name: str):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        module_name = file_path.replace('.py', '').replace('/', '.')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
        if str(self.project_root) not in sys.path:
            sys.path.insert(0, str(self.project_root))
        
        try:
            module = importlib.import_module(module_name)
            if hasattr(module, class_name):
                return True
            else:
                raise ImportError(f"–ö–ª–∞—Å—Å {class_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–æ–¥—É–ª–µ")
        except Exception as e:
            raise ImportError(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è {module_name}: {e}")

    def _validate_integration(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        self.logger.info("üîó –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        
        integration_issues = 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è AutoFixManager
        try:
            from ultimate_tacotron_trainer import UltimateEnhancedTacotronTrainer
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ AutoFixManager –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            trainer_file = self.project_root / "ultimate_tacotron_trainer.py"
            if trainer_file.exists():
                content = trainer_file.read_text()
                if "AutoFixManager" in content:
                    self.validation_results.warnings.append(
                        "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏—è AutoFixManager –≤ –∫–æ–¥–µ - —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –æ–Ω –∑–∞–º–µ–Ω–µ–Ω"
                    )
                    integration_issues += 1
                else:
                    self.logger.info("  ‚úÖ AutoFixManager –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ Context-Aware Manager")
                    
        except Exception as e:
            self.validation_results.critical_issues.append(
                f"–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é Ultimate Trainer: {e}"
            )
            integration_issues += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ Context-Aware Manager –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        try:
            from context_aware_training_manager import ContextAwareTrainingManager
            self.logger.info("  ‚úÖ Context-Aware Training Manager –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω")
        except Exception:
            self.validation_results.critical_issues.append(
                "Context-Aware Training Manager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
            )
            integration_issues += 1
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            from unified_logging_system import UnifiedLoggingSystem
            self.logger.info("  ‚úÖ Unified Logging System –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω") 
        except Exception:
            self.validation_results.warnings.append(
                "Unified Logging System –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"
            )
        
        return integration_issues == 0

    def _validate_configuration(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.logger.info("‚öôÔ∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        config_files = [
            "hparams.py",
            "requirements.txt", 
            "install.sh"
        ]
        
        missing_configs = []
        for config_file in config_files:
            if not (self.project_root / config_file).exists():
                missing_configs.append(config_file)
        
        if missing_configs:
            self.validation_results.warnings.append(
                f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {', '.join(missing_configs)}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        prod_configs = [
            "production_config.yaml",
            "PRODUCTION_DEPLOYMENT_GUIDE.md"
        ]
        
        for prod_config in prod_configs:
            if (self.project_root / prod_config).exists():
                self.logger.info(f"  ‚úÖ {prod_config}")
            else:
                self.validation_results.recommendations.append(
                    f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å {prod_config}"
                )
        
        return len(missing_configs) == 0

    def _validate_documentation(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        self.logger.info("üìö –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
        
        doc_files = [
            "PRODUCTION_DEPLOYMENT_GUIDE.md",
            "README.md"
        ]
        
        docs_available = 0
        for doc_file in doc_files:
            if (self.project_root / doc_file).exists():
                docs_available += 1
                size_kb = (self.project_root / doc_file).stat().st_size / 1024
                self.logger.info(f"  ‚úÖ {doc_file}: {size_kb:.1f}KB")
            else:
                self.validation_results.recommendations.append(
                    f"–°–æ–∑–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: {doc_file}"
                )
        
        return docs_available >= 1

    def _validate_monitoring(self) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.logger.info("üìä –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitoring_ports = [5000, 5001, 5002, 5004]  # MLflow, Dashboard, Optuna, TensorBoard
        
        available_ports = []
        for port in monitoring_ports:
            if self._check_port_available(port):
                available_ports.append(port)
        
        if available_ports:
            self.logger.info(f"  ‚úÖ –ü–æ—Ä—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã: {available_ports}")
        else:
            self.validation_results.warnings.append(
                "–í—Å–µ –ø–æ—Ä—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–Ω—è—Ç—ã - –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫–∞"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ dashboard —Ñ–∞–π–ª–æ–≤
        dashboard_files = [
            "production_realtime_dashboard.py",
            "monitoring_dashboard.py"
        ]
        
        dashboard_available = any(
            (self.project_root / f).exists() for f in dashboard_files
        )
        
        if dashboard_available:
            self.logger.info("  ‚úÖ Dashboard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
        else:
            self.validation_results.critical_issues.append(
                "Dashboard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
            )
        
        return dashboard_available

    def _validate_performance(self) -> Dict[str, float]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        self.logger.info("‚ö° –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        performance_metrics = {}
        
        # –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        start_time = time.time()
        try:
            from ultimate_tacotron_trainer import UltimateEnhancedTacotronTrainer
            import_time = time.time() - start_time
            performance_metrics['import_time'] = import_time
            
            if import_time < 2.0:
                self.logger.info(f"  ‚úÖ –í—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞ Ultimate Trainer: {import_time:.3f}s")
            else:
                self.validation_results.warnings.append(
                    f"–ú–µ–¥–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç Ultimate Trainer: {import_time:.3f}s"
                )
        except Exception as e:
            self.validation_results.critical_issues.append(
                f"–ù–µ —É–¥–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å Ultimate Trainer: {e}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ checkpoint —Ñ–∞–π–ª–æ–≤
        checkpoint_files = list(self.project_root.glob("*.pt")) + list(self.project_root.glob("*.pth"))
        total_checkpoint_size = sum(f.stat().st_size for f in checkpoint_files) / (1024**3)  # GB
        
        performance_metrics['checkpoint_size_gb'] = total_checkpoint_size
        
        if total_checkpoint_size < 2.0:
            self.logger.info(f"  ‚úÖ –†–∞–∑–º–µ—Ä checkpoint —Ñ–∞–π–ª–æ–≤: {total_checkpoint_size:.2f}GB")
        else:
            self.validation_results.recommendations.append(
                f"–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é checkpoint —Ñ–∞–π–ª–æ–≤: {total_checkpoint_size:.2f}GB"
            )
        
        return performance_metrics

    def _check_port_available(self, port: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        try:
            sock.bind(('localhost', port))
            sock.close()
            return True
        except OSError:
            return False

    def _compile_final_results(self, *validation_results):
        """–ö–æ–º–ø–∏–ª—è—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        base_readiness = (self.validation_results.available_components / 
                         self.validation_results.total_components) * 100
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
        critical_penalty = len(self.validation_results.critical_issues) * 10
        warning_penalty = len(self.validation_results.warnings) * 3
        
        final_readiness = max(0, base_readiness - critical_penalty - warning_penalty)
        
        self.validation_results.readiness_percentage = final_readiness

    def _generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.logger.info("\n" + "=" * 80)
        self.logger.info("üéØ PRODUCTION READINESS VALIDATION RESULTS")
        self.logger.info("=" * 80)
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        readiness = self.validation_results.readiness_percentage
        if readiness >= 95:
            status_emoji = "üéâ"
            status_text = "–û–¢–õ–ò–ß–ù–û"
            status_color = "GREEN"
        elif readiness >= 85:
            status_emoji = "‚úÖ"
            status_text = "–•–û–†–û–®–û"
            status_color = "GREEN"
        elif readiness >= 70:
            status_emoji = "‚ö†Ô∏è"
            status_text = "–¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø"
            status_color = "YELLOW"
        else:
            status_emoji = "‚ùå"
            status_text = "–ù–ï –ì–û–¢–û–í"
            status_color = "RED"
        
        self.logger.info(f"{status_emoji} –û–±—â–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å: {readiness:.1f}% - {status_text}")
        self.logger.info(f"üì¶ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: {self.validation_results.available_components}/{self.validation_results.total_components}")
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if self.validation_results.critical_issues:
            self.logger.info(f"\nüö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã ({len(self.validation_results.critical_issues)}):")
            for issue in self.validation_results.critical_issues:
                self.logger.info(f"  ‚Ä¢ {issue}")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if self.validation_results.warnings:
            self.logger.info(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(self.validation_results.warnings)}):")
            for warning in self.validation_results.warnings:
                self.logger.info(f"  ‚Ä¢ {warning}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.validation_results.recommendations:
            self.logger.info(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ({len(self.validation_results.recommendations)}):")
            for rec in self.validation_results.recommendations:
                self.logger.info(f"  ‚Ä¢ {rec}")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        self._save_validation_report()
        
        self.logger.info("\n" + "=" * 80)
        
        if readiness >= 95:
            self.logger.info("üéâ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö PRODUCTION DEPLOYMENT!")
        elif readiness >= 85:
            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –≥–æ—Ç–æ–≤–∞, –Ω–æ –µ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è")
        else:
            self.logger.info("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º")

    def _save_validation_report(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
        report_path = self.project_root / "production_readiness_report.json"
        
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(asdict(self.validation_results), f, indent=2, ensure_ascii=False)
        
        self.logger.info(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞"""
    validator = ProductionReadinessValidator()
    results = validator.validate_production_readiness()
    
    # Return code –¥–ª—è CI/CD
    if results.readiness_percentage >= 95:
        sys.exit(0)  # –ü–æ–ª–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    elif results.readiness_percentage >= 85:
        sys.exit(1)  # –ì–æ—Ç–æ–≤ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
    else:
        sys.exit(2)  # –ù–µ –≥–æ—Ç–æ–≤

if __name__ == "__main__":
    main() 