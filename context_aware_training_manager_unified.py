#!/usr/bin/env python3
"""
üîß Context-Aware Training Manager —Å Unified Logging Integration

–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ ContextAwareTrainingManager –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π unified logging system –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ª–æ–≥–≥–µ—Ä–æ–≤.

–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã:
‚ùå –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏–µ –ª–æ–≥–≥–µ—Ä—ã ‚Üí ‚úÖ Unified ComponentLogger
‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ ‚Üí ‚úÖ Priority-based logging
‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã MLflow/TensorBoard ‚Üí ‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
"""

import logging
import numpy as np
from typing import Dict, Any, Optional, List, Tuple
from dataclasses import dataclass
import time

# Unified logging imports
try:
    from logging_integration_patches import get_unified_component_logger
    from unified_logging_system import MetricPriority, LogLevel
    UNIFIED_LOGGING_AVAILABLE = True
except ImportError:
    UNIFIED_LOGGING_AVAILABLE = False
    print("‚ö†Ô∏è Unified logging –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback")

# –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
try:
    from context_aware_training_manager import (
        ContextAnalyzer, EnhancedLossIntegrator, IntelligentParameterManager,
        TrainingPhase, AdaptationStrategy
    )
    ORIGINAL_COMPONENTS_AVAILABLE = True
except ImportError:
    ORIGINAL_COMPONENTS_AVAILABLE = False
    print("‚ö†Ô∏è –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")


class UnifiedContextAwareTrainingManager:
    """
    üß† Context-Aware Training Manager —Å Unified Logging
    
    –ó–∞–º–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ ContextAwareTrainingManager —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
    unified logging system –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    """

    def __init__(self, config: dict):
        self.config = config
        
        # Unified Logging Setup
        if UNIFIED_LOGGING_AVAILABLE:
            self.logger = get_unified_component_logger("context_aware_training_manager")
            if self.logger is None:
                # Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—é
                self.logger = self._setup_fallback_logger()
                self._unified_available = False
            else:
                self._unified_available = True
                self.logger.info("üî• Context-Aware Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å Unified Logging")
        else:
            self.logger = self._setup_fallback_logger()
            self._unified_available = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if ORIGINAL_COMPONENTS_AVAILABLE:
            self._initialize_original_components()
        else:
            self._initialize_fallback_components()
        
        # Unified logging –º–µ—Ç—Ä–∏–∫–∏
        self.step_counter = 0
        self.session_start_time = time.time()
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è unified system
        self.metrics_history = []
        
        self.logger.info("‚úÖ Unified Context-Aware Training Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    def _setup_fallback_logger(self) -> logging.Logger:
        """Fallback –ª–æ–≥–≥–µ—Ä –µ—Å–ª–∏ unified –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
        logger = logging.getLogger("ContextAwareTrainer_Fallback")
        
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter('%(levelname)s: %(message)s')
            handler.setFormatter(formatter)
            logger.addHandler(handler)
            logger.setLevel(logging.INFO)
        
        return logger

    def _initialize_original_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å unified logging"""
        try:
            self.context_analyzer = ContextAnalyzer(
                history_size=self.config.get('history_size', 100)
            )
            self.loss_controller = EnhancedLossIntegrator(
                initial_guided_weight=self.config.get('initial_guided_weight', 4.5)
            )
            self.param_manager = IntelligentParameterManager(
                initial_lr=self.config.get('initial_lr', 1e-3)
            )
            
            # –ü–∞—Ç—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
            self._patch_component_logging()
            
            self.logger.info("‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å unified logging")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            self._initialize_fallback_components()

    def _initialize_fallback_components(self):
        """Fallback –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –µ—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"""
        self.logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è fallback –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏
        self.context_analyzer = None
        self.loss_controller = None
        self.param_manager = None

    def _patch_component_logging(self):
        """–ü–∞—Ç—á–∏–Ω–≥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ sub-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö"""
        if not self._unified_available:
            return
        
        try:
            # –ü–∞—Ç—á–∏–º ContextAnalyzer
            if hasattr(self.context_analyzer, 'logger'):
                original_log = self.context_analyzer.logger
                
                class UnifiedLoggerProxy:
                    def __init__(self, unified_logger, component_name):
                        self.unified_logger = unified_logger
                        self.component_name = component_name
                    
                    def info(self, msg, *args):
                        self.unified_logger.info(f"[{self.component_name}] {msg}")
                    
                    def warning(self, msg, *args):
                        self.unified_logger.warning(f"[{self.component_name}] {msg}")
                    
                    def error(self, msg, *args):
                        self.unified_logger.error(f"[{self.component_name}] {msg}")
                    
                    def debug(self, msg, *args):
                        self.unified_logger.debug(f"[{self.component_name}] {msg}")
                
                self.context_analyzer.logger = UnifiedLoggerProxy(self.logger, "ContextAnalyzer")
                
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if hasattr(self.loss_controller, 'logger'):
                self.loss_controller.logger = UnifiedLoggerProxy(self.logger, "LossController")
                
            if hasattr(self.param_manager, 'logger'):
                self.param_manager.logger = UnifiedLoggerProxy(self.logger, "ParamManager")
                
            self.logger.info("üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ sub-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ")
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ç—á–∏–Ω–≥–∞ sub-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")

    def analyze_training_step(self, metrics: Dict[str, Any], step: int) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ —à–∞–≥–∞ –æ–±—É—á–µ–Ω–∏—è —Å unified logging
        
        Args:
            metrics: –ú–µ—Ç—Ä–∏–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
            step: –ù–æ–º–µ—Ä —à–∞–≥–∞
            
        Returns:
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
        """
        start_time = time.time()
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º step counter
            self.step_counter = step
            
            # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if self.context_analyzer:
                context_info = self.context_analyzer.analyze_step(metrics, step)
            else:
                context_info = self._fallback_context_analysis(metrics, step)
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ loss
            if self.loss_controller:
                loss_adaptations = self.loss_controller.update_weights(metrics, context_info)
            else:
                loss_adaptations = self._fallback_loss_control(metrics)
            
            # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            if self.param_manager:
                param_adaptations = self.param_manager.adapt_parameters(metrics, context_info)
            else:
                param_adaptations = self._fallback_param_management(metrics)
            
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            recommendations = {
                **context_info,
                **loss_adaptations,
                **param_adaptations,
                'processing_time': time.time() - start_time,
                'step': step,
                'timestamp': time.time()
            }
            
            # Unified logging –º–µ—Ç—Ä–∏–∫
            self._log_unified_metrics(recommendations, step)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.metrics_history.append(recommendations)
            
            return recommendations
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —à–∞–≥–∞ {step}: {e}")
            return self._create_safe_fallback_response(step)

    def _log_unified_metrics(self, recommendations: Dict[str, Any], step: int):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ unified system"""
        if not self._unified_available:
            return
        
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            essential_metrics = {}
            if 'loss' in recommendations:
                essential_metrics['total_loss'] = recommendations['loss']
            if 'attention_diagonality' in recommendations:
                essential_metrics['attention_diagonality'] = recommendations['attention_diagonality']
            if 'guided_attention_weight' in recommendations:
                essential_metrics['guided_attention_weight'] = recommendations['guided_attention_weight']
            
            if essential_metrics:
                self.logger.log_metrics(
                    essential_metrics,
                    step=step
                )
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å –º–µ–Ω—å—à–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
            additional_metrics = {}
            for key, value in recommendations.items():
                if key not in essential_metrics and isinstance(value, (int, float)):
                    additional_metrics[key] = value
            
            if additional_metrics:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –¥—Ä—É–≥–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
                if hasattr(self.logger, 'unified_system'):
                    self.logger.unified_system.log_metrics(
                        additional_metrics,
                        component="context_aware_manager",
                        step=step,
                        priority=MetricPriority.USEFUL
                    )
            
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ unified logging –º–µ—Ç—Ä–∏–∫: {e}")

    def _fallback_context_analysis(self, metrics: Dict[str, Any], step: int) -> Dict[str, Any]:
        """Fallback –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        return {
            'training_phase': 'unknown',
            'adaptation_strategy': 'conservative',
            'context_stability': 0.5,
            'requires_intervention': False
        }

    def _fallback_loss_control(self, metrics: Dict[str, Any]) -> Dict[str, Any]:
        """Fallback —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ loss"""
        current_loss = metrics.get('loss', 20.0)
        
        return {
            'guided_attention_weight': max(1.0, min(8.0, 4.5)),
            'loss_scaling_factor': 1.0,
            'loss_trend': 'stable'
        }

    def _fallback_param_management(self, metrics: Dict[str, Any]) -> Dict[str, Any]:
        """Fallback —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
        return {
            'learning_rate_multiplier': 1.0,
            'gradient_clip_threshold': 1.0,
            'parameter_adaptation': 'none'
        }

    def _create_safe_fallback_response(self, step: int) -> Dict[str, Any]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π fallback –æ—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        return {
            'step': step,
            'training_phase': 'error_recovery',
            'adaptation_strategy': 'conservative',
            'guided_attention_weight': 4.5,
            'learning_rate_multiplier': 1.0,
            'gradient_clip_threshold': 1.0,
            'requires_intervention': False,
            'error_mode': True,
            'recommendations': ['–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏']
        }

    def get_session_summary(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ —Å–µ—Å—Å–∏–∏"""
        current_time = time.time()
        session_duration = current_time - self.session_start_time
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ—Ç—Ä–∏–∫
        total_steps = len(self.metrics_history)
        
        if total_steps > 0:
            recent_metrics = self.metrics_history[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —à–∞–≥–æ–≤
            
            avg_loss = np.mean([m.get('loss', 0) for m in recent_metrics if 'loss' in m])
            avg_attention = np.mean([m.get('attention_diagonality', 0) for m in recent_metrics if 'attention_diagonality' in m])
        else:
            avg_loss = 0
            avg_attention = 0
        
        summary = {
            'session_duration_minutes': session_duration / 60,
            'total_steps_processed': total_steps,
            'unified_logging_enabled': self._unified_available,
            'original_components_available': ORIGINAL_COMPONENTS_AVAILABLE,
            'average_recent_loss': float(avg_loss),
            'average_recent_attention': float(avg_attention),
            'last_step': self.step_counter,
            'components_status': {
                'context_analyzer': self.context_analyzer is not None,
                'loss_controller': self.loss_controller is not None,
                'param_manager': self.param_manager is not None
            }
        }
        
        return summary

    def finalize_session(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å unified logging"""
        try:
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
            summary = self.get_session_summary()
            
            if self._unified_available:
                self.logger.info(f"üìä –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ Context-Aware Manager —Å–µ—Å—Å–∏–∏")
                self.logger.log_metrics(summary, step=self.step_counter)
            
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            self.metrics_history.clear()
            
            self.logger.info("üèÅ Context-Aware Training Manager —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")


# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
ContextAwareTrainingManager = UnifiedContextAwareTrainingManager


# Convenience —Ñ—É–Ω–∫—Ü–∏–∏
def create_unified_context_manager(config: Dict[str, Any]) -> UnifiedContextAwareTrainingManager:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ unified context manager —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π
    
    Args:
        config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è manager'–∞
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π UnifiedContextAwareTrainingManager
    """
    return UnifiedContextAwareTrainingManager(config)


def patch_existing_context_manager(existing_manager):
    """
    –ü–∞—Ç—á–∏–Ω–≥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ContextAwareTrainingManager –¥–ª—è unified logging
    
    Args:
        existing_manager: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π manager –¥–ª—è –ø–∞—Ç—á–∏–Ω–≥–∞
    """
    if not UNIFIED_LOGGING_AVAILABLE:
        print("‚ö†Ô∏è Unified logging –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–∞—Ç—á–∏–Ω–≥–∞")
        return existing_manager
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º unified logger
        unified_logger = get_unified_component_logger("context_aware_training_manager")
        if unified_logger is None:
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å unified logger")
            return existing_manager
        
        # –ó–∞–º–µ–Ω—è–µ–º –ª–æ–≥–≥–µ—Ä
        original_logger = existing_manager.logger
        existing_manager.logger = unified_logger
        
        # –î–æ–±–∞–≤–ª—è–µ–º unified –º–µ—Ç–æ–¥—ã
        existing_manager._unified_available = True
        existing_manager._log_unified_metrics = UnifiedContextAwareTrainingManager._log_unified_metrics.__get__(existing_manager)
        
        unified_logger.info("üîß –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π Context Manager patched –¥–ª—è unified logging")
        
        return existing_manager
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ç—á–∏–Ω–≥–∞ existing manager: {e}")
        return existing_manager


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è unified context manager
    print("üß† –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Unified Context-Aware Training Manager")
    
    # –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config = {
        'history_size': 100,
        'initial_guided_weight': 4.5,
        'initial_lr': 1e-3
    }
    
    # –°–æ–∑–¥–∞–Ω–∏–µ manager'–∞
    manager = create_unified_context_manager(config)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    test_metrics = {
        'loss': 15.5,
        'mel_loss': 12.0,
        'gate_loss': 0.8,
        'attention_diagonality': 0.045,
        'guided_attention_weight': 8.0,
        'learning_rate': 1e-4,
        'gradient_norm': 2.3
    }
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∞–≥–æ–≤
    for step in range(1, 6):
        # –í–∞—Ä—å–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        varied_metrics = test_metrics.copy()
        varied_metrics['loss'] *= (1.0 - step * 0.05)  # –£–ª—É—á—à–µ–Ω–∏–µ loss
        varied_metrics['attention_diagonality'] *= (1.0 + step * 0.1)  # –£–ª—É—á—à–µ–Ω–∏–µ attention
        
        recommendations = manager.analyze_training_step(varied_metrics, step)
        print(f"Step {step}: {recommendations.get('adaptation_strategy', 'unknown')}")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
    summary = manager.get_session_summary()
    print(f"üìä –°–≤–æ–¥–∫–∞ —Å–µ—Å—Å–∏–∏: {summary}")
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    manager.finalize_session()
    print("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞") 