#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ –¢–ï–°–¢: Production Real-time Dashboard
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ dashboard –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import os
import sys
import time
import tempfile
import unittest
from unittest.mock import Mock, patch
import sqlite3
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º current directory –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.getcwd())

try:
    from production_realtime_dashboard import (
        MetricsDatabase,
        RealtimeMetricsCollector,
        AlertManager,
        DashboardGraphGenerator,
        ProductionRealtimeDashboard,
        create_dashboard_template
    )
    DASHBOARD_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Dashboard –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    DASHBOARD_AVAILABLE = False


def test_metrics_database():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MetricsDatabase"""
    print("\nüß™ –¢–ï–°–¢ 1: MetricsDatabase")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
            db_path = f.name
        
        try:
            database = MetricsDatabase(db_path)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
            with sqlite3.connect(db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
                tables = [row[0] for row in cursor.fetchall()]
                
                required_tables = ['system_metrics', 'training_metrics', 'alerts', 'optimizations']
                for table in required_tables:
                    assert table in tables, f"–¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            test_system_metrics = {
                'cpu_usage': 75.5,
                'memory_usage': 60.2,
                'gpu_usage': 80.0,
                'gpu_memory_usage': 45.3,
                'disk_usage': 30.1
            }
            
            database.insert_system_metrics(test_system_metrics)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç–∞–≤–∫–∏
            recent_metrics = database.get_recent_metrics('system_metrics', 60)
            assert len(recent_metrics) == 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"
            assert recent_metrics[0]['cpu_usage'] == 75.5, "CPU usage –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ –º–µ—Ç—Ä–∏–∫ –æ–±—É—á–µ–Ω–∏—è
            test_training_metrics = {
                'loss': 3.45,
                'learning_rate': 1e-3,
                'gradient_norm': 2.1,
                'attention_quality': 0.85,
                'epoch': 5,
                'step': 1000,
                'phase': 'training'
            }
            
            database.insert_training_metrics(test_training_metrics)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ –æ–±—É—á–µ–Ω–∏—è
            training_metrics = database.get_recent_metrics('training_metrics', 60)
            assert len(training_metrics) == 1, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–∞ –∑–∞–ø–∏—Å—å –æ–±—É—á–µ–Ω–∏—è"
            assert training_metrics[0]['loss'] == 3.45, "Loss –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤
            database.insert_alert('warning', 'system', '–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç')
            
            alerts = database.get_recent_metrics('alerts', 60)
            assert len(alerts) == 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–¥–∏–Ω –∞–ª–µ—Ä—Ç"
            assert alerts[0]['message'] == '–¢–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç', "–°–æ–æ–±—â–µ–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
            
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {len(recent_metrics)}")
            print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫ –æ–±—É—á–µ–Ω–∏—è: {len(training_metrics)}")
            print(f"‚úÖ –ê–ª–µ—Ä—Ç–æ–≤: {len(alerts)}")
            
            return True
            
        finally:
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if os.path.exists(db_path):
                os.unlink(db_path)
        
    except Exception as e:
        print(f"‚ùå MetricsDatabase: {e}")
        return False


def test_realtime_metrics_collector():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RealtimeMetricsCollector"""
    print("\nüß™ –¢–ï–°–¢ 2: RealtimeMetricsCollector")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
            db_path = f.name
        
        try:
            database = MetricsDatabase(db_path)
            collector = RealtimeMetricsCollector(database)
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±–æ—Ä–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            metrics = collector.collect_system_metrics()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ—Ç—Ä–∏–∫
            required_keys = ['cpu_usage', 'memory_usage', 'disk_usage', 'gpu_usage', 'gpu_memory_usage']
            for key in required_keys:
                assert key in metrics, f"–ö–ª—é—á {key} –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö"
                assert isinstance(metrics[key], (int, float)), f"{key} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
                assert 0 <= metrics[key] <= 100, f"{key} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100"
            
            print(f"‚úÖ CPU Usage: {metrics['cpu_usage']:.1f}%")
            print(f"‚úÖ Memory Usage: {metrics['memory_usage']:.1f}%")
            print(f"‚úÖ Disk Usage: {metrics['disk_usage']:.1f}%")
            print(f"‚úÖ GPU Usage: {metrics['gpu_usage']:.1f}%")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            collector.metrics_cache['test'] = {'value': 123}
            cached = collector.get_cached_metrics()
            assert 'test' in cached, "–ö—ç—à –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"
            assert cached['test']['value'] == 123, "–ó–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à–µ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å"
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–±–æ—Ä–∞
            collector.start_collection(interval=0.1)
            assert collector.running == True, "–°–±–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω"
            
            time.sleep(0.2)  # –î–æ–∂–¥–∞—Ç—å—Å—è –æ–¥–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            
            collector.stop_collection()
            assert collector.running == False, "–°–±–æ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            
            print("‚úÖ Real-time —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        finally:
            if os.path.exists(db_path):
                os.unlink(db_path)
        
    except Exception as e:
        print(f"‚ùå RealtimeMetricsCollector: {e}")
        return False


def test_alert_manager():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AlertManager"""
    print("\nüß™ –¢–ï–°–¢ 3: AlertManager")
    
    try:
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
            db_path = f.name
        
        try:
            database = MetricsDatabase(db_path)
            alert_manager = AlertManager(database)
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤
            critical_system_metrics = {
                'cpu_usage': 95.0,   # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                'memory_usage': 92.0,  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                'gpu_memory_usage': 97.0  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            }
            
            system_alerts = alert_manager.check_system_alerts(critical_system_metrics)
            
            # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∞–ª–µ—Ä—Ç—ã
            assert len(system_alerts) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã"
            
            critical_alerts = [a for a in system_alerts if a['level'] == 'critical']
            warning_alerts = [a for a in system_alerts if a['level'] == 'warning']
            
            print(f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤: {len(critical_alerts)}")
            print(f"‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(warning_alerts)}")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è
            problematic_training_metrics = {
                'gradient_norm': 15.0,  # –í—ã—Å–æ–∫–∞—è –Ω–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
                'loss': 60.0,           # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–∞—á–æ–∫ loss
                'attention_quality': 0.05  # –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ attention
            }
            
            training_alerts = alert_manager.check_training_alerts(problematic_training_metrics)
            assert len(training_alerts) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –∞–ª–µ—Ä—Ç—ã –æ–±—É—á–µ–Ω–∏—è"
            
            print(f"‚úÖ –ê–ª–µ—Ä—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è: {len(training_alerts)}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
            recent_alerts = alert_manager.get_recent_alerts(10)
            assert len(recent_alerts) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –∞–ª–µ—Ä—Ç—ã"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–ª–µ—Ä—Ç–æ–≤
            for alert in recent_alerts:
                assert 'level' in alert, "–ê–ª–µ—Ä—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å level"
                assert 'component' in alert, "–ê–ª–µ—Ä—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å component"
                assert 'message' in alert, "–ê–ª–µ—Ä—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å message"
                assert alert['level'] in ['warning', 'critical'], "–£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å warning –∏–ª–∏ critical"
            
            print("‚úÖ Alert Manager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        finally:
            if os.path.exists(db_path):
                os.unlink(db_path)
        
    except Exception as e:
        print(f"‚ùå AlertManager: {e}")
        return False


def test_dashboard_graph_generator():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DashboardGraphGenerator"""
    print("\nüß™ –¢–ï–°–¢ 4: DashboardGraphGenerator")
    
    try:
        with tempfile.NamedTemporaryFile(suffix='.db', delete=False) as f:
            db_path = f.name
        
        try:
            database = MetricsDatabase(db_path)
            generator = DashboardGraphGenerator(database)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            for i in range(10):
                test_metrics = {
                    'cpu_usage': 50.0 + i * 2,
                    'memory_usage': 40.0 + i * 1.5,
                    'gpu_usage': 60.0 + i * 1.8,
                    'gpu_memory_usage': 30.0 + i * 2.2,
                    'disk_usage': 25.0 + i * 0.5
                }
                database.insert_system_metrics(test_metrics)
                
                training_metrics = {
                    'loss': 10.0 - i * 0.8,
                    'learning_rate': 1e-3 - i * 1e-5,
                    'gradient_norm': 2.0 + i * 0.1,
                    'attention_quality': 0.5 + i * 0.04,
                    'epoch': i,
                    'step': i * 100,
                    'phase': 'training'
                }
                database.insert_training_metrics(training_metrics)
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
            system_plot = generator.create_system_metrics_plot(30)
            assert system_plot != "{}", "–ì—Ä–∞—Ñ–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            assert "CPU Usage" in system_plot, "–ì—Ä–∞—Ñ–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å CPU Usage"
            assert "Memory Usage" in system_plot, "–ì—Ä–∞—Ñ–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å Memory Usage"
            
            print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
            training_plot = generator.create_training_progress_plot(60)
            assert training_plot != "{}", "–ì—Ä–∞—Ñ–∏–∫ –æ–±—É—á–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            assert "Loss" in training_plot, "–ì—Ä–∞—Ñ–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å Loss"
            assert "Learning Rate" in training_plot, "–ì—Ä–∞—Ñ–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å Learning Rate"
            
            print("‚úÖ –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è gauge –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            current_metrics = {
                'cpu_usage': 75.0,
                'memory_usage': 60.0,
                'gpu_usage': 80.0
            }
            
            gauge_plot = generator.create_performance_gauge(current_metrics)
            assert gauge_plot != "{}", "Gauge –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            assert "Overall Performance" in gauge_plot, "Gauge –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å Overall Performance"
            
            print("‚úÖ Gauge –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω")
            
            print("‚úÖ Graph Generator —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        finally:
            if os.path.exists(db_path):
                os.unlink(db_path)
        
    except Exception as e:
        print(f"‚ùå DashboardGraphGenerator: {e}")
        return False


def test_dashboard_template_creation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è HTML —à–∞–±–ª–æ–Ω–∞"""
    print("\nüß™ –¢–ï–°–¢ 5: Dashboard Template Creation")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
        create_dashboard_template()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        template_path = Path("templates/dashboard.html")
        assert template_path.exists(), "HTML —à–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        with open(template_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        required_components = [
            "Tacotron2 Production Dashboard",
            "CPU Usage",
            "Memory Usage", 
            "GPU Usage",
            "Performance",
            "socket.io",
            "plotly",
            "bootstrap"
        ]
        
        for component in required_components:
            assert component in content, f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç '{component}' –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —à–∞–±–ª–æ–Ω–µ"
        
        print(f"‚úÖ HTML —à–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω: {template_path}")
        print(f"‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Dashboard Template Creation: {e}")
        return False


def run_dashboard_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ dashboard"""
    print("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: Production Real-time Dashboard")
    print("=" * 80)
    
    if not DASHBOARD_AVAILABLE:
        print("‚ùå Production Real-time Dashboard –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    tests = [
        test_metrics_database,
        test_realtime_metrics_collector,
        test_alert_manager,
        test_dashboard_graph_generator,
        test_dashboard_template_creation
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_func in tests:
        try:
            if test_func():
                passed_tests += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests} ({passed_tests/total_tests*100:.1f}%)")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüöÄ Production Real-time Dashboard –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É:")
        print("   ‚Ä¢ MetricsDatabase - —Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ SQLite")
        print("   ‚Ä¢ RealtimeMetricsCollector - real-time —Å–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫")
        print("   ‚Ä¢ AlertManager - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–ª–µ—Ä—Ç–æ–≤")
        print("   ‚Ä¢ DashboardGraphGenerator - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ Plotly")
        print("   ‚Ä¢ HTML Template - responsive –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        print("   ‚Ä¢ WebSocket –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
        print("\nüìã –î–ª—è –∑–∞–ø—É—Å–∫–∞ dashboard:")
        print("   python production_realtime_dashboard.py")
        print("   –û—Ç–∫—Ä–æ–µ—Ç—Å—è –Ω–∞: http://localhost:5001")
        return True
    else:
        print(f"‚ö†Ô∏è {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False


if __name__ == "__main__":
    success = run_dashboard_tests()
    sys.exit(0 if success else 1) 