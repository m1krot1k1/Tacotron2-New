#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Context-Aware Training Manager
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∑–∞–º–µ–Ω—ã AutoFixManager –Ω–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
"""

import sys
import logging
import torch
import numpy as np
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

def test_context_aware_manager_import():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ Context-Aware Training Manager"""
    try:
        from context_aware_training_manager import (
            ContextAwareTrainingManager, 
            TrainingPhase, 
            TrainingContext, 
            create_context_aware_manager
        )
        logger.info("‚úÖ Context-Aware Training Manager –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Context-Aware Manager: {e}")
        return False

def test_context_aware_manager_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    try:
        from context_aware_training_manager import ContextAwareTrainingManager
        
        config = {
            'initial_lr': 1e-3,
            'history_size': 50,
            'initial_guided_weight': 4.5
        }
        
        manager = ContextAwareTrainingManager(config)
        logger.info("‚úÖ Context-Aware Training Manager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        assert manager.context_analyzer is not None
        assert manager.loss_controller is not None
        assert manager.param_manager is not None
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        return False

def test_mock_training_adaptation():
    """–¢–µ—Å—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏"""
    try:
        from context_aware_training_manager import ContextAwareTrainingManager
        
        config = {
            'initial_lr': 1e-3,
            'history_size': 50,
            'initial_guided_weight': 4.5
        }
        
        manager = ContextAwareTrainingManager(config)
        
        # –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∞–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è
        for step in range(10):
            mock_metrics = {
                'loss': 20.0 - step * 0.5,  # –£–±—ã–≤–∞—é—â–∏–π loss
                'attention_diagonality': 0.05 + step * 0.02,  # –£–ª—É—á—à–∞—é—â–∏–π—Å—è attention
                'grad_norm': 5.0 + np.random.normal(0, 0.5),
                'gate_accuracy': 0.7 + step * 0.02,
                'mel_loss': 15.0 - step * 0.3,
                'gate_loss': 3.0 - step * 0.1,
                'guided_attention_loss': 2.0 - step * 0.05,
                'epoch': 0
            }
            
            adaptations = manager.analyze_and_adapt(
                step=step,
                metrics=mock_metrics
            )
            
            if step % 5 == 0:
                logger.info(f"Step {step}: {list(adaptations.keys())}")
        
        logger.info("‚úÖ –ú–æ–∫-—Ç–µ—Å—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats = manager.get_statistics()
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats['total_interventions']} –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤, —Ñ–∞–∑–∞: {stats['current_phase']}")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–∫-—Ç–µ—Å—Ç–∞: {e}")
        return False

def test_ultimate_trainer_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å UltimateEnhancedTacotronTrainer"""
    try:
        from hparams import create_hparams
        from ultimate_tacotron_trainer import UltimateEnhancedTacotronTrainer
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ hparams –¥–ª—è —Ç–µ—Å—Ç–∞
        hparams = create_hparams()
        
        # –°–æ–∑–¥–∞–µ–º trainer –≤ —Ä–µ–∂–∏–º–µ 'enhanced'
        trainer = UltimateEnhancedTacotronTrainer(
            hparams=hparams, 
            mode='enhanced'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Context-Aware Manager –¥–æ—Å—Ç—É–ø–µ–Ω
        if hasattr(trainer, 'context_aware_manager'):
            logger.info("‚úÖ Context-Aware Manager –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ UltimateEnhancedTacotronTrainer")
        else:
            logger.warning("‚ö†Ô∏è Context-Aware Manager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ trainer")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ AutoFixManager –æ—Ç–∫–ª—é—á–µ–Ω
        if hasattr(trainer, 'auto_fix_manager') and trainer.auto_fix_manager is None:
            logger.info("‚úÖ AutoFixManager –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è AutoFixManager –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å trainer: {e}")
        return False

def test_phase_classification():
    """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–∑ –æ–±—É—á–µ–Ω–∏—è"""
    try:
        from context_aware_training_manager import ContextAnalyzer, TrainingPhase
        
        analyzer = ContextAnalyzer(history_size=20)
        
        # –¢–µ—Å—Ç —Ñ–∞–∑—ã PRE_ALIGNMENT
        for i in range(15):
            analyzer.update_metrics(
                loss=30.0 - i * 0.5,
                attention_diag=0.02 + i * 0.001,  # –û—á–µ–Ω—å –Ω–∏–∑–∫–∏–π attention
                grad_norm=10.0 + np.random.normal(0, 1),
                gate_accuracy=0.6
            )
        
        phase = analyzer.analyze_phase()
        assert phase == TrainingPhase.PRE_ALIGNMENT
        logger.info("‚úÖ –§–∞–∑–∞ PRE_ALIGNMENT –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        
        # –¢–µ—Å—Ç —Ñ–∞–∑—ã ALIGNMENT_LEARNING
        for i in range(20):
            analyzer.update_metrics(
                loss=15.0 - i * 0.2,
                attention_diag=0.25 + i * 0.01,  # –°—Ä–µ–¥–Ω–∏–π attention
                grad_norm=5.0 + np.random.normal(0, 0.5),
                gate_accuracy=0.8
            )
        
        phase = analyzer.analyze_phase()
        assert phase == TrainingPhase.ALIGNMENT_LEARNING
        logger.info("‚úÖ –§–∞–∑–∞ ALIGNMENT_LEARNING –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ñ–∞–∑: {e}")
        return False

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Context-Aware Training Manager")
    logger.info("=" * 70)
    
    tests = [
        ("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π", test_context_aware_manager_import),
        ("–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞", test_context_aware_manager_creation),
        ("–ú–æ–∫-—Ç–µ—Å—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–∏", test_mock_training_adaptation),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å trainer", test_ultimate_trainer_integration),
        ("–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–∞–∑", test_phase_classification)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        logger.info(f"\nüß™ –¢–µ—Å—Ç: {test_name}")
        logger.info("-" * 50)
        
        try:
            if test_func():
                passed += 1
                logger.info(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
            else:
                logger.error(f"‚ùå {test_name}: –ü–†–û–í–ê–õ–ï–ù")
        except Exception as e:
            logger.error(f"‚ùå {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    logger.info("\n" + "=" * 70)
    logger.info(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    logger.info(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}/{total}")
    logger.info(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {total - passed}/{total}")
    
    if passed == total:
        logger.info("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        logger.info("üß† Context-Aware Training Manager –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        return True
    else:
        logger.warning("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é.")
        return False

if __name__ == "__main__":
    success = run_all_tests()
    
    if success:
        print("\nüèÜ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê!")
        print("Context-Aware Training Manager –∑–∞–º–µ–Ω–∏–ª –¥–µ—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π AutoFixManager")
        print("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —É–º–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º")
    else:
        print("\nüîß –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–†–ê–ë–û–¢–ö–ê")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—ã—à–µ")
    
    sys.exit(0 if success else 1) 