#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ EnhancedTacotronTrainer
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Smart Tuner
3. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
4. Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
"""

import sys
import os
import torch
import numpy as np
from unittest.mock import Mock, patch, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_enhanced_trainer_initialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é EnhancedTacotronTrainer"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ EnhancedTacotronTrainer...")
    
    try:
        from enhanced_training_main import EnhancedTacotronTrainer
        from hparams import create_hparams
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ hparams
        hparams = create_hparams()
        hparams.batch_size = 4
        hparams.learning_rate = 0.001
        
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–µ—Ä
        trainer = EnhancedTacotronTrainer(hparams)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        assert trainer.hparams is not None, "hparams –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã"
        assert trainer.logger is not None, "logger –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        assert trainer.audio_enhancer is not None, "audio_enhancer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        print("   ‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if hasattr(trainer, 'smart_tuner'):
            print("   ‚úÖ Smart Tuner –¥–æ—Å—Ç—É–ø–µ–Ω")
        if hasattr(trainer, 'telegram_monitor'):
            print("   ‚úÖ Telegram Monitor –¥–æ—Å—Ç—É–ø–µ–Ω")
        if hasattr(trainer, 'integration_manager'):
            print("   ‚úÖ Integration Manager –¥–æ—Å—Ç—É–ø–µ–Ω")
        if hasattr(trainer, 'debug_reporter'):
            print("   ‚úÖ Debug Reporter –¥–æ—Å—Ç—É–ø–µ–Ω")
        
        print("‚úÖ –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_metrics_computation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞...")
    
    # –°–æ–∑–¥–∞–µ–º –º–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    batch_size = 2
    time_steps = 10
    mel_steps = 8
    
    # –ú–æ–∫ attention –º–∞—Ç—Ä–∏—Ü–∞ (–¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è)
    attention_matrix = np.zeros((batch_size, time_steps, mel_steps))
    for b in range(batch_size):
        for i in range(min(time_steps, mel_steps)):
            attention_matrix[b, i, i] = 0.8  # –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —à—É–º–∞
            for j in range(mel_steps):
                if j != i:
                    attention_matrix[b, i, j] = 0.1
    
    # –ú–æ–∫ gate outputs
    gate_outputs = torch.tensor([[0.1, 0.2, 0.8, 0.9, 0.1, 0.2, 0.8, 0.9],
                                [0.2, 0.3, 0.7, 0.8, 0.2, 0.3, 0.7, 0.8]])
    gate_targets = torch.tensor([[0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0],
                                [0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0]])
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ attention_diagonality
    attention_tensor = torch.tensor(attention_matrix, dtype=torch.float32)
    attention_matrix_np = attention_tensor.detach().cpu().numpy()
    attention_matrix_avg = attention_matrix_np.mean(axis=0)
    
    min_dim = min(attention_matrix_avg.shape[0], attention_matrix_avg.shape[1])
    diagonal_elements = []
    for i in range(min_dim):
        diagonal_elements.append(attention_matrix_avg[i, i])
    attention_diagonality = np.mean(diagonal_elements)
    
    print(f"   ‚úÖ attention_diagonality: {attention_diagonality:.4f} (–æ–∂–∏–¥–∞–µ—Ç—Å—è ~0.8)")
    assert 0.7 < attention_diagonality < 0.9, f"attention_diagonality {attention_diagonality} –≤–Ω–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ gate_accuracy
    gate_pred = (gate_outputs > 0.5).float()
    gate_targets_binary = (gate_targets > 0.5).float()
    correct = (gate_pred == gate_targets_binary).float().mean()
    gate_accuracy = correct.item()
    
    print(f"   ‚úÖ gate_accuracy: {gate_accuracy:.4f} (–æ–∂–∏–¥–∞–µ—Ç—Å—è 1.0)")
    assert gate_accuracy > 0.9, f"gate_accuracy {gate_accuracy} —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π"
    
    print("‚úÖ –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–π–¥–µ–Ω!")
    return True

def test_integration_components():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
    
    # –ú–æ–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    mock_integration_manager = Mock()
    mock_debug_reporter = Mock()
    mock_telegram_monitor = Mock()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–∑–æ–≤—ã
    step = 100
    loss = 0.5
    grad_norm = 1.2
    attention_diagonality = 0.8
    gate_accuracy = 0.95
    
    # Integration Manager
    mock_integration_manager.step.return_value = {
        'emergency_mode': False,
        'recommendations': []
    }
    result = mock_integration_manager.step(step, loss, grad_norm, None, None)
    assert result['emergency_mode'] == False, "Integration Manager –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"
    
    # Debug Reporter
    debug_data = {
        'step': step,
        'loss': loss,
        'attention_diagonality': attention_diagonality,
        'gate_accuracy': gate_accuracy,
    }
    mock_debug_reporter.collect_step_data(debug_data)
    mock_debug_reporter.collect_step_data.assert_called_once_with(debug_data)
    
    # Telegram Monitor
    enhanced_metrics = {
        'loss': loss,
        'attention_diagonality': attention_diagonality,
        'gate_accuracy': gate_accuracy,
        'grad_norm': grad_norm,
    }
    mock_telegram_monitor.send_training_update(step, enhanced_metrics, None, None)
    mock_telegram_monitor.send_training_update.assert_called_once()
    
    print("   ‚úÖ Integration Manager —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("   ‚úÖ Debug Reporter —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("   ‚úÖ Telegram Monitor —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω!")
    return True

def test_training_phases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–∑–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
    
    try:
        from enhanced_training_main import EnhancedTacotronTrainer
        from hparams import create_hparams
        
        hparams = create_hparams()
        trainer = EnhancedTacotronTrainer(hparams)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∞–∑
        phases = ['pre_alignment', 'alignment_learning', 'quality_optimization', 'fine_tuning']
        
        for i, phase in enumerate(phases):
            trainer.current_epoch = i * 1000  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç–ø–æ—Ö—É
            current_phase = trainer.get_current_training_phase()
            print(f"   ‚úÖ –≠–ø–æ—Ö–∞ {trainer.current_epoch}: —Ñ–∞–∑–∞ '{current_phase}'")
        
        print("‚úÖ –¢–µ—Å—Ç —Ñ–∞–∑–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∞–∑–æ–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ EnhancedTacotronTrainer")
    print("=" * 50)
    
    tests = [
        test_enhanced_trainer_initialization,
        test_metrics_computation,
        test_integration_components,
        test_training_phases,
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test.__name__} —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
    
    print("\n" + "=" * 50)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ EnhancedTacotronTrainer –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("\nüìã –ß—Ç–æ –±—ã–ª–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ:")
        print("   ‚Ä¢ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        print("   ‚Ä¢ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞")
        print("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Smart Tuner")
        print("   ‚Ä¢ Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")
        print("   ‚Ä¢ –§–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
        return True
    else:
        print(f"‚ùå {total - passed} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 