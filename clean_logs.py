#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ TensorBoard –∏ MLflow
"""

import os
import shutil
import glob
import argparse

def clean_tensorboard_logs(log_directory):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ TensorBoard"""
    if not os.path.exists(log_directory):
        print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {log_directory} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    print(f"üßπ –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ TensorBoard –≤ {log_directory}")
    
    # –£–¥–∞–ª—è–µ–º event —Ñ–∞–π–ª—ã
    event_files = glob.glob(os.path.join(log_directory, "events.out.tfevents*"))
    for file in event_files:
        try:
            os.remove(file)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω: {os.path.basename(file)}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file}: {e}")
    
    # –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã TensorBoard
    temp_files = glob.glob(os.path.join(log_directory, "*.tmp"))
    for file in temp_files:
        try:
            os.remove(file)
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {os.path.basename(file)}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {file}: {e}")
    
    print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ TensorBoard –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def clean_mlflow_logs(mlflow_dir=None):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ MLflow"""
    if mlflow_dir is None:
        mlflow_dir = os.path.expanduser("~/.mlflow")
    
    if not os.path.exists(mlflow_dir):
        print(f"üìÅ MLflow –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {mlflow_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    
    print(f"üßπ –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ MLflow –≤ {mlflow_dir}")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ runs (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
    import time
    current_time = time.time()
    week_ago = current_time - (7 * 24 * 60 * 60)  # 7 –¥–Ω–µ–π
    
    runs_dir = os.path.join(mlflow_dir, "mlruns")
    if os.path.exists(runs_dir):
        for experiment_dir in os.listdir(runs_dir):
            experiment_path = os.path.join(runs_dir, experiment_dir)
            if os.path.isdir(experiment_path):
                for run_dir in os.listdir(experiment_path):
                    run_path = os.path.join(experiment_path, run_dir)
                    if os.path.isdir(run_path):
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
                        try:
                            creation_time = os.path.getctime(run_path)
                            if creation_time < week_ago:
                                shutil.rmtree(run_path)
                                print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π run: {run_dir}")
                        except Exception as e:
                            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ {run_path}: {e}")
    
    print(f"‚úÖ –û—á–∏—Å—Ç–∫–∞ MLflow –ª–æ–≥–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

def main():
    parser = argparse.ArgumentParser(description="–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤")
    parser.add_argument("--log-dir", type=str, default="logs", 
                       help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –ª–æ–≥–∞–º–∏ TensorBoard")
    parser.add_argument("--mlflow-dir", type=str, default=None,
                       help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è MLflow (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ~/.mlflow)")
    parser.add_argument("--all", action="store_true",
                       help="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –ª–æ–≥–∏")
    
    args = parser.parse_args()
    
    if args.all or args.log_dir:
        clean_tensorboard_logs(args.log_dir)
    
    if args.all or args.mlflow_dir:
        clean_mlflow_logs(args.mlflow_dir)
    
    print("üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main() 