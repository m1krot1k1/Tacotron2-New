#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞–Ω–Ω–µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∞ TTS
"""

import yaml
from datetime import datetime, timedelta
import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from smart_tuner_main import SmartTunerMain

def test_early_stop_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É —Ä–∞–Ω–Ω–µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∞"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ —Ä–∞–Ω–Ω–µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∞ TTS")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä SmartTunerMain
    smart_tuner = SmartTunerMain()
    smart_tuner.training_start_time = datetime.now()
    
    # –¢–ï–°–¢ 1: –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–Ω–µ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (–∫–∞–∫ –±—ã–ª–æ –≤ –ø—Ä–æ–±–ª–µ–º–Ω–æ–º —Å–ª—É—á–∞–µ)
    print("\nüîç –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã –æ—Ç —Ä–∞–Ω–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    early_metrics = {
        'attention_alignment_score': 0.442,
        'gate_accuracy': 0.557,
        'val_loss': 2.665,
        'mel_quality_score': 0.475,
        'training_progress': float('nan'),
        'validation.step': 0  # –ü—Ä–æ–±–ª–µ–º–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
    }
    
    result1 = smart_tuner._check_tts_quality_thresholds(early_metrics)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' if not result1 else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'}")
    assert not result1, "–¢–µ—Å—Ç 1 –ø—Ä–æ–≤–∞–ª–µ–Ω: –æ–±—É—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è"
    
    # –¢–ï–°–¢ 2: –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç (–≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ)
    print("\nüîç –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç")
    smart_tuner.training_start_time = datetime.now() - timedelta(minutes=5)
    
    result2 = smart_tuner._check_tts_quality_thresholds(early_metrics)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' if not result2 else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'}")
    assert not result2, "–¢–µ—Å—Ç 2 –ø—Ä–æ–≤–∞–ª–µ–Ω: –æ–±—É—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è"
    
    # –¢–ï–°–¢ 3: –ß–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    print("\nüîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç —Å —Ö–æ—Ä–æ—à–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏")
    smart_tuner.training_start_time = datetime.now() - timedelta(minutes=20)
    
    good_metrics = {
        'attention_alignment_score': 0.65,  # –í—ã—à–µ –ø–æ—Ä–æ–≥–∞ 0.6
        'gate_accuracy': 0.75,             # –í—ã—à–µ –ø–æ—Ä–æ–≥–∞ 0.7
        'val_loss': 10.0,                  # –ù–∏–∂–µ –ø–æ—Ä–æ–≥–∞ 15.0
        'mel_quality_score': 0.45,         # –í—ã—à–µ –ø–æ—Ä–æ–≥–∞ 0.4
        'training_loss': 8.0,
        'initial_training_loss': 12.0,     # –ü—Ä–æ–≥—Ä–µ—Å—Å: (12-8)/12 = 33%
        'validation.step': 5               # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–≥–æ–≤
    }
    
    result3 = smart_tuner._check_tts_quality_thresholds(good_metrics)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å' if result3 else '‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'}")
    
    # –¢–ï–°–¢ 4: –ü–ª–æ—Ö–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ—Å–ª–µ 20 –º–∏–Ω—É—Ç
    print("\nüîç –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–æ—Ö–∏—Ö –º–µ—Ç—Ä–∏–∫ —á–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç")
    
    bad_metrics = {
        'attention_alignment_score': 0.3,   # –ù–∏–∂–µ –ø–æ—Ä–æ–≥–∞ 0.6
        'gate_accuracy': 0.4,              # –ù–∏–∂–µ –ø–æ—Ä–æ–≥–∞ 0.7
        'val_loss': 20.0,                  # –í—ã—à–µ –ø–æ—Ä–æ–≥–∞ 15.0
        'mel_quality_score': 0.2,          # –ù–∏–∂–µ –ø–æ—Ä–æ–≥–∞ 0.4
        'training_loss': 11.9,
        'initial_training_loss': 12.0,     # –ü—Ä–æ–≥—Ä–µ—Å—Å: (12-11.9)/12 = 0.8%
        'validation.step': 5               # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —à–∞–≥–æ–≤
    }
    
    result4 = smart_tuner._check_tts_quality_thresholds(bad_metrics)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' if not result4 else '‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å'}")
    assert not result4, "–¢–µ—Å—Ç 4 –ø—Ä–æ–≤–∞–ª–µ–Ω: –ø—Ä–∏ –ø–ª–æ—Ö–∏—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å—Å—è"
    
    print("\n" + "=" * 60)
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –õ–æ–≥–∏–∫–∞ early stopping –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
    print("\nüìã –°–í–û–î–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:")
    print("1. ‚è∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: 10 –º–∏–Ω—É—Ç")
    print("2. üìä –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ validation —à–∞–≥–æ–≤: 3")
    print("3. üéØ –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
    print("4. üõ°Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")
    
    return True

if __name__ == "__main__":
    test_early_stop_logic() 