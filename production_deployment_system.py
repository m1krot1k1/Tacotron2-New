#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üöÄ PRODUCTION-READY DEPLOYMENT SYSTEM
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞
‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
‚úÖ Deployment –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (Dashboard, Monitoring, Optimization)
‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
‚úÖ Production-ready –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
‚úÖ Rollback –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
"""

import os
import sys
import json
import yaml
import shutil
import subprocess
import threading
import time
from pathlib import Path
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, asdict
import logging

@dataclass
class DeploymentConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è deployment"""
    project_name: str = "Tacotron2-Enhanced"
    host: str = "0.0.0.0"
    base_port: int = 5000
    enable_dashboard: bool = True
    enable_monitoring: bool = True
    enable_optimization: bool = True
    enable_telegram: bool = False
    telegram_token: Optional[str] = None
    telegram_chat_id: Optional[str] = None
    auto_start_services: bool = True
    production_mode: bool = True
    backup_enabled: bool = True
    health_check_interval: int = 30


class ProductionDeploymentSystem:
    """üöÄ –ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ production deployment"""
    
    def __init__(self, config: Optional[DeploymentConfig] = None):
        self.config = config or DeploymentConfig()
        self.logger = self._setup_logging()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ deployment
        self.services = {}
        self.deployment_status = "initialized"
        self.backup_dir = None
        
        # –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
        self.system_ready = False
        self.dependencies_satisfied = False
        
    def _setup_logging(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logger = logging.getLogger("ProductionDeployment")
        logger.setLevel(logging.INFO)
        
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - üöÄ DEPLOY - %(levelname)s - %(message)s',
                datefmt='%H:%M:%S'
            )
            handler.setFormatter(formatter)
            logger.addHandler(handler)
        
        return logger
    
    def deploy_production_system(self) -> bool:
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ deployment"""
        self.logger.info("üöÄ –ù–ê–ß–ê–õ–û PRODUCTION DEPLOYMENT")
        self.logger.info("=" * 80)
        
        try:
            # 1. –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not self._run_system_checks():
                return False
            
            # 2. –°–æ–∑–¥–∞–Ω–∏–µ backup
            if self.config.backup_enabled:
                self._create_backup()
            
            # 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            if not self._install_dependencies():
                return False
            
            # 4. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
            if not self._configure_system():
                return False
            
            # 5. Deployment –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not self._deploy_components():
                return False
            
            # 6. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
            if self.config.auto_start_services:
                if not self._start_services():
                    return False
            
            # 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
            if not self._run_health_checks():
                return False
            
            # 8. –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
            self._finalize_deployment()
            
            self.deployment_status = "completed"
            self.logger.info("üéâ PRODUCTION DEPLOYMENT –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
            self._show_deployment_summary()
            
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ deployment: {e}")
            if self.config.backup_enabled and self.backup_dir:
                self._rollback_deployment()
            return False
    
    def _run_system_checks(self) -> bool:
        """–°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ deployment"""
        self.logger.info("üîç –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏...")
        
        checks = [
            ("Python 3.8+", self._check_python_version),
            ("–î–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ (>5GB)", self._check_disk_space),
            ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞", self._check_permissions),
            ("–î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–æ–≤", self._check_ports),
            ("GPU –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", self._check_gpu)
        ]
        
        all_passed = True
        for check_name, check_func in checks:
            try:
                if check_func():
                    self.logger.info(f"  ‚úÖ {check_name}")
                else:
                    self.logger.error(f"  ‚ùå {check_name}")
                    all_passed = False
            except Exception as e:
                self.logger.error(f"  ‚ùå {check_name}: {e}")
                all_passed = False
        
        if all_passed:
            self.system_ready = True
            self.logger.info("‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã")
        else:
            self.logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏")
        
        return all_passed
    
    def _check_python_version(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
        return sys.version_info >= (3, 8)
    
    def _check_disk_space(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞"""
        try:
            import shutil
            total, used, free = shutil.disk_usage(".")
            free_gb = free // (1024**3)
            return free_gb >= 5
        except Exception:
            return False
    
    def _check_permissions(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
        try:
            test_file = Path("test_permissions.tmp")
            test_file.write_text("test")
            test_file.unlink()
            return True
        except Exception:
            return False
    
    def _check_ports(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤"""
        import socket
        
        ports_to_check = [
            self.config.base_port,      # MLflow
            self.config.base_port + 1,  # Dashboard
            self.config.base_port + 2,  # TensorBoard
            self.config.base_port + 3   # Monitoring
        ]
        
        for port in ports_to_check:
            try:
                with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                    s.bind((self.config.host, port))
            except OSError:
                self.logger.warning(f"–ü–æ—Ä—Ç {port} –∑–∞–Ω—è—Ç")
                # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π
        
        return True
    
    def _check_gpu(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ GPU"""
        try:
            import torch
            gpu_available = torch.cuda.is_available()
            if gpu_available:
                self.logger.info(f"  GPU –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {torch.cuda.get_device_name(0)}")
            else:
                self.logger.warning("  GPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
            return True
        except Exception:
            self.logger.warning("  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å GPU")
            return True
    
    def _create_backup(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ backup —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.logger.info("üíæ –°–æ–∑–¥–∞–Ω–∏–µ backup...")
        
        from datetime import datetime
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        self.backup_dir = Path(f"deployment_backups/backup_{timestamp}")
        self.backup_dir.mkdir(parents=True, exist_ok=True)
        
        # –§–∞–π–ª—ã –¥–ª—è backup
        backup_files = [
            "hparams.py",
            "requirements.txt",
            "install.sh",
            "smart_tuner/config.yaml"
        ]
        
        for file_path in backup_files:
            if Path(file_path).exists():
                shutil.copy2(file_path, self.backup_dir)
        
        self.logger.info(f"‚úÖ Backup —Å–æ–∑–¥–∞–Ω: {self.backup_dir}")
    
    def _install_dependencies(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.logger.info("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        try:
            # Production –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            production_packages = [
                "flask>=2.0.0",
                "flask-socketio>=5.0.0", 
                "plotly>=5.0.0",
                "psutil>=5.8.0",
                "pynvml",
                "streamlit",
                "mlflow",
                "tensorboard",
                "optuna"
            ]
            
            for package in production_packages:
                self.logger.info(f"  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}...")
                result = subprocess.run([
                    sys.executable, "-m", "pip", "install", package
                ], capture_output=True, text=True)
                
                if result.returncode != 0:
                    self.logger.warning(f"  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}")
                else:
                    self.logger.info(f"  ‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
            self.dependencies_satisfied = True
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            return False
    
    def _configure_system(self) -> bool:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            self._create_production_config()
            self._create_service_configs()
            self._setup_directories()
            
            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    def _create_production_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config = {
            'deployment': asdict(self.config),
            'services': {
                'dashboard': {
                    'port': self.config.base_port + 1,
                    'host': self.config.host,
                    'auto_start': True
                },
                'monitoring': {
                    'port': self.config.base_port + 3,
                    'interval': 5,
                    'alerts_enabled': True
                },
                'mlflow': {
                    'port': self.config.base_port,
                    'tracking_uri': f"sqlite:///mlruns.db"
                },
                'tensorboard': {
                    'port': self.config.base_port + 2,
                    'logdir': './output'
                }
            },
            'optimization': {
                'auto_optimization': True,
                'performance_monitoring': True,
                'adaptive_parameters': True
            }
        }
        
        config_path = Path("production_config.yaml")
        with open(config_path, 'w') as f:
            yaml.dump(config, f, default_flow_style=False)
        
        self.logger.info(f"‚úÖ Production –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_path}")
    
    def _create_service_configs(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π —Å–µ—Ä–≤–∏—Å–æ–≤"""
        # Systemd service —Ñ–∞–π–ª—ã –¥–ª—è production
        services_dir = Path("deployment/services")
        services_dir.mkdir(parents=True, exist_ok=True)
        
        service_template = """[Unit]
Description=Tacotron2 {service_name}
After=network.target

[Service]
Type=simple
User={user}
WorkingDirectory={workdir}
ExecStart={exec_start}
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
"""
        
        services = {
            'dashboard': f'{sys.executable} production_realtime_dashboard.py',
            'monitoring': f'{sys.executable} production_monitoring.py',
        }
        
        for service_name, exec_command in services.items():
            service_content = service_template.format(
                service_name=service_name,
                user=os.getenv('USER', 'root'),
                workdir=os.getcwd(),
                exec_start=exec_command
            )
            
            service_file = services_dir / f"tacotron2-{service_name}.service"
            service_file.write_text(service_content)
    
    def _setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        directories = [
            "output", "mlruns", "logs", "checkpoints",
            "templates", "static", "data", "deployment"
        ]
        
        for directory in directories:
            Path(directory).mkdir(exist_ok=True)
    
    def _deploy_components(self) -> bool:
        """Deployment –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.logger.info("üöÄ Deployment –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        
        components = [
            ("Production Dashboard", self._deploy_dashboard),
            ("Performance Optimization", self._deploy_optimization),
            ("Monitoring System", self._deploy_monitoring),
            ("Logging System", self._deploy_logging)
        ]
        
        for component_name, deploy_func in components:
            try:
                self.logger.info(f"  Deploying {component_name}...")
                if deploy_func():
                    self.logger.info(f"  ‚úÖ {component_name} deployed")
                else:
                    self.logger.error(f"  ‚ùå {component_name} failed")
                    return False
            except Exception as e:
                self.logger.error(f"  ‚ùå {component_name}: {e}")
                return False
        
        return True
    
    def _deploy_dashboard(self) -> bool:
        """Deployment dashboard"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ dashboard —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        dashboard_files = [
            "production_realtime_dashboard.py",
            "templates/dashboard.html"
        ]
        
        for file_path in dashboard_files:
            if not Path(file_path).exists():
                self.logger.error(f"–§–∞–π–ª dashboard –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return False
        
        self.services['dashboard'] = {
            'script': 'production_realtime_dashboard.py',
            'port': self.config.base_port + 1,
            'status': 'deployed'
        }
        return True
    
    def _deploy_optimization(self) -> bool:
        """Deployment optimization —Å–∏—Å—Ç–µ–º—ã"""
        optimization_files = [
            "unified_performance_optimization_system.py"
        ]
        
        for file_path in optimization_files:
            if not Path(file_path).exists():
                self.logger.error(f"–§–∞–π–ª optimization –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return False
        
        self.services['optimization'] = {
            'script': 'unified_performance_optimization_system.py',
            'status': 'deployed'
        }
        return True
    
    def _deploy_monitoring(self) -> bool:
        """Deployment monitoring"""
        monitoring_files = [
            "production_monitoring.py"
        ]
        
        for file_path in monitoring_files:
            if Path(file_path).exists():
                self.services['monitoring'] = {
                    'script': file_path,
                    'port': self.config.base_port + 3,
                    'status': 'deployed'
                }
                return True
        
        # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π monitoring –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º simple
        if Path("simple_monitoring.py").exists():
            self.services['monitoring'] = {
                'script': 'simple_monitoring.py',
                'port': self.config.base_port + 3,
                'status': 'deployed'
            }
            return True
        
        self.logger.warning("Monitoring —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
    
    def _deploy_logging(self) -> bool:
        """Deployment logging —Å–∏—Å—Ç–µ–º—ã"""
        if Path("unified_logging_system.py").exists():
            self.services['logging'] = {
                'script': 'unified_logging_system.py',
                'status': 'deployed'
            }
        return True
    
    def _start_services(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        self.logger.info("üéØ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        started_services = []
        
        for service_name, service_config in self.services.items():
            if service_config.get('status') == 'deployed':
                try:
                    self.logger.info(f"  –ó–∞–ø—É—Å–∫ {service_name}...")
                    if self._start_service(service_name, service_config):
                        started_services.append(service_name)
                        self.logger.info(f"  ‚úÖ {service_name} –∑–∞–ø—É—â–µ–Ω")
                    else:
                        self.logger.warning(f"  ‚ö†Ô∏è {service_name} –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
                except Exception as e:
                    self.logger.error(f"  ‚ùå {service_name}: {e}")
        
        if started_services:
            self.logger.info(f"‚úÖ –ó–∞–ø—É—â–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: {len(started_services)}")
            return True
        else:
            self.logger.error("‚ùå –ù–∏ –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
            return False
    
    def _start_service(self, service_name: str, service_config: dict) -> bool:
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        script_path = service_config.get('script')
        if not script_path or not Path(script_path).exists():
            return False
        
        try:
            # –ó–∞–ø—É—Å–∫ –≤ background
            process = subprocess.Popen([
                sys.executable, script_path
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            
            service_config['process'] = process
            service_config['status'] = 'running'
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –Ω–µ —É–ø–∞–ª
            time.sleep(2)
            if process.poll() is None:
                return True
            else:
                return False
                
        except Exception:
            return False
    
    def _run_health_checks(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.logger.info("ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏...")
        
        health_checks = [
            ("Dashboard –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å", self._check_dashboard_health),
            ("Services —Å—Ç–∞—Ç—É—Å", self._check_services_health),
            ("Components –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è", self._check_integration_health)
        ]
        
        all_healthy = True
        for check_name, check_func in health_checks:
            try:
                if check_func():
                    self.logger.info(f"  ‚úÖ {check_name}")
                else:
                    self.logger.warning(f"  ‚ö†Ô∏è {check_name}")
                    # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è deployment
            except Exception as e:
                self.logger.warning(f"  ‚ö†Ô∏è {check_name}: {e}")
        
        return True  # Health checks –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è deployment
    
    def _check_dashboard_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ dashboard"""
        dashboard_service = self.services.get('dashboard')
        if not dashboard_service:
            return False
        
        process = dashboard_service.get('process')
        return process and process.poll() is None
    
    def _check_services_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        running_services = 0
        for service_name, service_config in self.services.items():
            if service_config.get('status') == 'running':
                process = service_config.get('process')
                if process and process.poll() is None:
                    running_services += 1
        
        return running_services > 0
    
    def _check_integration_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å—Ç—å –ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
        essential_files = [
            "production_realtime_dashboard.py",
            "unified_performance_optimization_system.py"
        ]
        
        return all(Path(f).exists() for f in essential_files)
    
    def _finalize_deployment(self):
        """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è deployment"""
        self.logger.info("üéØ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è deployment...")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ startup —Å–∫—Ä–∏–ø—Ç–∞
        self._create_startup_script()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ–º–∞–Ω–¥
        self._create_management_commands()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è deployment
        self._save_deployment_state()
    
    def _create_startup_script(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"""
        startup_script = """#!/bin/bash
# –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ Tacotron2 Production System

echo "üöÄ –ó–∞–ø—É—Å–∫ Tacotron2 Production System..."

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è venv –µ—Å–ª–∏ –µ—Å—Ç—å
if [ -d "venv" ]; then
    source venv/bin/activate
fi

# –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
python production_realtime_dashboard.py &
sleep 2

echo "‚úÖ Production System –∑–∞–ø—É—â–µ–Ω"
echo "üìä Dashboard: http://localhost:5001"
echo "üìà MLflow: http://localhost:5000"
echo "üìã TensorBoard: http://localhost:5002"
"""
        
        startup_file = Path("start_production.sh")
        startup_file.write_text(startup_script)
        startup_file.chmod(0o755)
        
        self.logger.info(f"‚úÖ Startup —Å–∫—Ä–∏–ø—Ç: {startup_file}")
    
    def _create_management_commands(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π
        management_dir = Path("deployment/management")
        management_dir.mkdir(parents=True, exist_ok=True)
        
        commands = {
            "status.py": "print('üöÄ Production System Status')",
            "restart.py": "print('üîÑ Restarting services...')",
            "logs.py": "print('üìã System logs')"
        }
        
        for cmd_name, cmd_content in commands.items():
            cmd_file = management_dir / cmd_name
            cmd_file.write_text(f"#!/usr/bin/env python3\n{cmd_content}\n")
            cmd_file.chmod(0o755)
    
    def _save_deployment_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è deployment"""
        state = {
            'deployment_time': time.time(),
            'config': asdict(self.config),
            'services': self.services,
            'status': self.deployment_status
        }
        
        state_file = Path("deployment_state.json")
        with open(state_file, 'w') as f:
            json.dump(state, f, indent=2)
    
    def _show_deployment_summary(self):
        """–ü–æ–∫–∞–∑ —Å–≤–æ–¥–∫–∏ deployment"""
        self.logger.info("\n" + "=" * 80)
        self.logger.info("üéâ PRODUCTION DEPLOYMENT –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        self.logger.info("=" * 80)
        
        self.logger.info("üìã –†–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        for service_name, service_config in self.services.items():
            status = service_config.get('status', 'unknown')
            port = service_config.get('port', 'N/A')
            self.logger.info(f"  ‚Ä¢ {service_name}: {status} (–ø–æ—Ä—Ç: {port})")
        
        self.logger.info(f"\nüåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:")
        self.logger.info(f"  üìä Production Dashboard: http://{self.config.host}:{self.config.base_port + 1}")
        self.logger.info(f"  üìà MLflow UI: http://{self.config.host}:{self.config.base_port}")
        self.logger.info(f"  üìã TensorBoard: http://{self.config.host}:{self.config.base_port + 2}")
        
        self.logger.info(f"\n‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:")
        self.logger.info(f"  üöÄ –ó–∞–ø—É—Å–∫: ./start_production.sh")
        self.logger.info(f"  üìä –°—Ç–∞—Ç—É—Å: python deployment/management/status.py")
        self.logger.info(f"  üíæ Backup: {self.backup_dir if self.backup_dir else '–æ—Ç–∫–ª—é—á–µ–Ω'}")
        
        self.logger.info("=" * 80)
    
    def _rollback_deployment(self):
        """–û—Ç–∫–∞—Ç deployment –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö"""
        self.logger.warning("üîô –û—Ç–∫–∞—Ç deployment...")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        for service_name, service_config in self.services.items():
            process = service_config.get('process')
            if process:
                try:
                    process.terminate()
                    self.logger.info(f"  –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {service_name}")
                except Exception:
                    pass
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup
        if self.backup_dir and self.backup_dir.exists():
            for backup_file in self.backup_dir.iterdir():
                if backup_file.is_file():
                    try:
                        shutil.copy2(backup_file, backup_file.name)
                        self.logger.info(f"  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {backup_file.name}")
                    except Exception:
                        pass
        
        self.deployment_status = "rolled_back"
        self.logger.warning("‚ö†Ô∏è Deployment –æ—Ç–∫–∞—á–µ–Ω –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é")


def deploy_production_system(config_path: Optional[str] = None) -> bool:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è deployment"""
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if config_path and Path(config_path).exists():
        with open(config_path) as f:
            config_data = yaml.safe_load(f)
        config = DeploymentConfig(**config_data.get('deployment', {}))
    else:
        config = DeploymentConfig()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã deployment
    deployment_system = ProductionDeploymentSystem(config)
    return deployment_system.deploy_production_system()


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='Production Deployment System')
    parser.add_argument('--config', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--no-backup', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å backup')
    parser.add_argument('--no-auto-start', action='store_true', help='–ù–µ –∑–∞–ø—É—Å–∫–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    config = DeploymentConfig()
    if args.no_backup:
        config.backup_enabled = False
    if args.no_auto_start:
        config.auto_start_services = False
    
    # –ó–∞–ø—É—Å–∫ deployment
    success = deploy_production_system(args.config)
    sys.exit(0 if success else 1) 