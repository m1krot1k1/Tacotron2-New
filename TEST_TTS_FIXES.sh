#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Smart Tuner V2 TTS
# –ê–≤—Ç–æ—Ä: AI Assistant
# –î–∞—Ç–∞: 23 —è–Ω–≤–∞—Ä—è 2025

set -e

echo "üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Smart Tuner V2 TTS"
echo "================================================"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_test() {
    echo -e "${BLUE}[TEST]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[‚úÖ OK]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[‚ö†Ô∏è WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[‚ùå ERROR]${NC} $1"
}

# 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
log_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤..."

required_files=(
    "smart_tuner/config.yaml"
    "smart_tuner/early_stop_controller.py"
    "smart_tuner/optimization_engine.py"
    "smart_tuner_main.py"
    "training_integration.py"
    "smart_training_logger.py"
    "training_export_system.py"
    "TTS_SYSTEM_FIXES_REPORT.md"
)

for file in "${required_files[@]}"; do
    if [[ -f "$file" ]]; then
        log_success "–§–∞–π–ª –Ω–∞–π–¥–µ–Ω: $file"
    else
        log_error "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: $file"
        exit 1
    fi
done

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
log_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ config.yaml..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω–∏–µ adaptive_advisor
if awk '/adaptive_advisor:/{flag=1} flag && /enabled:/{if(/true/) exit 0; exit 1}' smart_tuner/config.yaml; then
    log_success "Adaptive advisor –≤–∫–ª—é—á–µ–Ω"
else
    log_error "Adaptive advisor –Ω–µ –≤–∫–ª—é—á–µ–Ω!"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º TTS –ø–æ—Ä–æ–≥–∏
if grep -q "grad_norm_threshold: 200.0" smart_tuner/config.yaml; then
    log_success "–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 200.0"
else
    log_warning "–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –ø–æ—Ä–æ–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
fi

if grep -q "patience: 150" smart_tuner/config.yaml; then
    log_success "Early stopping patience —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 150"
else
    log_warning "Early stopping patience –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–∑–∏—Ç–Ω—É—é —Ü–µ–ª–µ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
if grep -q "composite_tts_score" smart_tuner/config.yaml; then
    log_success "–ö–æ–º–ø–æ–∑–∏—Ç–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
else
    log_warning "–ö–æ–º–ø–æ–∑–∏—Ç–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º TTS-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
tts_params=(
    "guided_attention_enabled"
    "guide_loss_weight"
    "attention_dropout"
    "gate_threshold"
    "prenet_dropout"
    "postnet_dropout"
)

log_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ TTS-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤..."
for param in "${tts_params[@]}"; do
    if grep -q "$param:" smart_tuner/config.yaml; then
        log_success "TTS –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–π–¥–µ–Ω: $param"
    else
        log_warning "TTS –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: $param"
    fi
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ
if grep -q "tts_phase_training:" smart_tuner/config.yaml; then
    log_success "–§–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ TTS –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
else
    log_warning "–§–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ TTS –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
fi

# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
log_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ Python —Ñ–∞–π–ª–æ–≤..."

python_files=(
    "smart_tuner/early_stop_controller.py"
    "smart_tuner/optimization_engine.py"
    "smart_tuner_main.py"
    "training_integration.py"
    "smart_training_logger.py"
    "training_export_system.py"
)

for file in "${python_files[@]}"; do
    if python3 -m py_compile "$file" 2>/dev/null; then
        log_success "–°–∏–Ω—Ç–∞–∫—Å–∏—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: $file"
    else
        log_error "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –≤ —Ñ–∞–π–ª–µ: $file"
        python3 -m py_compile "$file"
        exit 1
    fi
done

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤
log_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤..."

python3 -c "
import sys
import os
sys.path.append('.')

try:
    from smart_tuner.early_stop_controller import EarlyStopController
    print('‚úÖ EarlyStopController –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ EarlyStopController: {e}')
    sys.exit(1)

try:
    from smart_tuner.optimization_engine import OptimizationEngine
    print('‚úÖ OptimizationEngine –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OptimizationEngine: {e}')
    sys.exit(1)

try:
    from training_integration import setup_training_logging
    print('‚úÖ training_integration –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ')
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ training_integration: {e}')
    sys.exit(1)
"

if [[ $? -eq 0 ]]; then
    log_success "–í—Å–µ –∏–º–ø–æ—Ä—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
else
    log_error "–û—à–∏–±–∫–∏ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö"
    exit 1
fi

# 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
log_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏..."

# –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
python3 -c "
import sys
sys.path.append('.')
from smart_tuner.early_stop_controller import EarlyStopController

try:
    controller = EarlyStopController('smart_tuner/config.yaml')
    print('‚úÖ EarlyStopController —Å TTS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTS –º–µ—Ç–æ–¥—ã
    if hasattr(controller, '_diagnose_tts_problems'):
        print('‚úÖ TTS –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞')
    else:
        print('‚ùå TTS –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        sys.exit(1)
        
    if hasattr(controller, 'get_tts_training_summary'):
        print('‚úÖ TTS —Å—É–º–º–∞—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω–æ')
    else:
        print('‚ùå TTS —Å—É–º–º–∞—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
        sys.exit(1)
        
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è EarlyStopController: {e}')
    sys.exit(1)
"

if [[ $? -eq 0 ]]; then
    log_success "EarlyStopController —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
else
    log_error "–ü—Ä–æ–±–ª–µ–º—ã —Å EarlyStopController"
    exit 1
fi

# –¢–µ—Å—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞
python3 -c "
import sys
sys.path.append('.')
from smart_tuner.optimization_engine import OptimizationEngine

try:
    engine = OptimizationEngine('smart_tuner/config.yaml')
    print('‚úÖ OptimizationEngine —Å TTS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTS –º–µ—Ç–æ–¥—ã
    if hasattr(engine, 'calculate_composite_tts_objective'):
        print('‚úÖ –ö–æ–º–ø–æ–∑–∏—Ç–Ω–∞—è TTS —Ü–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞')
    else:
        print('‚ùå –ö–æ–º–ø–æ–∑–∏—Ç–Ω–∞—è TTS —Ü–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
        sys.exit(1)
        
    # –¢–µ—Å—Ç –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    test_metrics = {
        'val_loss': 2.5,
        'attention_alignment_score': 0.8,
        'gate_accuracy': 0.85,
        'mel_quality_score': 0.7
    }
    
    result = engine.calculate_composite_tts_objective(test_metrics)
    if isinstance(result, float) and result > 0:
        print(f'‚úÖ –ö–æ–º–ø–æ–∑–∏—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {result:.4f}')
    else:
        print(f'‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π: {result}')
        sys.exit(1)
        
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã OptimizationEngine: {e}')
    sys.exit(1)
"

if [[ $? -eq 0 ]]; then
    log_success "OptimizationEngine —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
else
    log_error "–ü—Ä–æ–±–ª–µ–º—ã —Å OptimizationEngine"
    exit 1
fi

# 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_test "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã TTS –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è..."

python3 -c "
import sys
sys.path.append('.')

try:
    from training_integration import setup_training_logging, finish_training_logging
    from smart_training_logger import SmartTrainingLogger
    from training_export_system import TrainingExportSystem
    
    print('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
    
    # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    test_run_id = 'test_run_123'
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç-–∑–∞–≥–ª—É—à–∫—É –¥–ª—è hparams
    class MockHparams:
        def __init__(self):
            self.learning_rate = 0.001
            self.batch_size = 16
            self.warmup_steps = 1000
            self.lr_scheduler_type = 'StepLR'
            self.early_stopping = True
            self.fp16_run = False
    
    test_hparams = MockHparams()
    logger, exporter = setup_training_logging(test_run_id, test_hparams)
    print('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
    
    # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫
    test_metrics = {
        'epoch': 1,
        'train_loss': 3.2,
        'val_loss': 3.5,
        'attention_alignment_score': 0.6,
        'gate_accuracy': 0.7
    }
    
    from training_integration import log_step_metrics
    log_step_metrics(1, test_metrics)
    print('‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç')
    
except Exception as e:
    print(f'‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}')
    sys.exit(1)
"

if [[ $? -eq 0 ]]; then
    log_success "–°–∏—Å—Ç–µ–º–∞ TTS –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
else
    log_error "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"
    exit 1
fi

# 7. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
log_test "–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π..."

fixes_summary=(
    "‚úÖ Adaptive advisor –≤–∫–ª—é—á–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è TTS"
    "‚úÖ –ö–æ–º–ø–æ–∑–∏—Ç–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞"
    "‚úÖ TTS –ø–æ—Ä–æ–≥–∏ —É–≤–µ–ª–∏—á–µ–Ω—ã –¥–æ –∞–¥–µ–∫–≤–∞—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"
    "‚úÖ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø–æ–∏—Å–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–æ TTS –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"
    "‚úÖ Optuna pruning –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è TTS"
    "‚úÖ –§–∞–∑–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ TTS –¥–æ–±–∞–≤–ª–µ–Ω–æ"
    "‚úÖ TTS-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã"
    "‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞"
    "‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è TTS —Ä–∞–±–æ—Ç–∞–µ—Ç"
    "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
)

echo ""
echo "üéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:"
echo "=========================="
for fix in "${fixes_summary[@]}"; do
    echo -e "$fix"
done

echo ""
echo -e "${GREEN}üöÄ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´ –ò –†–ê–ë–û–¢–ê–Æ–¢!${NC}"
echo ""
echo "üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
echo "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python smart_tuner_main.py --mode train"
echo "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ smart_tuner/logs/"
echo "3. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ TTS –º–µ—Ç—Ä–∏–∫–∏ –≤ smart_logs/"
echo "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç—ã –≤ training_exports/"
echo ""
echo -e "${BLUE}–°–∏—Å—Ç–µ–º–∞ Smart Tuner V2 TTS –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!${NC}" 