#!/usr/bin/env python3
"""
üß™ TESTS: Meta-Learning Engine
==============================

–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Meta-Learning Engine:
1. EpisodicMemory - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ —ç–ø–∏–∑–æ–¥–æ–≤
2. PatternAnalyzer - –∞–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —É—Å–ø–µ—Ö–∞/–Ω–µ—É–¥–∞—á
3. StrategyAdaptor - –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
5. Persistent storage
"""

import os
import sys
import tempfile
import shutil
import time
import json
import sqlite3
from pathlib import Path

sys.path.insert(0, os.getcwd())

try:
    from meta_learning_engine import (
        MetaLearningEngine,
        EpisodicMemory,
        PatternAnalyzer,
        StrategyAdaptor,
        TrainingEpisode,
        LearningStrategy,
        TrainingPhase,
        create_meta_learning_engine
    )
    META_LEARNING_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Meta-Learning Engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    META_LEARNING_AVAILABLE = False


def create_test_episode(episode_id: str, 
                       success: bool = True,
                       strategy: LearningStrategy = LearningStrategy.BALANCED) -> TrainingEpisode:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–ø–∏–∑–æ–¥–∞"""
    return TrainingEpisode(
        episode_id=episode_id,
        start_time=time.time() - 3600,  # –ß–∞—Å –Ω–∞–∑–∞–¥
        end_time=time.time(),
        initial_phase=TrainingPhase.PRE_ALIGNMENT,
        final_phase=TrainingPhase.ALIGNMENT_LEARNING if success else TrainingPhase.PRE_ALIGNMENT,
        initial_loss=15.0,
        initial_attention_quality=0.1,
        final_loss=8.0 if success else 20.0,
        final_attention_quality=0.4 if success else 0.05,
        strategy_used=strategy,
        decisions_made=[
            {'type': 'lr_change', 'value': 0.001, 'reason': 'adaptation'},
            {'type': 'weight_change', 'value': 1.2, 'reason': 'improvement'}
        ],
        parameters_changed={'learning_rate': 0.001, 'attention_weight': 1.2},
        success=success,
        improvement_score=0.7 if success else -0.2,
        convergence_achieved=success,
        total_steps=1000
    )


def test_episodic_memory():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ EpisodicMemory"""
    print("\nüß™ –¢–ï–°–¢ 1: EpisodicMemory")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            memory = EpisodicMemory(memory_dir=temp_dir, max_episodes=5)
            
            # –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–æ–≤
            test_episodes = [
                create_test_episode("episode_1", success=True, strategy=LearningStrategy.AGGRESSIVE),
                create_test_episode("episode_2", success=False, strategy=LearningStrategy.CONSERVATIVE),
                create_test_episode("episode_3", success=True, strategy=LearningStrategy.BALANCED),
                create_test_episode("episode_4", success=True, strategy=LearningStrategy.ADAPTIVE),
                create_test_episode("episode_5", success=False, strategy=LearningStrategy.AGGRESSIVE)
            ]
            
            for episode in test_episodes:
                memory.add_episode(episode)
            
            assert len(memory.episodes) == 5, f"–û–∂–∏–¥–∞–ª–æ—Å—å 5 —ç–ø–∏–∑–æ–¥–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {len(memory.episodes)}"
            print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–æ–≤: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —ç–ø–∏–∑–æ–¥–æ–≤
            similar = memory.get_similar_episodes(
                current_phase=TrainingPhase.PRE_ALIGNMENT,
                current_loss=14.0,
                current_attention=0.12,
                top_k=3
            )
            
            assert len(similar) <= 3, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∞–∫—Å–∏–º—É–º 3 –ø–æ—Ö–æ–∂–∏—Ö —ç–ø–∏–∑–æ–¥–∞"
            assert len(similar) > 0, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ—Ö–æ–∂–∏–π —ç–ø–∏–∑–æ–¥"
            print("‚úÖ –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —ç–ø–∏–∑–æ–¥–æ–≤: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
            stats = memory.get_success_statistics()
            
            assert 'total_episodes' in stats, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ total_episodes"
            assert 'successful_episodes' in stats, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ successful_episodes"
            assert stats['total_episodes'] == 5, f"–û–∂–∏–¥–∞–ª–æ—Å—å 5 —ç–ø–∏–∑–æ–¥–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {stats['total_episodes']}"
            assert stats['successful_episodes'] == 3, f"–û–∂–∏–¥–∞–ª–æ—Å—å 3 —É—Å–ø–µ—à–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–∞, –ø–æ–ª—É—á–µ–Ω–æ {stats['successful_episodes']}"
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            
            # –¢–µ—Å—Ç 4: Persistent storage
            memory2 = EpisodicMemory(memory_dir=temp_dir, max_episodes=5)
            assert len(memory2.episodes) == 5, "–≠–ø–∏–∑–æ–¥—ã –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
            print("‚úÖ Persistent storage: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("‚úÖ EpisodicMemory: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå EpisodicMemory: {e}")
        return False


def test_pattern_analyzer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PatternAnalyzer"""
    print("\nüß™ –¢–ï–°–¢ 2: PatternAnalyzer")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            memory = EpisodicMemory(memory_dir=temp_dir)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
            test_episodes = [
                # –£—Å–ø–µ—à–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã —Å AGGRESSIVE —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
                create_test_episode("success_1", success=True, strategy=LearningStrategy.AGGRESSIVE),
                create_test_episode("success_2", success=True, strategy=LearningStrategy.AGGRESSIVE),
                create_test_episode("success_3", success=True, strategy=LearningStrategy.AGGRESSIVE),
                
                # –ù–µ—É–¥–∞—á–Ω—ã–µ —ç–ø–∏–∑–æ–¥—ã —Å CONSERVATIVE —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π
                create_test_episode("fail_1", success=False, strategy=LearningStrategy.CONSERVATIVE),
                create_test_episode("fail_2", success=False, strategy=LearningStrategy.CONSERVATIVE),
                
                # –°–º–µ—à–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å BALANCED
                create_test_episode("mixed_1", success=True, strategy=LearningStrategy.BALANCED),
                create_test_episode("mixed_2", success=False, strategy=LearningStrategy.BALANCED),
            ]
            
            for episode in test_episodes:
                memory.add_episode(episode)
            
            analyzer = PatternAnalyzer(memory)
            
            # –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
            patterns = analyzer.analyze_patterns()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π dict –µ—Å–ª–∏ –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö)
            assert isinstance(patterns, dict), "–ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
            
            if patterns:  # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                assert 'success_patterns' in patterns, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å–ø–µ—Ö–∞"
                assert 'failure_patterns' in patterns, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ—É–¥–∞—á"
                print("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö)")
            else:
                print("‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö")
            
            # –¢–µ—Å—Ç 2: –ü–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å–ø–µ—Ö–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
            if patterns and 'success_patterns' in patterns:
                success_patterns = patterns['success_patterns']
                if 'best_strategy' in success_patterns:
                    best_strategy = success_patterns['best_strategy']['strategy']
                    assert best_strategy == 'aggressive', f"–õ—É—á—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'aggressive', –ø–æ–ª—É—á–µ–Ω–∞: {best_strategy}"
                    print("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å–ø–µ—Ö–∞: AGGRESSIVE —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ –ª—É—á—à–∞—è")
                else:
                    print("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å–ø–µ—Ö–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª—É—á—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            
            # –¢–µ—Å—Ç 3: –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ—É–¥–∞—á (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
            if patterns and 'failure_patterns' in patterns:
                failure_patterns = patterns['failure_patterns']
                if 'worst_strategy' in failure_patterns:
                    worst_strategy = failure_patterns['worst_strategy']['strategy']
                    assert worst_strategy == 'conservative', f"–•—É–¥—à–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 'conservative', –ø–æ–ª—É—á–µ–Ω–∞: {worst_strategy}"
                    print("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ—É–¥–∞—á: CONSERVATIVE —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ —Ö—É–¥—à–∞—è")
                else:
                    print("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ—É–¥–∞—á: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ö—É–¥—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
            
            # –¢–µ—Å—Ç 4: –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–µ—à–µ–Ω–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
            decision_patterns = patterns.get('decision_patterns', {})
            if decision_patterns:
                if 'lr_change' in decision_patterns:
                    print("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–µ—à–µ–Ω–∏–π: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã lr_change –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
                else:
                    print("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–µ—à–µ–Ω–∏–π: –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—Ä—É–≥–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
            else:
                print("‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–µ—à–µ–Ω–∏–π: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
        
        print("‚úÖ PatternAnalyzer: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå PatternAnalyzer: {e}")
        return False


def test_strategy_adaptor():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ StrategyAdaptor"""
    print("\nüß™ –¢–ï–°–¢ 3: StrategyAdaptor")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            memory = EpisodicMemory(memory_dir=temp_dir)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —è–≤–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏ —É—Å–ø–µ—Ö–∞
            successful_episodes = [
                create_test_episode(f"success_{i}", success=True, strategy=LearningStrategy.ADAPTIVE)
                for i in range(15)  # 15 —É—Å–ø–µ—à–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤ —Å ADAPTIVE
            ]
            
            for episode in successful_episodes:
                memory.add_episode(episode)
            
            analyzer = PatternAnalyzer(memory)
            adaptor = StrategyAdaptor(analyzer)
            
            # –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
            current_context = {
                'phase': TrainingPhase.PRE_ALIGNMENT,
                'loss': 12.0,
                'attention_quality': 0.15
            }
            
            adapted_strategies = adaptor.adapt_strategies(current_context)
            
            assert isinstance(adapted_strategies, dict), "–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
            assert len(adapted_strategies) > 0, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"
            print("‚úÖ –ë–∞–∑–æ–≤–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç 2: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ-–∑–∞–≤–∏—Å–∏–º–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è
            high_loss_context = {
                'phase': TrainingPhase.PRE_ALIGNMENT,
                'loss': 20.0,  # –í—ã—Å–æ–∫–∏–π loss
                'attention_quality': 0.05
            }
            
            adapted_high_loss = adaptor.adapt_strategies(high_loss_context)
            
            # –ü—Ä–∏ –≤—ã—Å–æ–∫–æ–º loss –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
            lr_adaptation = adapted_high_loss.get('learning_rate_adaptation')
            if lr_adaptation:
                assert lr_adaptation == 'aggressive', f"–ü—Ä–∏ –≤—ã—Å–æ–∫–æ–º loss –æ–∂–∏–¥–∞–µ—Ç—Å—è aggressive, –ø–æ–ª—É—á–µ–Ω–æ: {lr_adaptation}"
                print("‚úÖ –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º loss: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            
            # –¢–µ—Å—Ç 3: –ò—Å—Ç–æ—Ä–∏—è –∞–¥–∞–ø—Ç–∞—Ü–∏–π
            adaptations_before = len(adaptor.adaptation_history)
            
            convergence_context = {
                'phase': TrainingPhase.CONVERGENCE,
                'loss': 2.5,  # –ù–∏–∑–∫–∏–π loss
                'attention_quality': 0.8
            }
            
            adapted_convergence = adaptor.adapt_strategies(convergence_context)
            adaptations_after = len(adaptor.adaptation_history)
            
            assert adaptations_after >= adaptations_before, "–ò—Å—Ç–æ—Ä–∏—è –∞–¥–∞–ø—Ç–∞—Ü–∏–π –¥–æ–ª–∂–Ω–∞ –ø–æ–ø–æ–ª–Ω—è—Ç—å—Å—è"
            print("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∞–¥–∞–ø—Ç–∞—Ü–∏–π: –≤–µ–¥–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print("‚úÖ StrategyAdaptor: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå StrategyAdaptor: {e}")
        return False


def test_meta_learning_engine_integration():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ MetaLearningEngine"""
    print("\nüß™ –¢–ï–°–¢ 4: MetaLearningEngine Integration")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            engine = MetaLearningEngine(memory_dir=temp_dir)
            
            # –¢–µ—Å—Ç 1: –ù–∞—á–∞–ª–æ —ç–ø–∏–∑–æ–¥–∞
            initial_context = {
                'phase': TrainingPhase.PRE_ALIGNMENT,
                'loss': 15.0,
                'attention_quality': 0.1
            }
            
            episode_id = engine.start_episode(initial_context)
            
            assert episode_id is not None, "Episode ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω"
            assert engine.current_episode is not None, "–¢–µ–∫—É—â–∏–π —ç–ø–∏–∑–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            assert engine.current_episode.episode_id == episode_id, "Episode ID –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
            print("‚úÖ –ù–∞—á–∞–ª–æ —ç–ø–∏–∑–æ–¥–∞: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç 2: –ó–∞–ø–∏—Å—å —Ä–µ—à–µ–Ω–∏–π
            test_decision = {
                'type': 'lr_adjustment',
                'old_value': 0.001,
                'new_value': 0.0005,
                'reason': 'high_loss'
            }
            
            engine.record_decision(test_decision)
            
            assert len(engine.current_episode.decisions_made) == 1, "–†–µ—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω–æ"
            assert engine.current_episode.decisions_made[0]['type'] == 'lr_adjustment', "–¢–∏–ø —Ä–µ—à–µ–Ω–∏—è –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å"
            print("‚úÖ –ó–∞–ø–∏—Å—å —Ä–µ—à–µ–Ω–∏–π: —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            recommendations = engine.get_recommended_strategy(initial_context)
            
            assert 'strategies' in recommendations, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö"
            assert 'confidence' in recommendations, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
            assert 'learning_insights' in recommendations, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å insights"
            print("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
            # –¢–µ—Å—Ç 4: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞
            final_context = {
                'phase': TrainingPhase.ALIGNMENT_LEARNING,
                'loss': 8.0,
                'attention_quality': 0.4,
                'total_steps': 1000
            }
            
            success = engine.end_episode(final_context)
            
            assert isinstance(success, bool), "–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å boolean"
            assert engine.current_episode is None, "–¢–µ–∫—É—â–∏–π —ç–ø–∏–∑–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—á–∏—â–µ–Ω"
            assert len(engine.episodic_memory.episodes) == 1, "–≠–ø–∏–∑–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç–∏"
            print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞: —É—Å–ø–µ—Ö = {success}")
            
            # –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
            stats = engine.get_learning_statistics()
            
            assert 'meta_learning_stats' in stats, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ—Ç–∞-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            assert 'memory_stats' in stats, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏"
            assert 'system_maturity' in stats, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ü–µ–Ω–∫–∞ –∑—Ä–µ–ª–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"
            
            meta_stats = stats['meta_learning_stats']
            assert meta_stats['total_episodes'] == 1, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 —ç–ø–∏–∑–æ–¥"
            print("‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è: –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            
            # –¢–µ—Å—Ç 6: Persistent state
            engine2 = MetaLearningEngine(memory_dir=temp_dir)
            stats2 = engine2.get_learning_statistics()
            
            assert stats2['meta_learning_stats']['total_episodes'] == 1, "–°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è"
            print("‚úÖ Persistent state: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("‚úÖ MetaLearningEngine Integration: –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå MetaLearningEngine Integration: {e}")
        return False


def test_learning_evolution():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–≤–æ–ª—é—Ü–∏–∏ –æ–±—É—á–µ–Ω–∏—è"""
    print("\nüß™ –¢–ï–°–¢ 5: Learning Evolution")
    
    try:
        with tempfile.TemporaryDirectory() as temp_dir:
            engine = create_meta_learning_engine(memory_dir=temp_dir)
            
            # –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–ø–∏–∑–æ–¥–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —ç–≤–æ–ª—é—Ü–∏–∏
            episodes_data = [
                # –ü–µ—Ä–≤—ã–µ —ç–ø–∏–∑–æ–¥—ã - –Ω–µ—É–¥–∞—á–Ω—ã–µ
                ({'loss': 20.0, 'attention_quality': 0.05}, {'loss': 25.0, 'attention_quality': 0.03}, False),
                ({'loss': 18.0, 'attention_quality': 0.08}, {'loss': 22.0, 'attention_quality': 0.06}, False),
                
                # –°—Ä–µ–¥–Ω–∏–µ —ç–ø–∏–∑–æ–¥—ã - —É–ª—É—á—à–µ–Ω–∏–µ
                ({'loss': 15.0, 'attention_quality': 0.1}, {'loss': 10.0, 'attention_quality': 0.3}, True),
                ({'loss': 12.0, 'attention_quality': 0.2}, {'loss': 8.0, 'attention_quality': 0.4}, True),
                
                # –ü–æ–∑–¥–Ω–∏–µ —ç–ø–∏–∑–æ–¥—ã - —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —É—Å–ø–µ—Ö
                ({'loss': 10.0, 'attention_quality': 0.3}, {'loss': 5.0, 'attention_quality': 0.6}, True),
                ({'loss': 8.0, 'attention_quality': 0.4}, {'loss': 4.0, 'attention_quality': 0.7}, True),
            ]
            
            success_rates = []
            
            for i, (initial, final, expected_success) in enumerate(episodes_data):
                episode_id = engine.start_episode({
                    'phase': TrainingPhase.PRE_ALIGNMENT,
                    **initial
                })
                
                # –ó–∞–ø–∏—Å—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è
                engine.record_decision({
                    'type': 'strategy_change',
                    'episode': i,
                    'decision': 'test_adaptation'
                })
                
                success = engine.end_episode({
                    'phase': TrainingPhase.CONVERGENCE if expected_success else TrainingPhase.PRE_ALIGNMENT,
                    'total_steps': 1000,
                    **final
                })
                
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats = engine.get_learning_statistics()
                meta_stats = stats['meta_learning_stats']
                
                if meta_stats['total_episodes'] > 0:
                    success_rate = meta_stats['successful_episodes'] / meta_stats['total_episodes']
                    success_rates.append(success_rate)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–≤–æ–ª—é—Ü–∏–∏
            assert len(success_rates) == len(episodes_data), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –≤—Å–µ—Ö —ç–ø–∏–∑–æ–¥–æ–≤"
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            final_stats = engine.get_learning_statistics()
            maturity = final_stats['system_maturity']
            
            assert maturity in ['novice', 'learning', 'experienced', 'expert'], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –∑—Ä–µ–ª–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: {maturity}"
            print(f"‚úÖ –ó—Ä–µ–ª–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã: {maturity}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—ã—Ç–∞
            final_recommendations = engine.get_recommended_strategy({
                'phase': TrainingPhase.PRE_ALIGNMENT,
                'loss': 12.0,
                'attention_quality': 0.2
            })
            
            confidence = final_recommendations['confidence']
            insights = final_recommendations['learning_insights']
            
            assert confidence in ['low', 'medium', 'high'], f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence}"
            assert isinstance(insights, list), "Insights –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"
            print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å = {confidence}, insights = {len(insights)}")
        
        print("‚úÖ Learning Evolution: –≠–≤–æ–ª—é—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå Learning Evolution: {e}")
        return False


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Meta-Learning Engine"""
    print("üß† –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: Meta-Learning Engine")
    print("=" * 80)
    
    if not META_LEARNING_AVAILABLE:
        print("‚ùå Meta-Learning Engine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    tests = [
        test_episodic_memory,
        test_pattern_analyzer,
        test_strategy_adaptor,
        test_meta_learning_engine_integration,
        test_learning_evolution
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_func in tests:
        try:
            if test_func():
                passed_tests += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests} ({passed_tests/total_tests*100:.1f}%)")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüöÄ Meta-Learning Engine –≥–æ—Ç–æ–≤ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("   ‚Ä¢ Episodic Memory –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø—ã—Ç–∞ –æ–±—É—á–µ–Ω–∏—è")
        print("   ‚Ä¢ Pattern Analysis –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π")
        print("   ‚Ä¢ Strategy Adaptation –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞")
        print("   ‚Ä¢ Persistent storage –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è")
        print("   ‚Ä¢ Integration —Å Context-Aware Training Manager")
        return True
    else:
        print(f"‚ö†Ô∏è {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        return False


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1) 