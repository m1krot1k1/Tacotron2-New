# –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π install.sh —Å–∫—Ä–∏–ø—Ç –ø–æ —á–∞—Å—Ç—è–º
part1 = """#!/bin/bash

# –£–ª—É—á—à–µ–Ω–Ω—ã–π install.sh –¥–ª—è Tacotron2-New Smart Tuner
# –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VENV_DIR="$SCRIPT_DIR/venv"

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É Tacotron2-New Smart Tuner..."

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
check_port_availability() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo "‚ö†Ô∏è –ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π"
        return 1
    fi
    return 0
}

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
if [ ! -d "$VENV_DIR" ]; then
    python3 -m venv "$VENV_DIR"
    echo "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
else
    echo "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
source "$VENV_DIR/bin/activate"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
echo "‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip..."
pip install --upgrade pip

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

# –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cmaes –¥–ª—è Optuna
echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cmaes –¥–ª—è Optuna..."
pip install cmaes

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
pip install optuna mlflow tensorboard streamlit
pip install numpy scipy matplotlib librosa soundfile
pip install tqdm psutil unidecode inflect Pillow

echo "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
"""

part2 = """
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLite WAL —Ä–µ–∂–∏–º–∞
echo "üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite..."
mkdir -p smart_tuner

python -c "
import sqlite3
import os

def setup_sqlite_wal():
    db_path = 'smart_tuner/optuna_studies.db'
    
    if os.path.exists(db_path):
        os.remove(db_path)
    
    conn = sqlite3.connect(db_path, timeout=30)
    try:
        conn.execute('PRAGMA journal_mode=WAL;')
        conn.execute('PRAGMA synchronous=NORMAL;')
        conn.execute('PRAGMA cache_size=10000;')
        conn.execute('PRAGMA temp_store=MEMORY;')
        conn.execute('PRAGMA mmap_size=268435456;')
        conn.execute('PRAGMA busy_timeout=30000;')
        conn.commit()
        print('‚úÖ SQLite –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ WAL —Ä–µ–∂–∏–º–µ')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SQLite: {e}')
    finally:
        conn.close()

setup_sqlite_wal()
"

echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p output mlruns smart_tuner/models smart_tuner/checkpoints smart_tuner/logs data

echo "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
"""

part3 = """
# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤
echo "üßπ –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤..."

pkill -f "mlflow ui" 2>/dev/null || true
pkill -f "tensorboard" 2>/dev/null || true
pkill -f "streamlit run" 2>/dev/null || true

sleep 2

rm -rf output/ mlruns/ smart_tuner/models/ 2>/dev/null || true
rm -f tensorboard.log mlflow.log smart_tuner_main.log 2>/dev/null || true

mkdir -p output mlruns smart_tuner/models

echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
echo ""
echo "üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:"
echo "1) –û–±—ã—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ" 
echo "2) –£–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (Smart Tuner)"
echo "3) –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
echo "4) –í—ã—Ö–æ–¥"

read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): " choice

case $choice in
    1)
        echo "üöÄ –ó–∞–ø—É—Å–∫ –æ–±—ã—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è..."
        python train.py --output_directory=output --log_directory=mlruns
        ;;
    2)
        echo "üß† –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è..."
        python smart_tuner_main.py
        ;;
    3)
        echo "üìä –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
        
        # MLflow UI
        MLFLOW_PORT=5000
        for port in 5000 5010 5020; do
            if check_port_availability $port; then
                MLFLOW_PORT=$port
                break
            fi
        done
        
        nohup "$VENV_DIR/bin/mlflow" ui --host 0.0.0.0 --port $MLFLOW_PORT > mlflow.log 2>&1 &
        echo "‚úÖ MLflow UI –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $MLFLOW_PORT"
        
        # TensorBoard  
        TENSORBOARD_PORT=5001
        for port in 5001 5011 5021; do
            if check_port_availability $port; then
                TENSORBOARD_PORT=$port
                break
            fi
        done
        
        nohup "$VENV_DIR/bin/tensorboard" --logdir=mlruns --host=0.0.0.0 --port=$TENSORBOARD_PORT > tensorboard.log 2>&1 &
        echo "‚úÖ TensorBoard –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $TENSORBOARD_PORT"
        
        echo ""
        echo "üéØ –°–µ—Ä–≤–∏—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã:"
        echo "   MLflow UI: http://localhost:$MLFLOW_PORT"
        echo "   TensorBoard: http://localhost:$TENSORBOARD_PORT"
        ;;
    4)
        echo "üëã –í—ã—Ö–æ–¥..."
        ;;
    *)
        echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä"
        ;;
esac

echo ""
echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
echo "üéâ –£–¥–∞—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!"
"""

# –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
complete_script = part1 + part2 + part3

with open("improved_install.sh", "w", encoding="utf-8") as f:
    f.write(complete_script)

print("‚úÖ –°–æ–∑–¥–∞–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π install.sh —Å–∫—Ä–∏–ø—Ç")
print("üìÅ –§–∞–π–ª: improved_install.sh")
print()
print("üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
print("1. ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cmaes –¥–ª—è Optuna") 
print("2. ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLite WAL —Ä–µ–∂–∏–º–∞")
print("3. ‚úÖ –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤")
print("4. ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞")
print("5. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")