# –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π install.sh —Å–∫—Ä–∏–ø—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º
improved_install_script = """#!/bin/bash

# –£–ª—É—á—à–µ–Ω–Ω—ã–π install.sh –¥–ª—è Tacotron2-New Smart Tuner
# –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VENV_DIR="$SCRIPT_DIR/venv"

echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É Tacotron2-New Smart Tuner..."

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
check_port_availability() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        echo "‚ö†Ô∏è –ü–æ—Ä—Ç $port –∑–∞–Ω—è—Ç, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π"
        return 1
    fi
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
safe_stop_processes() {
    echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ MLflow UI
    pkill -f "mlflow ui" 2>/dev/null || true
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TensorBoard  
    pkill -f "tensorboard" 2>/dev/null || true
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Streamlit
    pkill -f "streamlit run" 2>/dev/null || true
    
    sleep 2
    echo "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
echo "üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
if [ ! -d "$VENV_DIR" ]; then
    python3 -m venv "$VENV_DIR"
    echo "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ"
else
    echo "‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

# –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è
source "$VENV_DIR/bin/activate"

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip
echo "‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip..."
pip install --upgrade pip

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

# –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cmaes –¥–ª—è Optuna
echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cmaes –¥–ª—è Optuna..."
pip install cmaes

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ML –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
pip install optuna
pip install mlflow
pip install tensorboard
pip install streamlit
pip install numpy scipy matplotlib
pip install librosa soundfile
pip install tqdm
pip install psutil  # –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è TTS
pip install unidecode inflect
pip install Pillow

echo "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –≤ WAL —Ä–µ–∂–∏–º–µ
echo "üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite..."
mkdir -p smart_tuner

# –°–æ–∑–¥–∞–µ–º Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SQLite
cat > setup_sqlite.py << 'EOF'
import sqlite3
import os

def setup_sqlite_wal():
    db_path = 'smart_tuner/optuna_studies.db'
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –±–∞–∑—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if os.path.exists(db_path):
        os.remove(db_path)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å WAL —Ä–µ–∂–∏–º–æ–º
    conn = sqlite3.connect(db_path, timeout=30)
    try:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WAL —Ä–µ–∂–∏–º–∞ –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        conn.execute('PRAGMA journal_mode=WAL;')
        conn.execute('PRAGMA synchronous=NORMAL;')
        conn.execute('PRAGMA cache_size=10000;')
        conn.execute('PRAGMA temp_store=MEMORY;')
        conn.execute('PRAGMA mmap_size=268435456;')  # 256MB
        conn.execute('PRAGMA busy_timeout=30000;')   # 30 —Å–µ–∫—É–Ω–¥
        
        conn.commit()
        print("‚úÖ SQLite –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ WAL —Ä–µ–∂–∏–º–µ")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        conn.execute('''
            CREATE TABLE IF NOT EXISTS health_check (
                id INTEGER PRIMARY KEY,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.execute('INSERT INTO health_check (id) VALUES (1)')
        conn.commit()
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ SQLite: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    setup_sqlite_wal()
EOF

python setup_sqlite.py
rm setup_sqlite.py

echo "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p output
mkdir -p mlruns  
mkdir -p smart_tuner/models
mkdir -p smart_tuner/checkpoints
mkdir -p smart_tuner/logs
mkdir -p data

echo "‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ data_utils.py
echo "üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫ data_utils.py..."
cat > data_utils_fix.py << 'EOF'
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è data_utils.py - custom collate_fn
import torch
from torch.nn.utils.rnn import pad_sequence

def custom_collate_fn_fixed(batch):
    """
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è collate_fn –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ device transfer
    –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É: AttributeError: 'tuple' object has no attribute 'device'
    """
    if not batch:
        return torch.tensor([]), torch.tensor([])
    
    data_batch = []
    target_batch = []
    
    for sample in batch:
        if isinstance(sample, (list, tuple)) and len(sample) >= 2:
            data, target = sample[0], sample[1]
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ data —ç—Ç–æ —Ç–µ–Ω–∑–æ—Ä
            if not isinstance(data, torch.Tensor):
                data = torch.tensor(data)
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ target —ç—Ç–æ —Ç–µ–Ω–∑–æ—Ä  
            if not isinstance(target, torch.Tensor):
                target = torch.tensor(target)
                
            data_batch.append(data)
            target_batch.append(target)
    
    # –°—Ç–µ–∫–∏—Ä—É–µ–º —Ç–µ–Ω–∑–æ—Ä—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏
    try:
        data_tensor = torch.stack(data_batch)
        target_tensor = torch.stack(target_batch)
    except RuntimeError:
        # –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º pad_sequence
        data_tensor = pad_sequence(data_batch, batch_first=True)
        target_tensor = pad_sequence(target_batch, batch_first=True)
    
    return data_tensor, target_tensor

print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è data_utils –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é")
EOF

echo "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
safe_stop_processes

# –£–õ–£–ß–®–ï–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
echo "üßπ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—É—Å–∫–æ–≤..."

# –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
python -c "
import sqlite3
import os
import time

db_path = 'smart_tuner/optuna_studies.db'
if os.path.exists(db_path):
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ graceful –∑–∞–∫—Ä—ã—Ç–∏—è
        conn = sqlite3.connect(db_path, timeout=5)
        conn.execute('PRAGMA wal_checkpoint(RESTART);')
        conn.close()
        time.sleep(1)
    except:
        pass
"

# –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
FILES_TO_CLEAN=(
    "output/"
    "mlruns/"
    "smart_tuner/models/"
    "tensorboard.log"
    "mlflow.log" 
    "smart_tuner_main.log"
)

for item in "${FILES_TO_CLEAN[@]}"; do
    if [ -e "$item" ]; then
        rm -rf "$item" 2>/dev/null || {
            echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å $item (–≤–æ–∑–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"
        }
    fi
done

# –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
mkdir -p output mlruns smart_tuner/models

echo "‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"

# –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞
echo ""
echo "üîß –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:"
echo "1) –û–±—ã—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
echo "2) –£–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ (Smart Tuner)"
echo "3) –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"
echo "4) –í—ã—Ö–æ–¥"

read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): " choice

case $choice in
    1)
        echo "üöÄ –ó–∞–ø—É—Å–∫ –æ–±—ã—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è..."
        python train.py --output_directory=output --log_directory=mlruns
        ;;
    2)
        echo "üß† –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è..."
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–º–µ–Ω—è–µ–º patch –¥–ª—è train.py
        echo "üîß –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫ train.py..."
        
        # –°–æ–∑–¥–∞–µ–º backup
        cp train.py train.py.backup 2>/dev/null || true
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å—Ç—Ä–æ–∫–∏ 897
        sed -i 's/device = x\.device/device = x.device if hasattr(x, "device") and isinstance(x, torch.Tensor) else torch.device("cuda" if torch.cuda.is_available() else "cpu")/g' train.py
        
        echo "‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∫ train.py"
        
        # –ó–∞–ø—É—Å–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        python smart_tuner_main.py
        ;;
    3)
        echo "üìä –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
        
        # –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        
        # MLflow UI
        MLFLOW_PORT=5000
        for port in 5000 5010 5020; do
            if check_port_availability $port; then
                MLFLOW_PORT=$port
                break
            fi
        done
        
        echo "üöÄ –ó–∞–ø—É—Å–∫ MLflow UI –Ω–∞ –ø–æ—Ä—Ç—É $MLFLOW_PORT..."
        nohup "$VENV_DIR/bin/mlflow" ui --host 0.0.0.0 --port $MLFLOW_PORT > mlflow.log 2>&1 &
        MLFLOW_PID=$!
        
        # TensorBoard
        TENSORBOARD_PORT=5001
        for port in 5001 5011 5021; do
            if check_port_availability $port; then
                TENSORBOARD_PORT=$port
                break
            fi
        done
        
        echo "üöÄ –ó–∞–ø—É—Å–∫ TensorBoard –Ω–∞ –ø–æ—Ä—Ç—É $TENSORBOARD_PORT..."
        nohup "$VENV_DIR/bin/tensorboard" --logdir=mlruns --host=0.0.0.0 --port=$TENSORBOARD_PORT > tensorboard.log 2>&1 &
        TENSORBOARD_PID=$!
        
        # Optuna Dashboard (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        if command -v optuna-dashboard >/dev/null 2>&1; then
            OPTUNA_PORT=5002
            for port in 5002 5012 5022; do
                if check_port_availability $port; then
                    OPTUNA_PORT=$port
                    break
                fi
            done
            
            echo "üöÄ –ó–∞–ø—É—Å–∫ Optuna Dashboard –Ω–∞ –ø–æ—Ä—Ç—É $OPTUNA_PORT..."
            nohup optuna-dashboard sqlite:///smart_tuner/optuna_studies.db --host 0.0.0.0 --port $OPTUNA_PORT > optuna.log 2>&1 &
            OPTUNA_PID=$!
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        sleep 3
        
        echo ""
        echo "üéØ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
        
        if kill -0 $MLFLOW_PID 2>/dev/null; then
            echo "‚úÖ MLflow UI: http://localhost:$MLFLOW_PORT"
        else
            echo "‚ùå MLflow UI –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        fi
        
        if kill -0 $TENSORBOARD_PID 2>/dev/null; then
            echo "‚úÖ TensorBoard: http://localhost:$TENSORBOARD_PORT"
        else
            echo "‚ùå TensorBoard –Ω–µ –∑–∞–ø—É—â–µ–Ω"
        fi
        
        if [ ! -z "$OPTUNA_PID" ] && kill -0 $OPTUNA_PID 2>/dev/null; then
            echo "‚úÖ Optuna Dashboard: http://localhost:$OPTUNA_PORT"
        else
            echo "‚ö†Ô∏è Optuna Dashboard –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        fi
        
        echo ""
        echo "üìù –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:"
        echo "   MLflow: tail -f mlflow.log"
        echo "   TensorBoard: tail -f tensorboard.log"
        echo ""
        echo "üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:"
        echo "   pkill -f 'mlflow ui'"
        echo "   pkill -f 'tensorboard'"
        echo "   pkill -f 'optuna-dashboard'"
        ;;
    4)
        echo "üëã –í—ã—Ö–æ–¥..."
        ;;
    *)
        echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1-4."
        ;;
esac

echo ""
echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"
echo ""
echo "üìö –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   source venv/bin/activate  # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è"
echo "   python smart_tuner_main.py  # –ó–∞–ø—É—Å–∫ —É–º–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"
echo "   tail -f smart_tuner_main.log  # –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤"
echo ""
echo "üîß –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º:"
echo "   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ñ–∞–π–ª–∞—Ö *.log"
echo "   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–æ—Ä—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã"
echo "   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å sudo –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞"
echo ""
echo "üéâ –£–¥–∞—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!"
"""

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
with open("improved_install.sh", "w", encoding="utf-8") as f:
    f.write(improved_install_script)

print("‚úÖ –°–æ–∑–¥–∞–Ω —É–ª—É—á—à–µ–Ω–Ω—ã–π install.sh —Å–∫—Ä–∏–ø—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏:")
print("üìÅ –§–∞–π–ª: improved_install.sh")
print()
print("üîß –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
print("1. ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ cmaes –¥–ª—è Optuna")
print("2. ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SQLite WAL —Ä–µ–∂–∏–º–∞") 
print("3. ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã device –≤ train.py")
print("4. ‚úÖ –£–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫")
print("5. ‚úÖ –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤")
print("6. ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
print("7. ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤")
print()
print("üöÄ –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
print("chmod +x improved_install.sh")
print("./improved_install.sh")