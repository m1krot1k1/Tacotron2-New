#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Audio Quality Enhancer –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ TTS
üéµ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–∏–π–Ω–æ–≥–æ –∑–≤—É–∫–∞

–û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è—Ö 2024-2025:
- Clip-TTS –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
- IndexTTS2 —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å  
- Bailing-TTS —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
- Very Attentive Tacotron —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
"""

import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np
import librosa
from typing import Dict, Any, Optional, Tuple
import logging


class AudioQualityEnhancer(nn.Module):
    """
    üéµ –°–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ –¥–ª—è TTS.
    
    –í–∫–ª—é—á–∞–µ—Ç:
    1. Noise Gate –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö —à—É–º–æ–≤
    2. Spectral Enhancement –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —á–µ—Ç–∫–æ—Å—Ç–∏
    3. Dynamic Range Control –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
    4. Artifact Detection –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    5. Quality Metrics –¥–ª—è –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
    """
    
    def __init__(self, sample_rate=22050, n_mel_channels=80):
        super(AudioQualityEnhancer, self).__init__()
        self.sample_rate = sample_rate
        self.n_mel_channels = n_mel_channels
        
        # Noise Gate –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        self.noise_gate_threshold = -60.0  # dB
        self.noise_gate_ratio = 0.1
        
        # Spectral Enhancement
        self.spectral_enhancer = SpectralEnhancer(n_mel_channels)
        
        # Dynamic Range Controller
        self.dynamic_controller = DynamicRangeController()
        
        # Artifact Detector
        self.artifact_detector = ArtifactDetector()
        
        # Quality Metrics Calculator
        self.quality_calculator = QualityMetricsCalculator()
        
        self.logger = logging.getLogger(__name__)
        
    def forward(self, mel_spectrogram: torch.Tensor, apply_enhancement=True) -> Tuple[torch.Tensor, Dict[str, float]]:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫ mel —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–µ.
        
        Args:
            mel_spectrogram: [B, n_mel_channels, T] mel —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞
            apply_enhancement: –ü—Ä–∏–º–µ–Ω—è—Ç—å –ª–∏ —É–ª—É—á—à–µ–Ω–∏—è
            
        Returns:
            enhanced_mel: –£–ª—É—á—à–µ–Ω–Ω–∞—è mel —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–∞
            quality_metrics: –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        """
        batch_size, n_mels, time_steps = mel_spectrogram.shape
        
        # 1. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∞—É–¥–∏–æ
        original_quality = self.quality_calculator(mel_spectrogram)
        
        if not apply_enhancement:
            return mel_spectrogram, original_quality
        
        # 2. Noise Gate - —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–≤—ã—Ö —à—É–º–æ–≤
        mel_gated = self.apply_noise_gate(mel_spectrogram)
        
        # 3. Spectral Enhancement - —É–ª—É—á—à–µ–Ω–∏–µ —á–µ—Ç–∫–æ—Å—Ç–∏
        mel_enhanced = self.spectral_enhancer(mel_gated)
        
        # 4. Dynamic Range Control - –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
        mel_controlled = self.dynamic_controller(mel_enhanced)
        
        # 5. Artifact Detection - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        artifact_score = self.artifact_detector(mel_controlled)
        
        # 6. –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        final_quality = self.quality_calculator(mel_controlled)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏
        combined_metrics = {
            'original_quality': original_quality['overall_quality'],
            'final_quality': final_quality['overall_quality'],
            'noise_reduction': original_quality['noise_level'] - final_quality['noise_level'],
            'spectral_clarity': final_quality['spectral_clarity'],
            'artifact_score': artifact_score,
            'enhancement_gain': final_quality['overall_quality'] - original_quality['overall_quality']
        }
        
        return mel_controlled, combined_metrics
    
    def apply_noise_gate(self, mel_spec: torch.Tensor) -> torch.Tensor:
        """
        üîá –ü—Ä–∏–º–µ–Ω—è–µ—Ç noise gate –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö —à—É–º–æ–≤.
        """
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dB
        mel_db = 20 * torch.log10(torch.clamp(mel_spec, min=1e-8))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º gate
        gate_mask = mel_db > self.noise_gate_threshold
        gated_mel = mel_spec * gate_mask.float()
        
        # –°–º—è–≥—á–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã
        gated_mel = gated_mel * self.noise_gate_ratio + mel_spec * (1 - self.noise_gate_ratio)
        
        return gated_mel
    
    def post_process_audio(self, audio_waveform: np.ndarray) -> np.ndarray:
        """
        üéµ –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.
        
        Args:
            audio_waveform: –ê—É–¥–∏–æ —Å–∏–≥–Ω–∞–ª
            
        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∞—É–¥–∏–æ —Å–∏–≥–Ω–∞–ª
        """
        # 1. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        audio_normalized = librosa.util.normalize(audio_waveform)
        
        # 2. –£–¥–∞–ª–µ–Ω–∏–µ DC offset
        audio_normalized = audio_normalized - np.mean(audio_normalized)
        
        # 3. Soft limiting –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–ª–∏–ø–ø–∏–Ω–≥–∞
        audio_limited = np.tanh(audio_normalized * 0.95) / np.tanh(0.95)
        
        # 4. Dithering –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏
        if audio_limited.dtype != np.float32:
            dither = np.random.normal(0, 1e-6, audio_limited.shape)
            audio_limited = audio_limited + dither
        
        return audio_limited


class SpectralEnhancer(nn.Module):
    """üéµ –£–ª—É—á—à–µ–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–π —á–µ—Ç–∫–æ—Å—Ç–∏."""
    
    def __init__(self, n_mel_channels):
        super(SpectralEnhancer, self).__init__()
        self.n_mel_channels = n_mel_channels
        
        # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
        self.low_freq_enhancer = nn.Conv1d(n_mel_channels//4, n_mel_channels//4, 3, padding=1)
        self.mid_freq_enhancer = nn.Conv1d(n_mel_channels//2, n_mel_channels//2, 3, padding=1)  
        self.high_freq_enhancer = nn.Conv1d(n_mel_channels//4, n_mel_channels//4, 3, padding=1)
        
    def forward(self, mel_spec):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ."""
        batch_size, n_mels, time_steps = mel_spec.shape
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
        low_freq = mel_spec[:, :n_mels//4, :]
        mid_freq = mel_spec[:, n_mels//4:3*n_mels//4, :]
        high_freq = mel_spec[:, 3*n_mels//4:, :]
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –∫ –∫–∞–∂–¥–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
        low_enhanced = self.low_freq_enhancer(low_freq)
        mid_enhanced = self.mid_freq_enhancer(mid_freq)
        high_enhanced = self.high_freq_enhancer(high_freq)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        enhanced = torch.cat([low_enhanced, mid_enhanced, high_enhanced], dim=1)
        
        # –°–º–µ—à–∏–≤–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
        alpha = 0.3  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–º–µ—à–∏–≤–∞–Ω–∏—è
        return alpha * enhanced + (1 - alpha) * mel_spec


class DynamicRangeController(nn.Module):
    """üéµ –ö–æ–Ω—Ç—Ä–æ–ª—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."""
    
    def __init__(self):
        super(DynamicRangeController, self).__init__()
        self.compression_ratio = 0.3
        self.threshold = 0.7
        
    def forward(self, mel_spec):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –º—è–≥–∫—É—é –∫–æ–º–ø—Ä–µ—Å—Å–∏—é –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏."""
        # –ú—è–≥–∫–∞—è –∫–æ–º–ø—Ä–µ—Å—Å–∏—è –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        compressed = torch.where(
            mel_spec > self.threshold,
            self.threshold + (mel_spec - self.threshold) * self.compression_ratio,
            mel_spec
        )
        
        return compressed


class ArtifactDetector(nn.Module):
    """üéµ –î–µ—Ç–µ–∫—Ç–æ—Ä –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤ –∞—É–¥–∏–æ."""
    
    def __init__(self):
        super(ArtifactDetector, self).__init__()
        
    def forward(self, mel_spec):
        """
        –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –≤ mel —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º–µ.
        
        Returns:
            artifact_score: 0.0 (–º–Ω–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤) - 1.0 (–±–µ–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤)
        """
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑–∫–∏—Ö —Å–∫–∞—á–∫–æ–≤ (clicks/pops)
        temporal_diff = torch.abs(mel_spec[:, :, 1:] - mel_spec[:, :, :-1])
        click_score = 1.0 - torch.clamp(temporal_diff.mean() * 10, 0, 1)
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        spectral_std = torch.std(mel_spec, dim=2)
        stability_score = 1.0 - torch.clamp(spectral_std.mean() * 2, 0, 1)
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        dynamic_range = torch.max(mel_spec) - torch.min(mel_spec)
        range_score = torch.clamp(dynamic_range / 10.0, 0, 1)
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –±–µ–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        artifact_score = (click_score + stability_score + range_score) / 3.0
        
        return artifact_score.item()


class QualityMetricsCalculator(nn.Module):
    """üéµ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ."""
    
    def __init__(self):
        super(QualityMetricsCalculator, self).__init__()
        
    def forward(self, mel_spec):
        """
        –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞.
        
        Returns:
            Dict —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
        """
        # 1. –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è —á–µ—Ç–∫–æ—Å—Ç—å
        spectral_clarity = self.calculate_spectral_clarity(mel_spec)
        
        # 2. –£—Ä–æ–≤–µ–Ω—å —à—É–º–∞
        noise_level = self.calculate_noise_level(mel_spec)
        
        # 3. –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        spectral_stability = self.calculate_spectral_stability(mel_spec)
        
        # 4. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
        dynamic_range = self.calculate_dynamic_range(mel_spec)
        
        # 5. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        overall_quality = (spectral_clarity + (1.0 - noise_level) + spectral_stability + dynamic_range) / 4.0
        
        return {
            'spectral_clarity': spectral_clarity.item(),
            'noise_level': noise_level.item(),
            'spectral_stability': spectral_stability.item(),
            'dynamic_range': dynamic_range.item(),
            'overall_quality': overall_quality.item()
        }
    
    def calculate_spectral_clarity(self, mel_spec):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —á–µ—Ç–∫–æ—Å—Ç—å —Å–ø–µ–∫—Ç—Ä–∞."""
        # –í—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –∫–∞–∫ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —á–µ—Ç–∫–æ—Å—Ç–∏
        high_freq_energy = mel_spec[:, mel_spec.size(1)//2:, :].mean()
        total_energy = mel_spec.mean() + 1e-8
        clarity = high_freq_energy / total_energy
        return torch.clamp(clarity, 0, 1)
    
    def calculate_noise_level(self, mel_spec):
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —à—É–º–∞."""
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –∫–∞–∫ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —à—É–º–∞
        min_energy = torch.quantile(mel_spec.view(-1), 0.1)
        max_energy = torch.max(mel_spec)
        noise_ratio = min_energy / (max_energy + 1e-8)
        return torch.clamp(noise_ratio, 0, 1)
    
    def calculate_spectral_stability(self, mel_spec):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–ø–µ–∫—Ç—Ä–∞."""
        temporal_variance = torch.var(mel_spec, dim=2).mean()
        stability = 1.0 / (1.0 + temporal_variance)
        return torch.clamp(stability, 0, 1)
    
    def calculate_dynamic_range(self, mel_spec):
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω."""
        range_db = 20 * torch.log10(torch.max(mel_spec) / (torch.min(mel_spec) + 1e-8))
        normalized_range = torch.clamp(range_db / 60.0, 0, 1)  # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 60 dB
        return normalized_range


class InferenceQualityController:
    """
    üéµ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è inference —Ä–µ–∂–∏–º–∞.
    
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç:
    - –†–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    - –î–µ—Ç–µ–∫—Ü–∏—é –ø—Ä–æ–±–ª–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    """
    
    def __init__(self):
        self.quality_history = []
        self.quality_threshold = 0.6
        self.enhancer = AudioQualityEnhancer()
        
    def evaluate_generation_quality(self, mel_outputs, gate_outputs, alignments):
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ.
        
        Returns:
            quality_report: –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ
        """
        # 1. –ê–Ω–∞–ª–∏–∑ mel —Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã
        mel_quality = self.enhancer.quality_calculator(mel_outputs)
        
        # 2. –ê–Ω–∞–ª–∏–∑ attention alignment
        alignment_quality = self.analyze_alignment_quality(alignments)
        
        # 3. –ê–Ω–∞–ª–∏–∑ gate outputs
        gate_quality = self.analyze_gate_quality(gate_outputs)
        
        # 4. –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        overall_quality = (
            mel_quality['overall_quality'] * 0.5 +
            alignment_quality * 0.3 +
            gate_quality * 0.2
        )
        
        quality_report = {
            'overall_quality': overall_quality,
            'mel_quality': mel_quality,
            'alignment_quality': alignment_quality,
            'gate_quality': gate_quality,
            'recommendation': self.get_quality_recommendation(overall_quality)
        }
        
        self.quality_history.append(overall_quality)
        return quality_report
    
    def analyze_alignment_quality(self, alignments):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ attention alignment."""
        if alignments is None or len(alignments) == 0:
            return 0.0
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ tensor –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if isinstance(alignments, list):
            alignments = torch.stack(alignments, dim=1)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        batch_size, seq_len, text_len = alignments.shape
        
        diagonality_scores = []
        for b in range(batch_size):
            alignment = alignments[b]
            
            # –°–æ–∑–¥–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—É—é –¥–∏–∞–≥–æ–Ω–∞–ª—å
            ideal_diagonal = torch.eye(min(seq_len, text_len), device=alignment.device)
            if seq_len != text_len:
                # –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –¥–ª–∏–Ω
                ideal_diagonal = F.interpolate(
                    ideal_diagonal.unsqueeze(0).unsqueeze(0),
                    size=(seq_len, text_len),
                    mode='bilinear',
                    align_corners=False
                ).squeeze()
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å –¥–∏–∞–≥–æ–Ω–∞–ª—å—é
            correlation = F.cosine_similarity(
                alignment.view(-1),
                ideal_diagonal.view(-1),
                dim=0
            )
            diagonality_scores.append(correlation)
        
        return torch.stack(diagonality_scores).mean().item()
    
    def analyze_gate_quality(self, gate_outputs):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ gate outputs."""
        if gate_outputs is None:
            return 0.0
            
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ tensor
        if isinstance(gate_outputs, list):
            gate_outputs = torch.cat(gate_outputs, dim=0)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º sigmoid
        gate_probs = torch.sigmoid(gate_outputs)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã: –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–∏–∑–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π,
        # –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –≤—ã—Å–æ–∫–∏–º–∏
        seq_len = gate_probs.size(0)
        expected_pattern = torch.linspace(0.1, 0.9, seq_len, device=gate_probs.device)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É
        correlation = F.cosine_similarity(
            gate_probs.view(-1),
            expected_pattern.view(-1),
            dim=0
        )
        
        return max(0.0, correlation.item())
    
    def get_quality_recommendation(self, quality_score):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞."""
        if quality_score >= 0.8:
            return "–û—Ç–ª–∏—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
        elif quality_score >= 0.6:
            return "–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è"
        elif quality_score >= 0.4:
            return "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - —Ç—Ä–µ–±—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è"
        else:
            return "–ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è"


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
__all__ = ['AudioQualityEnhancer', 'InferenceQualityController'] 