#!/usr/bin/env python3
"""
üéß –ú–æ–¥—É–ª—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –≤ TTS pipeline
–ê–≤—Ç–æ—Ä: AI Assistant –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ Intelligent TTS Training Pipeline

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è
–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞ –±–µ–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤.
"""

import torch
import torch.nn.functional as F
import numpy as np
import librosa
from scipy import signal
from typing import Dict, Tuple, Optional
import logging

logger = logging.getLogger(__name__)


class AudioQualityEnhancer:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, 
                 sample_rate: int = 22050,
                 n_mel_channels: int = 80,
                 quality_threshold: float = 0.7):
        self.sample_rate = sample_rate
        self.n_mel_channels = n_mel_channels
        self.quality_threshold = quality_threshold
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
        self.noise_gate_threshold = -40  # dB
        self.dynamic_range_target = 60   # dB
        
    def enhance_mel_spectrogram(self, mel_spec: torch.Tensor) -> torch.Tensor:
        """
        üéµ –£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –º–µ–ª-—Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã
        """
        # 1. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        mel_spec = self._normalize_dynamic_range(mel_spec)
        
        # 2. –ü–æ–¥–∞–≤–ª–µ–Ω–∏–µ —à—É–º–∞ –≤ —Ç–∏—Ö–∏—Ö —É—á–∞—Å—Ç–∫–∞—Ö
        mel_spec = self._apply_noise_gate(mel_spec)
        
        # 3. –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —Ä–µ–∑–∫–∏—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
        mel_spec = self._smooth_transitions(mel_spec)
        
        # 4. –£–ª—É—á—à–µ–Ω–∏–µ —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–æ–π —á–µ—Ç–∫–æ—Å—Ç–∏
        mel_spec = self._enhance_spectral_clarity(mel_spec)
        
        return mel_spec
    
    def _normalize_dynamic_range(self, mel_spec: torch.Tensor) -> torch.Tensor:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω"""
        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
        mel_min = torch.min(mel_spec)
        mel_max = torch.max(mel_spec)
        current_range = mel_max - mel_min
        
        if current_range > 0:
            # –¶–µ–ª–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            target_min = -8.0
            target_max = 2.0
            target_range = target_max - target_min
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            mel_spec = (mel_spec - mel_min) / current_range * target_range + target_min
        
        return mel_spec
    
    def _apply_noise_gate(self, mel_spec: torch.Tensor) -> torch.Tensor:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç noise gate –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–≥–æ —à—É–º–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≥ –∫–∞–∫ –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å –æ—Ç –æ–±—â–µ–π —ç–Ω–µ—Ä–≥–∏–∏
        energy = torch.sum(mel_spec, dim=1, keepdim=True)
        threshold = torch.quantile(energy, 0.1)  # 10-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è noise gate
        gate_mask = (energy > threshold).float()
        
        # –ü–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥ –≤–º–µ—Å—Ç–æ —Ä–µ–∑–∫–æ–≥–æ –æ—Ç—Å–µ—á–µ–Ω–∏—è
        smooth_mask = torch.clamp(gate_mask + 0.1, 0, 1)
        
        return mel_spec * smooth_mask
    
    def _smooth_transitions(self, mel_spec: torch.Tensor) -> torch.Tensor:
        """–°–≥–ª–∞–∂–∏–≤–∞–µ—Ç —Ä–µ–∑–∫–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏"""
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–µ–≥–∫–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ—Å–∏
        kernel_size = 3
        kernel = torch.ones(1, 1, kernel_size) / kernel_size
        kernel = kernel.to(mel_spec.device)
        
        # –ü–∞–¥–¥–∏–Ω–≥ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        padded = F.pad(mel_spec.unsqueeze(0), (kernel_size//2, kernel_size//2), mode='reflect')
        
        smoothed = F.conv1d(padded, kernel)
        
        return smoothed.squeeze(0)
    
    def _enhance_spectral_clarity(self, mel_spec: torch.Tensor) -> torch.Tensor:
        """–£–ª—É—á—à–∞–µ—Ç —Å–ø–µ–∫—Ç—Ä–∞–ª—å–Ω—É—é —á–µ—Ç–∫–æ—Å—Ç—å"""
        # –ù–µ–±–æ–ª—å—à–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π —á–µ—Ç–∫–æ—Å—Ç–∏
        enhanced = mel_spec * 1.02
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–ª–∏–ø–ø–∏–Ω–≥–∞
        enhanced = torch.clamp(enhanced, -10.0, 4.0)
        
        return enhanced
    
    def assess_mel_quality(self, mel_spec: torch.Tensor) -> Dict[str, float]:
        """
        üìä –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –º–µ–ª-—Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã
        """
        quality_metrics = {}
        
        # 1. –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
        mel_min = torch.min(mel_spec)
        mel_max = torch.max(mel_spec)
        dynamic_range = (mel_max - mel_min).item()
        quality_metrics['dynamic_range'] = min(1.0, dynamic_range / 12.0)
        
        # 2. –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å
        energy_per_frame = torch.sum(mel_spec, dim=0)
        energy_variance = torch.var(energy_per_frame).item()
        quality_metrics['spectral_density'] = min(1.0, energy_variance / 100.0)
        
        # 3. –û—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª/—à—É–º (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
        signal_energy = torch.mean(energy_per_frame[energy_per_frame > torch.quantile(energy_per_frame, 0.5)])
        noise_energy = torch.mean(energy_per_frame[energy_per_frame <= torch.quantile(energy_per_frame, 0.1)])
        snr = (signal_energy / (noise_energy + 1e-8)).item()
        quality_metrics['snr_estimate'] = min(1.0, snr / 20.0)
        
        # 4. –°–ø–µ–∫—Ç—Ä–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
        frame_diff = torch.diff(energy_per_frame)
        stability = 1.0 / (1.0 + torch.std(frame_diff).item())
        quality_metrics['spectral_stability'] = stability
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        overall_quality = np.mean(list(quality_metrics.values()))
        quality_metrics['overall_quality'] = overall_quality
        
        return quality_metrics


class InferenceQualityController:
    """–ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞"""
    
    def __init__(self):
        self.quality_enhancer = AudioQualityEnhancer()
        
    def enhance_inference_output(self, 
                                mel_outputs: torch.Tensor,
                                gate_outputs: torch.Tensor,
                                alignments: torch.Tensor) -> Tuple[torch.Tensor, Dict[str, float]]:
        """
        üéØ –£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
        """
        # 1. –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–µ–ª-—Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º—ã
        enhanced_mel = self.quality_enhancer.enhance_mel_spectrogram(mel_outputs)
        
        # 2. –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        quality_metrics = self.quality_enhancer.assess_mel_quality(enhanced_mel)
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ attention quality
        attention_quality = self._assess_attention_quality(alignments)
        quality_metrics.update(attention_quality)
        
        # 4. –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ gate quality
        gate_quality = self._assess_gate_quality(gate_outputs)
        quality_metrics.update(gate_quality)
        
        return enhanced_mel, quality_metrics
    
    def _assess_attention_quality(self, alignments: torch.Tensor) -> Dict[str, float]:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ attention alignment"""
        if alignments.dim() != 3:
            return {'attention_quality': 0.0}
            
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ –±–∞—Ç—á–∞
        alignment = alignments[0]  # [encoder_len, decoder_len]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        diagonality = self._calculate_diagonality(alignment)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫—É (–Ω–µ —Å–ª–∏—à–∫–æ–º —Ä–∞–∑–º—ã—Ç–∞—è)
        focus = self._calculate_focus(alignment)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å
        monotonicity = self._calculate_monotonicity(alignment)
        
        attention_quality = (diagonality + focus + monotonicity) / 3.0
        
        return {
            'attention_quality': attention_quality,
            'attention_diagonality': diagonality,
            'attention_focus': focus,
            'attention_monotonicity': monotonicity
        }
    
    def _calculate_diagonality(self, alignment: torch.Tensor) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å alignment –º–∞—Ç—Ä–∏—Ü—ã"""
        encoder_len, decoder_len = alignment.shape
        
        # –°–æ–∑–¥–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—É—é –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
        ideal_diag = torch.zeros_like(alignment)
        for i in range(decoder_len):
            encoder_pos = int(i * encoder_len / decoder_len)
            if encoder_pos < encoder_len:
                ideal_diag[encoder_pos, i] = 1.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é —Å –∏–¥–µ–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª—å—é
        correlation = F.cosine_similarity(
            alignment.flatten().unsqueeze(0),
            ideal_diag.flatten().unsqueeze(0)
        )
        
        return max(0.0, correlation.item())
    
    def _calculate_focus(self, alignment: torch.Tensor) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫—É attention"""
        # –≠–Ω—Ç—Ä–æ–ø–∏—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (decoder —à–∞–≥–∞)
        entropies = []
        for i in range(alignment.shape[1]):
            col = alignment[:, i]
            col_normalized = col / (col.sum() + 1e-8)
            # –í—ã—á–∏—Å–ª—è–µ–º —ç–Ω—Ç—Ä–æ–ø–∏—é
            entropy = -torch.sum(col_normalized * torch.log(col_normalized + 1e-8))
            entropies.append(entropy.item())
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —ç–Ω—Ç—Ä–æ–ø–∏—é (0 = –ø–æ–ª–Ω–∞—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞, log(len) = —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
        max_entropy = np.log(alignment.shape[0])
        avg_entropy = np.mean(entropies)
        focus = max(0.0, 1.0 - avg_entropy / max_entropy)
        
        return focus
    
    def _calculate_monotonicity(self, alignment: torch.Tensor) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å alignment"""
        # –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫ –≤ –∫–∞–∂–¥–æ–º —Å—Ç–æ–ª–±—Ü–µ
        peaks = torch.argmax(alignment, dim=0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∏–∫–æ–≤
        monotonic_increases = 0
        total_transitions = len(peaks) - 1
        
        if total_transitions == 0:
            return 1.0
            
        for i in range(total_transitions):
            if peaks[i+1] >= peaks[i]:
                monotonic_increases += 1
        
        monotonicity = monotonic_increases / total_transitions
        return monotonicity
    
    def _assess_gate_quality(self, gate_outputs: torch.Tensor) -> Dict[str, float]:
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ gate outputs"""
        if gate_outputs.dim() == 0:
            return {'gate_quality': 0.0}
            
        # –ü—Ä–∏–º–µ–Ω—è–µ–º sigmoid –∫ gate outputs
        gate_probs = torch.sigmoid(gate_outputs.squeeze())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —á–µ—Ç–∫–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        max_gate = torch.max(gate_probs).item()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç (–¥–æ–ª–∂–µ–Ω —Ä–µ–∑–∫–æ –≤–æ–∑—Ä–∞—Å—Ç–∞—Ç—å –∫ –∫–æ–Ω—Ü—É)
        if len(gate_probs) > 10:
            early_mean = torch.mean(gate_probs[:len(gate_probs)//2]).item()
            late_mean = torch.mean(gate_probs[len(gate_probs)//2:]).item()
            gate_gradient = late_mean - early_mean
        else:
            gate_gradient = 0.0
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ gate
        gate_quality = min(1.0, (max_gate + max(0.0, gate_gradient)) / 2.0)
        
        return {
            'gate_quality': gate_quality,
            'gate_max_prob': max_gate,
            'gate_gradient': gate_gradient
        }


# –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
__all__ = ['AudioQualityEnhancer', 'InferenceQualityController'] 