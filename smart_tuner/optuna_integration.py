#!/usr/bin/env python3
"""
üéØ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Optuna HPO —Å train.py
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è Tacotron2
"""

import optuna
import yaml
import logging
import os
import sys
from typing import Dict, Any, Optional, Callable
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from smart_tuner.optimization_engine import OptimizationEngine
from hparams import create_hparams


class OptunaTrainerIntegration:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Optuna HPO —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –æ–±—É—á–µ–Ω–∏—è Tacotron2
    """
    
    def __init__(self, config_path: str = "smart_tuner/config.yaml"):
        self.config_path = config_path
        self.optimization_engine = OptimizationEngine(config_path)
        self.logger = logging.getLogger(__name__)
        
        # –ò—Å—Ç–æ—Ä–∏—è trials
        self.trial_history = []
        self.best_trial = None
        
    def create_objective_function(self, 
                                output_directory: str,
                                log_directory: str,
                                n_gpus: int = 1,
                                rank: int = 0,
                                group_name: str = "group_name") -> Callable:
        """
        –°–æ–∑–¥–∞–µ—Ç objective —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è Optuna
        
        Args:
            output_directory: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤
            log_directory: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
            n_gpus: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU
            rank: –†–∞–Ω–≥ —Ç–µ–∫—É—â–µ–≥–æ GPU
            group_name: –ò–º—è –≥—Ä—É–ø–ø—ã –¥–ª—è distributed –æ–±—É—á–µ–Ω–∏—è
            
        Returns:
            Objective —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Optuna
        """
        
        def objective(trial: optuna.Trial) -> float:
            """
            Objective —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            """
            try:
                # –ü–æ–ª—É—á–∞–µ–º –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç Optuna
                suggested_params = self.optimization_engine.suggest_hyperparameters(trial)
                
                # –°–æ–∑–¥–∞–µ–º hparams —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                hparams = create_hparams()
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                for param_name, param_value in suggested_params.items():
                    if hasattr(hparams, param_name):
                        setattr(hparams, param_name, param_value)
                
                # –õ–æ–≥–∏—Ä—É–µ–º trial
                trial_info = {
                    'trial_number': trial.number,
                    'params': suggested_params,
                    'timestamp': optuna.trial.TrialState.RUNNING
                }
                self.trial_history.append(trial_info)
                
                self.logger.info(f"üéØ Trial {trial.number}: –ó–∞–ø—É—Å–∫ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {suggested_params}")
                
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º train —Ñ—É–Ω–∫—Ü–∏—é
                from train import train
                
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ trial
                trial_output_dir = os.path.join(output_directory, f"trial_{trial.number}")
                trial_log_dir = os.path.join(log_directory, f"trial_{trial.number}")
                
                os.makedirs(trial_output_dir, exist_ok=True)
                os.makedirs(trial_log_dir, exist_ok=True)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º callback –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ—Ç—Ä–∏–∫ –≤ Optuna
                metrics_callback = self._create_metrics_callback(trial)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ
                final_metrics = train(
                    output_directory=trial_output_dir,
                    log_directory=trial_log_dir,
                    checkpoint_path=None,
                    warm_start=False,
                    ignore_mmi_layers=False,
                    ignore_gst_layers=False,
                    ignore_tsgst_layers=False,
                    n_gpus=n_gpus,
                    rank=rank,
                    group_name=group_name,
                    hparams=hparams,
                    smart_tuner_trial=trial,
                    smart_tuner_logger=metrics_callback,
                    tensorboard_writer=None,
                    telegram_monitor=None
                )
                
                # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ objective
                if final_metrics:
                    objective_value = self.optimization_engine.calculate_composite_tts_objective(final_metrics)
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π trial
                    if self.best_trial is None or objective_value < self.best_trial['value']:
                        self.best_trial = {
                            'trial_number': trial.number,
                            'params': suggested_params,
                            'metrics': final_metrics,
                            'value': objective_value
                        }
                    
                    self.logger.info(f"‚úÖ Trial {trial.number} –∑–∞–≤–µ—Ä—à–µ–Ω. Objective: {objective_value:.4f}")
                    return objective_value
                else:
                    # –ï—Å–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –Ω–µ –≤–µ—Ä–Ω—É–ª–æ –º–µ—Ç—Ä–∏–∫–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–ª–æ—Ö–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    self.logger.warning(f"‚ö†Ô∏è Trial {trial.number}: –ù–µ—Ç –º–µ—Ç—Ä–∏–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–ª–æ—Ö–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
                    return float('inf')
                    
            except Exception as e:
                self.logger.error(f"‚ùå Trial {trial.number} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
                return float('inf')
        
        return objective
    
    def _create_metrics_callback(self, trial: optuna.Trial) -> Callable:
        """
        –°–æ–∑–¥–∞–µ—Ç callback –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤ Optuna
        """
        def callback(step: int, metrics: Dict[str, float]):
            try:
                # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ objective
                if metrics:
                    intermediate_value = self.optimization_engine.calculate_composite_tts_objective(metrics)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Optuna
                    trial.report(intermediate_value, step)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å trial
                    if trial.should_prune():
                        self.logger.info(f"‚úÇÔ∏è Trial {trial.number} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —à–∞–≥–µ {step}")
                        raise optuna.TrialPruned()
                        
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ metrics callback: {e}")
        
        return callback
    
    def run_optimization(self, 
                        output_directory: str,
                        log_directory: str,
                        n_trials: int = 10,
                        n_gpus: int = 1,
                        timeout: int = None) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        
        Args:
            output_directory: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            log_directory: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤
            n_trials: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ trials
            n_gpus: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU
            timeout: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        """
        try:
            self.logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {n_trials} trials")
            
            # –°–æ–∑–¥–∞–µ–º study
            study_name = f"tacotron2_optimization_{optuna.trial.TrialState.RUNNING}"
            study = self.optimization_engine.create_study_with_retry(
                study_name=study_name,
                direction='minimize'  # –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–µ–º loss
            )
            
            # –°–æ–∑–¥–∞–µ–º objective —Ñ—É–Ω–∫—Ü–∏—é
            objective = self.create_objective_function(
                output_directory=output_directory,
                log_directory=log_directory,
                n_gpus=n_gpus
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            study.optimize(
                objective,
                n_trials=n_trials,
                timeout=timeout,
                callbacks=[
                    self.optimization_engine._tts_progress_callback,
                    self.optimization_engine._tts_early_stop_callback
                ]
            )
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            results = self._analyze_optimization_results(study)
            
            self.logger.info(f"üéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –õ—É—á—à–∏–π trial: {results['best_trial_number']}")
            
            return results
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: {e}")
            raise
    
    def _analyze_optimization_results(self, study: optuna.Study) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        """
        best_trial = study.best_trial
        
        results = {
            'best_trial_number': best_trial.number,
            'best_params': best_trial.params,
            'best_value': best_trial.value,
            'n_trials': len(study.trials),
            'n_completed_trials': len([t for t in study.trials if t.state == optuna.trial.TrialState.COMPLETE]),
            'n_pruned_trials': len([t for t in study.trials if t.state == optuna.trial.TrialState.PRUNED]),
            'optimization_history': self.trial_history,
            'study_statistics': self.optimization_engine.get_study_statistics()
        }
        
        return results
    
    def save_optimization_results(self, results: Dict[str, Any], output_path: str):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        """
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                yaml.dump(results, f, default_flow_style=False, allow_unicode=True)
            
            self.logger.info(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """
    import argparse
    
    parser = argparse.ArgumentParser(description='Optuna HPO –¥–ª—è Tacotron2')
    parser.add_argument('--output-dir', type=str, default='output/optimization',
                       help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    parser.add_argument('--log-dir', type=str, default='logs/optimization',
                       help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤')
    parser.add_argument('--n-trials', type=int, default=10,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ trials')
    parser.add_argument('--n-gpus', type=int, default=1,
                       help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ GPU')
    parser.add_argument('--timeout', type=int, default=None,
                       help='–¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö')
    parser.add_argument('--config', type=str, default='smart_tuner/config.yaml',
                       help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    integration = OptunaTrainerIntegration(args.config)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    results = integration.run_optimization(
        output_directory=args.output_dir,
        log_directory=args.log_dir,
        n_trials=args.n_trials,
        n_gpus=args.n_gpus,
        timeout=args.timeout
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_path = os.path.join(args.output_dir, 'optimization_results.yaml')
    integration.save_optimization_results(results, results_path)
    
    print(f"\nüéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –õ—É—á—à–∏–π trial: {results['best_trial_number']}")
    print(f"üéØ –õ—É—á—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {results['best_value']:.4f}")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_path}")


if __name__ == "__main__":
    main() 