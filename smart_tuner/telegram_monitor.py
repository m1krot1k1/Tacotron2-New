#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram Monitor –¥–ª—è Smart Tuner TTS
–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π alignment –∫–∞–∂–¥—ã–µ 1000 —à–∞–≥–æ–≤ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
"""

import os
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Agg')
import torch
import requests
import yaml
import logging
import io
from datetime import datetime
from typing import Dict, Any, Optional, List
from pathlib import Path

class TelegramMonitor:
    """
    Telegram –º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ attachment –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 1000 —à–∞–≥–æ–≤.
    """
    
    def __init__(self, config_path: str = "smart_tuner/config.yaml"):
        with open(config_path, 'r', encoding='utf-8') as f:
            self.config = yaml.safe_load(f)
            
        self.logger = logging.getLogger(__name__)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
        telegram_config = self.config.get('telegram', {})
        self.bot_token = telegram_config.get('bot_token')
        self.chat_id = telegram_config.get('chat_id') 
        self.enabled = telegram_config.get('enabled', False)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.notification_interval = 100  # –ß–∞—â–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        self.last_notification_step = 0
        self.training_history = []
        
        plt.style.use('default')
        self.figure_size = (12, 8)
        self.dpi = 150
        
        self.logger.info("üì± Telegram Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    def send_auto_improvement_notification(self, improvement_type: str, 
                                         old_params: Dict[str, Any], 
                                         new_params: Dict[str, Any], 
                                         reason: str,
                                         step: int) -> bool:
        """
        ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —É–ª—É—á—à–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã.
        
        Args:
            improvement_type: –¢–∏–ø —É–ª—É—á—à–µ–Ω–∏—è (learning_rate, guided_attention, etc.)
            old_params: –°—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            new_params: –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã  
            reason: –ü—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            step: –¢–µ–∫—É—â–∏–π —à–∞–≥ –æ–±—É—á–µ–Ω–∏—è
        """
        if not self.enabled:
            return False
            
        try:
            message = self._create_improvement_message(
                improvement_type, old_params, new_params, reason, step
            )
            
            result = self._send_text_message(message)
            if result:
                self.logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–ª—É—á—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {improvement_type}")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É–ª—É—á—à–µ–Ω–∏–∏: {e}")
            return False
    
    def send_problem_detection_alert(self, problems: List[Dict[str, Any]], step: int) -> bool:
        """
        üö® –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.
        """
        if not self.enabled:
            return False
            
        try:
            message = self._create_problem_alert_message(problems, step)
            result = self._send_text_message(message)
            
            if result:
                self.logger.info(f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def send_training_phase_notification(self, old_phase: str, new_phase: str, 
                                       step: int, achievements: List[str]) -> bool:
        """
        üéØ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —Ñ–∞–∑–∞–º–∏ –æ–±—É—á–µ–Ω–∏—è.
        """
        if not self.enabled:
            return False
            
        try:
            message = self._create_phase_transition_message(old_phase, new_phase, step, achievements)
            result = self._send_text_message(message)
            
            if result:
                self.logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ñ–∞–∑—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {old_phase} ‚Üí {new_phase}")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ñ–∞–∑–µ: {e}")
            return False
    
    def send_critical_alert(self, alert_type: str, details: Dict[str, Any], 
                          recommendations: List[str] = None) -> bool:
        """
        üö® –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö.
        
        Args:
            alert_type: –¢–∏–ø –∞–ª–µ—Ä—Ç–∞
            details: –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
            recommendations: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """
        if not self.enabled:
            return False
            
        try:
            message = self._create_critical_alert_message(alert_type, details, recommendations)
            result = self._send_text_message(message)
            
            if result:
                self.logger.info(f"‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {alert_type}")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def send_restart_notification(self, reason: str, step: int) -> bool:
        """
        üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –æ–±—É—á–µ–Ω–∏—è.
        
        Args:
            reason: –ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
            step: –®–∞–≥ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–µ–ª –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        """
        if not self.enabled:
            return False
            
        try:
            message = self._create_restart_message(reason, step)
            result = self._send_text_message(message)
            
            if result:
                self.logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
            return False
    
    def send_detailed_telegram_report(self, step: int, metrics: Dict[str, Any], 
                                    actions_taken: List[str], 
                                    gradient_norm: float = None,
                                    attention_diagonality: float = None) -> bool:
        """
        üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏.
        
        Args:
            step: –¢–µ–∫—É—â–∏–π —à–∞–≥ –æ–±—É—á–µ–Ω–∏—è
            metrics: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
            actions_taken: –°–ø–∏—Å–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            gradient_norm: –ù–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
            attention_diagonality: –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å attention
        """
        if not self.enabled:
            return False
            
        try:
            message = f"ü§ñ **Smart Tuner V2 - –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç**\n\n"
            message += f"üìç **–®–∞–≥:** {step:,}\n"
            message += f"üïê **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}\n\n"
            
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
            if gradient_norm is not None:
                status_emoji = "‚úÖ" if gradient_norm < 10.0 else "‚ö†Ô∏è" if gradient_norm < 100.0 else "üö®"
                message += f"{status_emoji} **Gradient Norm:** {gradient_norm:.2f}\n"
            
            if attention_diagonality is not None:
                status_emoji = "‚úÖ" if attention_diagonality > 0.7 else "‚ö†Ô∏è" if attention_diagonality > 0.3 else "üö®"
                message += f"{status_emoji} **Attention Diagonality:** {attention_diagonality:.3f}\n"
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if 'loss' in metrics:
                message += f"üìâ **Loss:** {metrics['loss']:.4f}\n"
            
            if 'learning_rate' in metrics:
                message += f"üìà **Learning Rate:** {metrics['learning_rate']:.2e}\n"
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            if actions_taken:
                message += f"\nüõ†Ô∏è **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**\n"
                for i, action in enumerate(actions_taken, 1):
                    message += f"  {i}. {action}\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫
            recommendations = []
            if gradient_norm and gradient_norm > 100.0:
                recommendations.append("–°–Ω–∏–∑–∏—Ç—å learning rate")
                recommendations.append("–£—Å–∏–ª–∏—Ç—å gradient clipping")
            
            if attention_diagonality and attention_diagonality < 0.3:
                recommendations.append("–£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Å guided attention loss")
                recommendations.append("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å alignment diagnostics")
            
            if recommendations:
                message += f"\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
                for rec in recommendations:
                    message += f"  ‚Ä¢ {rec}\n"
            
            # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
            message += f"\nüéØ **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:** "
            if gradient_norm and gradient_norm < 10.0 and attention_diagonality and attention_diagonality > 0.7:
                message += "‚úÖ **–°–¢–ê–ë–ò–õ–¨–ù–ê**"
            elif gradient_norm and gradient_norm > 100.0 or (attention_diagonality and attention_diagonality < 0.1):
                message += "üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø**"
            else:
                message += "‚ö†Ô∏è **–¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø**"
            
            result = self._send_text_message(message)
            
            if result:
                self.logger.info(f"‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —à–∞–≥–µ {step}")
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            return False
        
    def should_send_notification(self, current_step: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
        if not self.enabled:
            return False
            
        # –†–∞–∑—Ä–µ—à–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ —Å–∞–º–æ–º –ø–µ—Ä–≤–æ–º —à–∞–≥–µ (0) –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞
        if current_step == 0 and self.last_notification_step == 0:
            return True

        return (current_step - self.last_notification_step) >= self.notification_interval
    
    def send_training_update(self, step: int, metrics: Dict[str, Any],
                           attention_weights: Optional[torch.Tensor] = None,
                           gate_outputs: Optional[torch.Tensor] = None,
                           smart_tuner_decisions: Optional[Dict[str, Any]] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã."""
        if not self.should_send_notification(step):
            return False
        
        try:
            # –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö
            analysis = self._analyze_step(step, metrics, attention_weights, gate_outputs)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ—à–µ–Ω–∏—è—Ö Smart Tuner
            if smart_tuner_decisions:
                analysis['smart_tuner_decisions'] = smart_tuner_decisions
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = self._create_message(analysis)
            self._send_text_message(message)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if attention_weights is not None:
                attention_image = self._create_attention_plot(attention_weights, step)
                if attention_image:
                    self._send_image(attention_image, f"attention_{step}.png",
                                   f"üéØ Attention Matrix - –®–∞–≥ {step}")
            
            # –ì—Ä–∞—Ñ–∏–∫ –º–µ—Ç—Ä–∏–∫
            metrics_image = self._create_metrics_plot(step)
            if metrics_image:
                self._send_image(metrics_image, f"metrics_{step}.png",
                               f"üìä –ú–µ—Ç—Ä–∏–∫–∏ - –®–∞–≥ {step}")
            
            self.last_notification_step = step
            self.logger.info(f"‚úÖ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —à–∞–≥–∞ {step}")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def _analyze_step(self, step: int, metrics: Dict[str, Any],
                     attention_weights: Optional[torch.Tensor] = None,
                     gate_outputs: Optional[torch.Tensor] = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —à–∞–≥–∞."""
        analysis = {
            'step': step,
            'metrics': metrics,
            'quality_score': 0.0,
            'phase': self._get_phase(step),
            'issues': [],
            'recommendations': []
        }
        
        # –ê–Ω–∞–ª–∏–∑ attention
        if attention_weights is not None:
            attention_analysis = self._analyze_attention(attention_weights)
            analysis['attention'] = attention_analysis
            analysis['quality_score'] += attention_analysis.get('diagonality', 0) * 0.5
        
        # –ê–Ω–∞–ª–∏–∑ gate
        if gate_outputs is not None:
            gate_analysis = self._analyze_gate(gate_outputs)
            analysis['gate'] = gate_analysis
            analysis['quality_score'] += gate_analysis.get('accuracy', 0) * 0.3
        
        # –ê–Ω–∞–ª–∏–∑ loss
        loss_value = metrics.get('loss', 0)
        analysis['quality_score'] += max(0, 1 - loss_value) * 0.2
        
        # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        analysis['issues'] = self._detect_issues(analysis)
        analysis['recommendations'] = self._get_recommendations(analysis)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.training_history.append(analysis)
        
        return analysis
    
    def _create_message(self, analysis: Dict[str, Any]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è."""
        step = analysis['step']
        phase = analysis['phase']
        quality = analysis['quality_score']
        
        # Emoji –∫–∞—á–µ—Å—Ç–≤–∞
        quality_emoji = "üî•" if quality > 0.8 else "‚úÖ" if quality > 0.6 else "‚ö†Ô∏è" if quality > 0.4 else "‚ùå"
        
        message = f"üß† Smart Tuner - –û—Ç—á–µ—Ç –û–±—É—á–µ–Ω–∏—è\n\n"
        message += f"üìç –®–∞–≥: {step:,}\n"
        message += f"üé≠ –§–∞–∑–∞: {phase}\n"
        message += f"{quality_emoji} –ö–∞—á–µ—Å—Ç–≤–æ: {quality:.1%}\n\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        metrics = analysis['metrics']
        if 'loss' in metrics:
            message += f"üìâ Loss: {metrics['loss']:.4f}\n"
        
        # –ê–Ω–∞–ª–∏–∑ attention
        attention = analysis.get('attention', {})
        if attention:
            diag = attention.get('diagonality', 0)
            message += f"üéØ Attention –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {diag:.1%}\n"
            
            if diag < 0.3:
                message += f"  ‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–∑–∫–∞—è! –ü—Ä–æ–±–ª–µ–º—ã —Å alignment\n"
            elif diag > 0.7:
                message += f"  ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å!\n"
        
        # ü§ñ –†–ï–®–ï–ù–ò–Ø SMART TUNER
        smart_decisions = analysis.get('smart_tuner_decisions', {})
        if smart_decisions:
            message += f"\nü§ñ –£–ú–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–†–ò–ù–Ø–õ–ê –†–ï–®–ï–ù–ò–Ø:\n"
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏—è –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            param_changes = smart_decisions.get('parameter_changes', {})
            if param_changes:
                message += f"‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:\n"
                for param, change_info in param_changes.items():
                    old_val = change_info.get('old_value', 'N/A')
                    new_val = change_info.get('new_value', 'N/A')
                    reason = change_info.get('reason', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è')
                    message += f"  ‚Ä¢ {param}: {old_val} ‚Üí {new_val}\n"
                    message += f"    üí° –ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
            
            # –ü–†–ò–ú–ï–ù–ï–ù–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
            applied_recommendations = smart_decisions.get('recent_applied_recommendations', [])
            if applied_recommendations:
                message += f"\n‚úÖ –ü–†–ò–ú–ï–ù–ï–ù–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
                for rec in applied_recommendations[-3:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3
                    status_emoji = "‚úÖ" if rec.get('success', False) else "‚ùå"
                    message += f"  {status_emoji} {rec.get('recommendation', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                    message += f"    üõ†Ô∏è –î–µ–π—Å—Ç–≤–∏–µ: {rec.get('action_taken', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                    if rec.get('result_description'):
                        message += f"    üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {rec.get('result_description')}\n"
            
            # –°–í–û–î–ö–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô
            recommendation_summary = smart_decisions.get('recommendation_summary', {})
            if recommendation_summary:
                total = recommendation_summary.get('total_recommendations', 0)
                successful = recommendation_summary.get('successful_recommendations', 0)
                success_rate = recommendation_summary.get('success_rate', 0)
                if total > 0:
                    message += f"\nüìä –°–í–û–î–ö–ê –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:\n"
                    message += f"  ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {total}\n"
                    message += f"  ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {successful}\n"
                    message += f"  ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1%}\n"
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
            recommendations = smart_decisions.get('recommendations', [])
            if recommendations:
                message += f"\nüí° –ù–û–í–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n"
                for rec in recommendations[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
                    message += f"  ‚Ä¢ {rec}\n"
            
            # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
            controller_status = smart_decisions.get('controller_status', {})
            if controller_status:
                message += f"\nüéõÔ∏è –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤:\n"
                for controller, status in controller_status.items():
                    status_emoji = "‚úÖ" if status.get('active', False) else "‚è∏Ô∏è"
                    message += f"  {status_emoji} {controller}: {status.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –ø—Ä–æ–±–ª–µ–º—ã
            warnings = smart_decisions.get('warnings', [])
            if warnings:
                message += f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n"
                for warning in warnings[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 2 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
                    message += f"  ‚Ä¢ {warning}\n"
        
        # –ü—Ä–æ–±–ª–µ–º—ã
        issues = analysis.get('issues', [])
        if issues:
            message += f"\n‚ö†Ô∏è **–ü—Ä–æ–±–ª–µ–º—ã:**\n"
            for issue in issues[:2]:
                message += f"  ‚Ä¢ {issue}\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ—à–µ–Ω–∏–π –æ—Ç Smart Tuner)
        if not smart_decisions:
            recommendations = analysis.get('recommendations', [])
            if recommendations:
                message += f"\nüí° **–ß—Ç–æ –¥–µ–ª–∞—Ç—å:**\n"
                for rec in recommendations[:2]:
                    message += f"  ‚Ä¢ {rec}\n"
        
        message += f"\nüïê {datetime.now().strftime('%H:%M:%S')}"
        
        return message
    
    def _create_attention_plot(self, attention_weights: torch.Tensor, step: int) -> Optional[bytes]:
        """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ attention matrix."""
        try:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –±–∞—Ç—á–∞
            if attention_weights.dim() == 4:
                attention = attention_weights[0, 0].detach().cpu().numpy()
            elif attention_weights.dim() == 3:
                attention = attention_weights[0].detach().cpu().numpy()
            else:
                attention = attention_weights.detach().cpu().numpy()
            
            # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã attention –º–∞—Ç—Ä–∏—Ü—ã
            if attention.shape[0] < 2 or attention.shape[1] < 2:
                self.logger.warning(f"Attention –º–∞—Ç—Ä–∏—Ü–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è: {attention.shape}")
                return self._create_fallback_attention_plot(attention, step)
            
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
            
            # –û—Å–Ω–æ–≤–Ω–æ–π attention plot
            im1 = ax1.imshow(attention.T, aspect='auto', origin='lower',
                           cmap='Blues', interpolation='nearest')
            ax1.set_title(f'Attention Matrix - –®–∞–≥ {step}', fontweight='bold')
            ax1.set_xlabel('Decoder Steps')
            ax1.set_ylabel('Encoder Steps')
            plt.colorbar(im1, ax=ax1)
            
            # –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
            min_dim = min(attention.shape)
            diag_x = np.linspace(0, attention.shape[1]-1, min_dim)
            diag_y = np.linspace(0, attention.shape[0]-1, min_dim)
            ax1.plot(diag_x, diag_y, 'r--', alpha=0.7, linewidth=2, label='–ò–¥–µ–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å')
            ax1.legend()
            
            # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
            diagonality = self._calculate_diagonality(attention)
            monotonicity = self._calculate_monotonicity(attention)
            
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∑–Ω–∞—á–µ–Ω–∏–π
            ax2.hist(attention.flatten(), bins=50, alpha=0.7, color='skyblue', edgecolor='black')
            ax2.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ Attention Values')
            ax2.set_xlabel('Attention Weight')
            ax2.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
            
            # –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            textstr = f'–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {diagonality:.1%}\n–ú–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å: {monotonicity:.1%}'
            ax2.text(0.05, 0.95, textstr, transform=ax2.transAxes, fontsize=12,
                    verticalalignment='top', bbox=dict(boxstyle='round', facecolor='wheat', alpha=0.8))
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=self.dpi, bbox_inches='tight')
            buffer.seek(0)
            image_data = buffer.getvalue()
            plt.close(fig)
            
            return image_data
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è attention plot: {e}")
            return self._create_fallback_attention_plot(None, step)
    
    def _create_fallback_attention_plot(self, attention: Optional[np.ndarray], step: int) -> Optional[bytes]:
        """–°–æ–∑–¥–∞–µ—Ç fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö attention –º–∞—Ç—Ä–∏—Ü."""
        try:
            fig, ax = plt.subplots(1, 1, figsize=(10, 6))
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"Attention Matrix - –®–∞–≥ {step}\n\n"
            if attention is not None:
                message += f"–†–∞–∑–º–µ—Ä –º–∞—Ç—Ä–∏—Ü—ã: {attention.shape}\n"
                message += f"–ú–∏–Ω –∑–Ω–∞—á–µ–Ω–∏–µ: {attention.min():.4f}\n"
                message += f"–ú–∞–∫—Å –∑–Ω–∞—á–µ–Ω–∏–µ: {attention.max():.4f}\n"
                message += f"–°—Ä–µ–¥–Ω–µ–µ: {attention.mean():.4f}\n\n"
                
                if attention.size > 0:
                    message += "–ú–∞—Ç—Ä–∏—Ü–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏\n"
                    message += "–û–±—É—á–µ–Ω–∏–µ –≤ —Ä–∞–Ω–Ω–µ–π —Å—Ç–∞–¥–∏–∏"
                else:
                    message += "–ü—É—Å—Ç–∞—è attention –º–∞—Ç—Ä–∏—Ü–∞"
            else:
                message += "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ attention –¥–∞–Ω–Ω—ã—Ö"
            
            ax.text(0.5, 0.5, message, ha='center', va='center',
                   transform=ax.transAxes, fontsize=12,
                   bbox=dict(boxstyle='round', facecolor='lightblue', alpha=0.8))
            ax.set_title(f'Attention Status - –®–∞–≥ {step}', fontweight='bold')
            ax.axis('off')
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=self.dpi, bbox_inches='tight')
            buffer.seek(0)
            image_data = buffer.getvalue()
            plt.close(fig)
            
            return image_data
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback attention plot: {e}")
            return None
    
    def _create_metrics_plot(self, step: int) -> Optional[bytes]:
        """–°–æ–∑–¥–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –º–µ—Ç—Ä–∏–∫."""
        try:
            if len(self.training_history) < 3:
                return None
            
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
            steps = [h['step'] for h in self.training_history[-15:]]
            losses = [h['metrics'].get('loss', 0) for h in self.training_history[-15:]]
            quality_scores = [h['quality_score'] for h in self.training_history[-15:]]
            
            fig, (ax1, ax2) = plt.subplots(2, 1, figsize=self.figure_size, sharex=True)
            
            # –ì—Ä–∞—Ñ–∏–∫ loss
            ax1.plot(steps, losses, 'b-', linewidth=2, marker='o', markersize=4, label='Training Loss')
            ax1.set_ylabel('Loss')
            ax1.set_title(f'–ü—Ä–æ–≥—Ä–µ—Å—Å –û–±—É—á–µ–Ω–∏—è - –®–∞–≥ {step}', fontweight='bold')
            ax1.grid(True, alpha=0.3)
            ax1.legend()
            
            # –¢—Ä–µ–Ω–¥ loss
            if len(losses) > 3:
                z = np.polyfit(range(len(losses)), losses, 1)
                p = np.poly1d(z)
                ax1.plot(steps, p(range(len(losses))), "r--", alpha=0.8, label='–¢—Ä–µ–Ω–¥')
                ax1.legend()
            
            # –ì—Ä–∞—Ñ–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
            ax2.plot(steps, quality_scores, 'g-', linewidth=2, marker='s', markersize=4, label='Quality Score')
            ax2.set_ylabel('Quality Score')
            ax2.set_xlabel('Training Step')
            ax2.set_ylim(0, 1)
            ax2.grid(True, alpha=0.3)
            ax2.legend()
            
            # –ó–æ–Ω—ã –∫–∞—á–µ—Å—Ç–≤–∞
            ax2.axhspan(0.8, 1.0, alpha=0.2, color='green', label='–û—Ç–ª–∏—á–Ω–æ')
            ax2.axhspan(0.6, 0.8, alpha=0.2, color='yellow', label='–•–æ—Ä–æ—à–æ')
            ax2.axhspan(0.4, 0.6, alpha=0.2, color='orange', label='–°—Ä–µ–¥–Ω–µ')
            ax2.axhspan(0.0, 0.4, alpha=0.2, color='red', label='–ü–ª–æ—Ö–æ')
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
            buffer = io.BytesIO()
            plt.savefig(buffer, format='png', dpi=self.dpi, bbox_inches='tight')
            buffer.seek(0)
            image_data = buffer.getvalue()
            plt.close(fig)
            
            return image_data
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è metrics plot: {e}")
            return None
    
    def _send_text_message(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        
        payload = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'Markdown',
            'disable_web_page_preview': True
        }
        
        try:
            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
            return False
    
    def _send_image(self, image_data: bytes, filename: str, caption: str = "") -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        url = f"https://api.telegram.org/bot{self.bot_token}/sendPhoto"
        
        files = {
            'photo': (filename, image_data, 'image/png')
        }
        
        data = {
            'chat_id': self.chat_id,
            'caption': caption
        }
        
        try:
            response = requests.post(url, files=files, data=data, timeout=30)
            response.raise_for_status()
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            return False
    
    def _analyze_attention(self, attention_weights: torch.Tensor) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç attention –∫–∞—á–µ—Å—Ç–≤–æ."""
        if attention_weights.dim() == 4:
            attention = attention_weights[0, 0].detach().cpu().numpy()
        elif attention_weights.dim() == 3:
            attention = attention_weights[0].detach().cpu().numpy()
        else:
            attention = attention_weights.detach().cpu().numpy()
        
        return {
            'diagonality': self._calculate_diagonality(attention),
            'monotonicity': self._calculate_monotonicity(attention),
            'focus': self._calculate_focus(attention)
        }
    
    def _calculate_diagonality(self, attention_matrix: np.ndarray) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å."""
        try:
            T_out, T_in = attention_matrix.shape
            if T_out == 0 or T_in == 0:
                return 0.0
            
            # –°–æ–∑–¥–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—É—é –¥–∏–∞–≥–æ–Ω–∞–ª—å
            ideal_diagonal = np.zeros_like(attention_matrix)
            min_dim = min(T_out, T_in)
            
            for i in range(min_dim):
                diagonal_pos = int(i * T_in / T_out) if T_out > 0 else i
                if diagonal_pos < T_in:
                    ideal_diagonal[i, diagonal_pos] = 1.0
            
            # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è —Å –∏–¥–µ–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª—å—é
            attention_flat = attention_matrix.flatten()
            ideal_flat = ideal_diagonal.flatten()
            
            if np.std(attention_flat) == 0 or np.std(ideal_flat) == 0:
                return 0.0
            
            correlation = np.corrcoef(attention_flat, ideal_flat)[0, 1]
            return max(0.0, correlation) if not np.isnan(correlation) else 0.0
            
        except Exception:
            return 0.0
    
    def _calculate_monotonicity(self, attention_matrix: np.ndarray) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å."""
        try:
            T_out, T_in = attention_matrix.shape
            if T_out <= 1:
                return 1.0
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–∏–∫–∏ attention
            peak_positions = np.argmax(attention_matrix, axis=1)
            
            # –°—á–∏—Ç–∞–µ–º –º–æ–Ω–æ—Ç–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
            monotonic_transitions = 0
            for i in range(1, len(peak_positions)):
                if peak_positions[i] >= peak_positions[i-1]:
                    monotonic_transitions += 1
            
            return monotonic_transitions / (len(peak_positions) - 1) if len(peak_positions) > 1 else 1.0
            
        except Exception:
            return 0.0
    
    def _calculate_focus(self, attention_matrix: np.ndarray) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫—É."""
        try:
            # –≠–Ω—Ç—Ä–æ–ø–∏—è –ø–æ decoder steps
            entropies = []
            for i in range(attention_matrix.shape[0]):
                attention_step = attention_matrix[i] + 1e-8
                entropy = -np.sum(attention_step * np.log(attention_step + 1e-8))
                entropies.append(entropy)
            
            # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
            max_entropy = np.log(attention_matrix.shape[1])
            avg_entropy = np.mean(entropies)
            focus = 1.0 - (avg_entropy / max_entropy)
            
            return max(0.0, min(1.0, focus))
            
        except Exception:
            return 0.0
    
    def _analyze_gate(self, gate_outputs: torch.Tensor) -> Dict[str, float]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç gate –∫–∞—á–µ—Å—Ç–≤–æ."""
        try:
            gates = gate_outputs[0].detach().cpu().numpy()
            gate_binary = (gates > 0.5).astype(float)
            
            stop_positions = np.where(gate_binary > 0.5)[0]
            
            if len(stop_positions) > 0:
                stop_position = stop_positions[0]
                false_stops = np.sum(gate_binary[stop_position+1:] < 0.5) if stop_position < len(gates)-1 else 0
                accuracy = 1.0 - (false_stops / max(1, len(gates) - stop_position - 1))
            else:
                accuracy = 0.0
            
            return {
                'accuracy': accuracy,
                'stop_position': stop_positions[0] if len(stop_positions) > 0 else len(gates)
            }
            
        except Exception:
            return {'accuracy': 0.0, 'stop_position': 0}
    
    def _get_phase(self, step: int) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ñ–∞–∑—É –æ–±—É—á–µ–Ω–∏—è."""
        if step < 500:
            return "pre_alignment"
        elif step < 2000:
            return "alignment_learning"
        elif step < 3000:
            return "quality_optimization"
        else:
            return "fine_tuning"
    
    def _detect_issues(self, analysis: Dict[str, Any]) -> List[str]:
        """–û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã."""
        issues = []
        
        attention = analysis.get('attention', {})
        diagonality = attention.get('diagonality', 0)
        
        if diagonality < 0.3:
            issues.append("–ö—Ä–∞–π–Ω–µ –Ω–∏–∑–∫–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å attention - –º–æ–¥–µ–ª—å –Ω–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç")
        elif diagonality < 0.5:
            issues.append("–ù–∏–∑–∫–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å - –Ω—É–∂–Ω–æ —É—Å–∏–ª–∏—Ç—å guided attention")
        
        gate = analysis.get('gate', {})
        if gate.get('accuracy', 0) < 0.5:
            issues.append("–ü–ª–æ—Ö–∞—è —Ä–∞–±–æ—Ç–∞ gate - –º–æ–¥–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω–µ—Ü")
        
        if analysis['quality_score'] < 0.4:
            issues.append("–û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Ç–∏—á–Ω–æ –Ω–∏–∑–∫–æ–µ")
        
        return issues
    
    def _get_recommendations(self, analysis: Dict[str, Any]) -> List[str]:
        """–î–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é."""
        recommendations = []
        
        phase = analysis.get('phase', '')
        attention = analysis.get('attention', {})
        diagonality = attention.get('diagonality', 0)
        
        if diagonality < 0.5:
            if phase == "pre_alignment":
                recommendations.append("–£–≤–µ–ª–∏—á–∏—Ç—å –≤–µ—Å guided attention –¥–æ 10.0")
            else:
                recommendations.append("–°–Ω–∏–∑–∏—Ç—å learning rate –∏ —É—Å–∏–ª–∏—Ç—å guided attention")
        
        gate = analysis.get('gate', {})
        if gate.get('accuracy', 0) < 0.7:
            recommendations.append("–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π gate threshold")
        
        if analysis['quality_score'] < 0.6:
            recommendations.append("–í–∫–ª—é—á–∏—Ç—å curriculum learning")
        
        return recommendations
    
    def _create_improvement_message(self, improvement_type: str, 
                                  old_params: Dict[str, Any], 
                                  new_params: Dict[str, Any], 
                                  reason: str, step: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —É–ª—É—á—à–µ–Ω–∏–∏."""
        
        # –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–ª—É—á—à–µ–Ω–∏–π
        type_icons = {
            'learning_rate': '‚ö°',
            'guided_attention': 'üéØ', 
            'dropout': 'üõ°Ô∏è',
            'batch_size': 'üì¶',
            'gate_threshold': 'üö™',
            'curriculum_learning': 'üéì',
            'early_stopping': 'üõë',
            'gradient_clipping': '‚úÇÔ∏è'
        }
        
        icon = type_icons.get(improvement_type, 'üîß')
        
        message = f"ü§ñ *Smart Tuner - –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –£–õ–£–ß–®–ï–ù–ò–ï*\n\n"
        message += f"{icon} **–¢–∏–ø:** `{improvement_type.replace('_', ' ').title()}`\n"
        message += f"üìç **–®–∞–≥:** `{step:,}`\n"
        message += f"üß† **–ü—Ä–∏—á–∏–Ω–∞:** {reason}\n\n"
        
        message += f"**üìä –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í:**\n"
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        for param_name in set(list(old_params.keys()) + list(new_params.keys())):
            old_val = old_params.get(param_name, 'N/A')
            new_val = new_params.get(param_name, 'N/A')
            
            if old_val != new_val:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                if isinstance(old_val, (int, float)) and isinstance(new_val, (int, float)):
                    if new_val > old_val:
                        trend = "üìà"
                    elif new_val < old_val:
                        trend = "üìâ"
                    else:
                        trend = "‚û°Ô∏è"
                else:
                    trend = "üîÑ"
                
                message += f"  {trend} `{param_name}`: `{old_val}` ‚Üí `{new_val}`\n"
        
        message += f"\nüí° **–û–ñ–ò–î–ê–ï–ú–´–ô –≠–§–§–ï–ö–¢:**\n"
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —É–ª—É—á—à–µ–Ω–∏—è
        effects = {
            'learning_rate': ["üéØ –ë–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "‚ö° –õ—É—á—à–∞—è —Å—Ö–æ–¥–∏–º–æ—Å—Ç—å"],
            'guided_attention': ["üéµ –£–ª—É—á—à–µ–Ω–∏–µ alignment", "üéØ –ë–æ–ª–µ–µ —á–µ—Ç–∫–∞—è –¥–∏–∫—Ü–∏—è"],
            'dropout': ["üõ°Ô∏è –°–Ω–∏–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è", "üí™ –õ—É—á—à–∞—è –≥–µ–Ω–µ—Ä–∞–ª–∏–∑–∞—Ü–∏—è"],
            'batch_size': ["‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏", "üìä –õ—É—á—à–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã"],
            'gate_threshold': ["üö™ –¢–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–∞", "üéµ –õ—É—á—à–∞—è –ø—Ä–æ—Å–æ–¥–∏—è"],
            'curriculum_learning': ["üéì –ü–æ—ç—Ç–∞–ø–Ω–æ–µ —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ", "üöÄ –£—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è"]
        }
        
        expected_effects = effects.get(improvement_type, ["üîß –û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞"])
        for effect in expected_effects:
            message += f"  ‚Ä¢ {effect}\n"
        
        message += f"\nüïê {datetime.now().strftime('%H:%M:%S')}"
        message += f"\nüéØ *–°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...*"
        
        return message
    
    def _create_problem_alert_message(self, problems: List[Dict[str, Any]], step: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö."""
        
        message = f"üö® *–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï*\n\n"
        message += f"üìç **–®–∞–≥:** `{step:,}`\n"
        message += f"‚ö†Ô∏è **–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º:** `{len(problems)}`\n\n"
        
        message += f"**üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:**\n"
        
        for i, problem in enumerate(problems[:3], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 3 –ø—Ä–æ–±–ª–µ–º
            severity = problem.get('severity', 'medium')
            severity_icons = {'critical': 'üî¥', 'high': 'üü†', 'medium': 'üü°', 'low': 'üü¢'}
            icon = severity_icons.get(severity, '‚ö†Ô∏è')
            
            message += f"{icon} **–ü—Ä–æ–±–ª–µ–º–∞ {i}:** {problem.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞')}\n"
            message += f"   üìä *–ó–Ω–∞—á–µ–Ω–∏–µ:* `{problem.get('value', 'N/A')}`\n"
            message += f"   üéØ *–ü–æ—Ä–æ–≥:* `{problem.get('threshold', 'N/A')}`\n"
            
            if 'recommendation' in problem:
                message += f"   üí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* {problem['recommendation']}\n"
            
            message += "\n"
        
        if len(problems) > 3:
            message += f"‚ö†Ô∏è *–ò –µ—â–µ {len(problems) - 3} –ø—Ä–æ–±–ª–µ–º...*\n\n"
        
        message += f"ü§ñ **–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –î–ï–ô–°–¢–í–ò–Ø:**\n"
        message += f"  üîÑ –°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        message += f"  ‚ö° –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π\n"
        message += f"  üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n"
        
        message += f"üïê {datetime.now().strftime('%H:%M:%S')}"
        message += f"\nüéØ *–°–ª–µ–¥–∏—Ç–µ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ–± —É–ª—É—á—à–µ–Ω–∏—è—Ö!*"
        
        return message
    
    def _create_phase_transition_message(self, old_phase: str, new_phase: str, 
                                       step: int, achievements: List[str]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –º–µ–∂–¥—É —Ñ–∞–∑–∞–º–∏."""
        
        phase_names = {
            'pre_alignment': 'üå± –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ',
            'alignment_learning': 'üéØ –û–±—É—á–µ–Ω–∏–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—é', 
            'quality_optimization': '‚≠ê –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞',
            'fine_tuning': 'üéµ –§–∏–Ω–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞'
        }
        
        phase_descriptions = {
            'pre_alignment': '–ú–æ–¥–µ–ª—å —É—á–∏—Ç—Å—è –±–∞–∑–æ–≤—ã–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º attention',
            'alignment_learning': '–û—Ç—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—á–Ω–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç-–∞—É–¥–∏–æ',
            'quality_optimization': '–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏',
            'fine_tuning': '–§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ª–∏—Ä–æ–≤–∫–∞ –∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤'
        }
        
        old_name = phase_names.get(old_phase, old_phase)
        new_name = phase_names.get(new_phase, new_phase) 
        new_desc = phase_descriptions.get(new_phase, '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è')
        
        message = f"üéØ *–ü–ï–†–ï–•–û–î –ö –ù–û–í–û–ô –§–ê–ó–ï –û–ë–£–ß–ï–ù–ò–Ø*\n\n"
        message += f"üìç **–®–∞–≥:** `{step:,}`\n"
        message += f"üîÑ **–ü–µ—Ä–µ—Ö–æ–¥:** {old_name} ‚Üí {new_name}\n\n"
        
        message += f"**üé≠ –ù–û–í–ê–Ø –§–ê–ó–ê:**\n"
        message += f"üéØ *–§–æ–∫—É—Å:* {new_desc}\n\n"
        
        if achievements:
            message += f"**‚úÖ –î–û–°–¢–ò–ñ–ï–ù–ò–Ø –ü–†–ï–î–´–î–£–©–ï–ô –§–ê–ó–´:**\n"
            for achievement in achievements:
                message += f"  üèÜ {achievement}\n"
            message += "\n"
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π —Ñ–∞–∑—ã
        phase_predictions = {
            'alignment_learning': [
                "üìà –û–∂–∏–¥–∞–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ attention",
                "üéØ –§–æ–∫—É—Å –Ω–∞ –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç–∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è"
            ],
            'quality_optimization': [
                "‚≠ê –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ mel-—Å–ø–µ–∫—Ç—Ä–æ–≥—Ä–∞–º–º", 
                "üéµ –ü–æ–≤—ã—à–µ–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—á–∏"
            ],
            'fine_tuning': [
                "üéµ –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤",
                "‚ú® –î–æ–≤–µ–¥–µ–Ω–∏–µ –¥–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞"
            ]
        }
        
        predictions = phase_predictions.get(new_phase, ["üöÄ –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞"])
        message += f"**üîÆ –û–ñ–ò–î–ê–ù–ò–Ø –û–¢ –ù–û–í–û–ô –§–ê–ó–´:**\n"
        for prediction in predictions:
            message += f"  ‚Ä¢ {prediction}\n"
        
        message += f"\nüïê {datetime.now().strftime('%H:%M:%S')}"
        message += f"\nüéØ *–°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–æ–≤–æ–π —Ñ–∞–∑—ã*"
        
        return message
    
    def _create_critical_alert_message(self, alert_type: str, details: Dict[str, Any], 
                                     recommendations: List[str] = None) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–ª–µ—Ä—Ç–µ."""
        
        message = f"üö® *–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ï–†–¢: {alert_type}*\n\n"
        
        # –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
        if 'description' in details:
            message += f"üìã **–û–ø–∏—Å–∞–Ω–∏–µ:** {details['description']}\n\n"
        
        if 'step' in details:
            message += f"üìç **–®–∞–≥:** `{details['step']:,}`\n"
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if 'metrics' in details:
            message += f"\nüìä **–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**\n"
            for metric, value in details['metrics'].items():
                message += f"‚Ä¢ {metric}: `{value}`\n"
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º
        if 'issues' in details:
            message += f"\nüî• **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**\n"
            for issue in details['issues']:
                message += f"‚Ä¢ {issue}\n"
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if recommendations:
            message += f"\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            for rec in recommendations:
                message += f"‚Ä¢ {rec}\n"
        
        message += f"\nüõ°Ô∏è **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!**"
        message += f"\nüïê {datetime.now().strftime('%H:%M:%S')}"
        
        return message
    
    def _create_restart_message(self, reason: str, step: int) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ."""
        
        message = f"üîÑ *–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö –û–ë–£–ß–ï–ù–ò–Ø*\n\n"
        message += f"üö® **–ü—Ä–∏—á–∏–Ω–∞:** {reason}\n"
        message += f"üìç **–®–∞–≥:** `{step:,}`\n"
        message += f"üïê **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}\n\n"
        
        message += f"üõ°Ô∏è **–°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:**\n"
        message += f"‚Ä¢ üî• –°–Ω–∏–∂–µ–Ω–∏–µ learning rate\n"
        message += f"‚Ä¢ üéØ –£—Å–∏–ª–µ–Ω–∏–µ guided attention\n"
        message += f"‚Ä¢ üì¶ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è batch size\n"
        message += f"‚Ä¢ ‚úÇÔ∏è –°—Ç—Ä–æ–≥–æ–µ –∫–ª–∏–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤\n\n"
        
        message += f"‚è∞ **–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥...**"
        
        return message 