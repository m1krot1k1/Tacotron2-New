#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
DDCLossDiagnostic - –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º DDC Loss
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ DDC loss

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ê–Ω–∞–ª–∏–∑ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–µ–Ω–∑–æ—Ä–æ–≤
- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Smart Tuner
"""

import torch
import numpy as np
import logging
from typing import Dict, List, Any, Optional
from dataclasses import dataclass
from pathlib import Path

@dataclass
class SizeMismatchInfo:
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤."""
    step: int
    coarse_shape: tuple
    fine_shape: tuple
    coarse_length: int
    fine_length: int
    length_ratio: float
    min_length: int
    max_length: int
    length_diff: int

class DDCLossDiagnostic:
    """
    –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º DDC Loss.
    
    –°–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ:
    - –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏—è–º —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–µ–Ω–∑–æ—Ä–æ–≤
    - –ü–∞—Ç—Ç–µ—Ä–Ω–∞–º –≤ attention weights
    - –ò—Å—Ç–æ—Ä–∏–∏ loss –∑–Ω–∞—á–µ–Ω–∏–π
    """
    
    def __init__(self, save_dir: str = "smart_tuner/ddc_diagnostics"):
        self.save_dir = Path(save_dir)
        self.save_dir.mkdir(parents=True, exist_ok=True)
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.size_mismatches: List[SizeMismatchInfo] = []
        self.attention_stats: Dict[str, Any] = {}
        self.loss_history: List[float] = []
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = logging.getLogger(__name__)
        
    def analyze_size_mismatch(self, coarse_attention: torch.Tensor, 
                            fine_attention: torch.Tensor, step: int) -> SizeMismatchInfo:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
        
        Args:
            coarse_attention: Attention –æ—Ç coarse –¥–µ–∫–æ–¥–µ—Ä–∞
            fine_attention: Attention –æ—Ç fine –¥–µ–∫–æ–¥–µ—Ä–∞
            step: –¢–µ–∫—É—â–∏–π —à–∞–≥ –æ–±—É—á–µ–Ω–∏—è
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤
        """
        coarse_shape = coarse_attention.shape
        fine_shape = fine_attention.shape
        
        mismatch_info = SizeMismatchInfo(
            step=step,
            coarse_shape=coarse_shape,
            fine_shape=fine_shape,
            coarse_length=coarse_shape[1] if len(coarse_shape) > 1 else 0,
            fine_length=fine_shape[1] if len(fine_shape) > 1 else 0,
            length_ratio=fine_shape[1] / coarse_shape[1] if coarse_shape[1] > 0 else 0,
            min_length=min(coarse_shape[1], fine_shape[1]) if len(coarse_shape) > 1 else 0,
            max_length=max(coarse_shape[1], fine_shape[1]) if len(coarse_shape) > 1 else 0,
            length_diff=abs(coarse_shape[1] - fine_shape[1]) if len(coarse_shape) > 1 else 0
        )
        
        self.size_mismatches.append(mismatch_info)
        return mismatch_info
    
    def add_loss_value(self, loss_value: float, step: int):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ loss –≤ –∏—Å—Ç–æ—Ä–∏—é."""
        self.loss_history.append(loss_value)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.loss_history) > 10000:
            self.loss_history = self.loss_history[-5000:]
    
    def generate_report(self) -> Dict[str, Any]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö DDC Loss.
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        """
        if not self.size_mismatches:
            return {"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
        
        length_diffs = [info.length_diff for info in self.size_mismatches]
        length_ratios = [info.length_ratio for info in self.size_mismatches if info.length_ratio > 0]
        
        report = {
            'total_samples': len(self.size_mismatches),
            'perfect_matches': sum(1 for diff in length_diffs if diff == 0),
            'average_length_diff': np.mean(length_diffs),
            'max_length_diff': max(length_diffs),
            'min_length_diff': min(length_diffs),
            'std_length_diff': np.std(length_diffs),
            'average_length_ratio': np.mean(length_ratios) if length_ratios else 0,
            'problematic_samples': sum(1 for diff in length_diffs if diff > 100),
            'recommendations': []
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if report['perfect_matches'] / report['total_samples'] < 0.1:
            report['recommendations'].append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ —Ç–æ—á–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —Ä–∞–∑–º–µ—Ä–æ–≤")
            
        if report['average_length_diff'] > 50:
            report['recommendations'].append("–í—ã—Å–æ–∫–∞—è —Å—Ä–µ–¥–Ω—è—è —Ä–∞–∑–Ω–æ—Å—Ç—å –¥–ª–∏–Ω - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ bucket batching")
            
        if report['max_length_diff'] > 200:
            report['recommendations'].append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–Ω–æ—Å—Ç–∏ –¥–ª–∏–Ω - –Ω—É–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É")
            
        if len(length_ratios) > 0 and (np.std(length_ratios) > 0.5):
            report['recommendations'].append("–í—ã—Å–æ–∫–∞—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π –¥–ª–∏–Ω - –ø—Ä–æ–±–ª–µ–º—ã —Å reduction factors")
        
        return report
    
    def suggest_fixes(self, report: Dict[str, Any]) -> List[str]:
        """
        –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞.
        
        Args:
            report: –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
            
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
        """
        fixes = []
        
        if report['average_length_diff'] > 30:
            fixes.append("–î–æ–±–∞–≤—å—Ç–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π padding —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –¥–ª–∏–Ω–µ")
            fixes.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é attention –≤–µ–∫—Ç–æ—Ä–æ–≤")
            
        if report['problematic_samples'] > report['total_samples'] * 0.1:
            fixes.append("–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")
            fixes.append("–î–æ–±–∞–≤—å—Ç–µ pre-processing –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª–∏–Ω")
            
        if 'length_ratio' in report and report['average_length_ratio'] > 2.0:
            fixes.append("–ü–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ reduction factors –¥–ª—è –¥–µ–∫–æ–¥–µ—Ä–æ–≤")
            fixes.append("–î–æ–±–∞–≤—å—Ç–µ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ attention")
            
        return fixes
    
    def save_diagnostic_data(self, filename: str = "ddc_diagnostic_data.json"):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON."""
        import json
        
        data = {
            'size_mismatches': [
                {
                    'step': info.step,
                    'coarse_shape': info.coarse_shape,
                    'fine_shape': info.fine_shape,
                    'coarse_length': info.coarse_length,
                    'fine_length': info.fine_length,
                    'length_ratio': info.length_ratio,
                    'length_diff': info.length_diff
                }
                for info in self.size_mismatches
            ],
            'loss_history': self.loss_history[-1000:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 1000 –∑–Ω–∞—á–µ–Ω–∏–π
            'attention_stats': self.attention_stats
        }
        
        filepath = self.save_dir / filename
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        
        self.logger.info(f"üíæ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filepath}")
    
    def get_summary(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
        if not self.size_mismatches:
            return {"status": "no_data", "message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
        
        report = self.generate_report()
        
        return {
            "status": "analyzed",
            "total_samples": report['total_samples'],
            "mismatch_rate": 1 - (report['perfect_matches'] / report['total_samples']),
            "avg_length_diff": report['average_length_diff'],
            "max_length_diff": report['max_length_diff'],
            "problematic_rate": report['problematic_samples'] / report['total_samples'],
            "recommendations_count": len(report['recommendations'])
        }
    
    def reset(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."""
        self.size_mismatches.clear()
        self.attention_stats.clear()
        self.loss_history.clear()
        self.logger.info("üîÑ –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
_global_ddc_diagnostic = None

def get_global_ddc_diagnostic() -> Optional[DDCLossDiagnostic]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    return _global_ddc_diagnostic

def set_global_ddc_diagnostic(diagnostic: DDCLossDiagnostic):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."""
    global _global_ddc_diagnostic
    _global_ddc_diagnostic = diagnostic

def initialize_ddc_diagnostic(save_dir: str = "smart_tuner/ddc_diagnostics") -> DDCLossDiagnostic:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É DDC."""
    global _global_ddc_diagnostic
    if _global_ddc_diagnostic is None:
        _global_ddc_diagnostic = DDCLossDiagnostic(save_dir)
    return _global_ddc_diagnostic 