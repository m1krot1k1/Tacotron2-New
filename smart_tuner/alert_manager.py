"""
Alert Manager –¥–ª—è Smart Tuner V2
–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram
"""

import yaml
import logging
import requests
import json
from typing import Dict, Any, Optional, List
from datetime import datetime
import asyncio
import threading
from pathlib import Path

class AlertManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ —á–µ—Ä–µ–∑ Telegram
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã
    """
    
    def __init__(self, config_or_path = "smart_tuner/config.yaml"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            config_or_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–ª–∏ –≥–æ—Ç–æ–≤—ã–π config dict
        """
        if isinstance(config_or_path, dict):
            # –ü–æ–ª—É—á–µ–Ω –≥–æ—Ç–æ–≤—ã–π config
            self.config = config_or_path
            self.config_path = None
        else:
            # –ü–æ–ª—É—á–µ–Ω –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            self.config_path = config_or_path
            self.config = self._load_config()
            
        self.logger = self._setup_logger()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram
        self.bot_token = self.config.get('telegram', {}).get('bot_token')
        self.chat_id = self.config.get('telegram', {}).get('chat_id')
        self.enabled = self.config.get('telegram', {}).get('enabled', False)
        
        # –ë—É—Ñ–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è batch –æ—Ç–ø—Ä–∞–≤–∫–∏
        self.message_buffer = []
        self.buffer_lock = threading.Lock()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        if self.enabled and (not self.bot_token or not self.chat_id):
            self.logger.warning("Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            self.enabled = False
            
        if self.enabled:
            self.logger.info("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
        else:
            self.logger.info("Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            
    def _load_config(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML —Ñ–∞–π–ª–∞"""
        if self.config_path is None:
            raise ValueError("config_path –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                return yaml.safe_load(f)
        except FileNotFoundError:
            self.logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            raise
        except yaml.YAMLError as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ YAML: {e}")
            raise
            
    def _setup_logger(self) -> logging.Logger:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞"""
        logger = logging.getLogger('AlertManager')
        logger.setLevel(logging.INFO)
        
        if not logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            logger.addHandler(handler)
            
        return logger
        
    def send_message(self, message: str, priority: str = 'info', 
                    parse_mode: str = 'Markdown') -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (info, warning, error, critical)
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (Markdown, HTML)
            
        Returns:
            True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.enabled:
            self.logger.debug(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã: {message}")
            return False
            
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        emoji_map = {
            'info': 'üìä',
            'warning': '‚ö†Ô∏è',
            'error': '‚ùå',
            'critical': 'üö®',
            'success': '‚úÖ'
        }
        
        emoji = emoji_map.get(priority, 'üìã')
        formatted_message = f"{emoji} *Smart Tuner V2*\n\n{message}"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        formatted_message += f"\n\n‚è∞ {timestamp}"
        
        return self._send_telegram_message(formatted_message, parse_mode)
        
    def _send_telegram_message(self, message: str, parse_mode: str = 'Markdown') -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞
            
        Returns:
            True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        
        payload = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': parse_mode,
            'disable_web_page_preview': True
        }
        
        try:
            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()
            
            self.logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
            
        except requests.exceptions.RequestException as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
            
    def send_training_started(self, config: Dict[str, Any]):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è
        """
        message = "üöÄ *–û–±—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å*\n\n"
        message += f"üìÅ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç: `{config.get('experiment_name', 'Unknown')}`\n"
        message += f"üéØ –ú–æ–¥–µ–ª—å: `{config.get('model_name', 'Tacotron2')}`\n"
        message += f"üìä –î–∞—Ç–∞—Å–µ—Ç: `{config.get('dataset_path', 'Unknown')}`\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if 'hyperparameters' in config:
            params = config['hyperparameters']
            message += f"\n*–ì–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n"
            message += f"‚Ä¢ Learning Rate: `{params.get('learning_rate', 'N/A')}`\n"
            message += f"‚Ä¢ Batch Size: `{params.get('batch_size', 'N/A')}`\n"
            message += f"‚Ä¢ Epochs: `{params.get('epochs', 'N/A')}`\n"
            
        self.send_message(message, priority='info')
        
    def send_training_completed(self, results: Dict[str, Any]):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è
        """
        message = "üéâ *–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ*\n\n"
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if 'final_metrics' in results:
            metrics = results['final_metrics']
            message += "*–§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:*\n"
            for metric_name, value in metrics.items():
                message += f"‚Ä¢ {metric_name}: `{value:.4f}`\n"
                
        # –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è
        if 'training_time' in results:
            message += f"\n‚è±Ô∏è –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: `{results['training_time']}`\n"
            
        # –õ—É—á—à–∞—è —ç–ø–æ—Ö–∞
        if 'best_epoch' in results:
            message += f"üèÜ –õ—É—á—à–∞—è —ç–ø–æ—Ö–∞: `{results['best_epoch']}`\n"
            
        # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
        if 'model_path' in results:
            message += f"üíæ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: `{results['model_path']}`\n"
            
        self.send_message(message, priority='success')
        
    def send_training_stopped(self, reason: str, step: int, metrics: Dict[str, float]):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–æ—Å—Ä–æ—á–Ω–æ–º –æ—Å—Ç–∞–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            reason: –ü—Ä–∏—á–∏–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∞
            step: –®–∞–≥, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–æ—à–µ–ª –æ—Å—Ç–∞–Ω–æ–≤
            metrics: –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        """
        message = "‚èπÔ∏è *–û–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ*\n\n"
        message += f"üõë –ü—Ä–∏—á–∏–Ω–∞: `{reason}`\n"
        message += f"üìç –®–∞–≥: `{step}`\n\n"
        
        message += "*–¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏:*\n"
        for metric_name, value in metrics.items():
            message += f"‚Ä¢ {metric_name}: `{value:.4f}`\n"
            
        self.send_message(message, priority='warning')
        
    def send_info_notification(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.send_message(message, priority='info')
        
    def send_success_notification(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ"""
        self.send_message(message, priority='success')
        
    def send_error_notification(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        self.send_message(message, priority='error')
        
    def send_optimization_update(self, trial_number: int, trial_value: float, 
                               best_value: float, params: Dict[str, Any]):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        
        Args:
            trial_number: –ù–æ–º–µ—Ä trial
            trial_value: –ó–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            best_value: –õ—É—á—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã trial
        """
        message = f"üî¨ *–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è - Trial {trial_number}*\n\n"
        message += f"üìà –ó–Ω–∞—á–µ–Ω–∏–µ: `{trial_value:.4f}`\n"
        message += f"üèÜ –õ—É—á—à–µ–µ: `{best_value:.4f}`\n\n"
        
        message += "*–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:*\n"
        for param_name, value in params.items():
            if isinstance(value, float):
                message += f"‚Ä¢ {param_name}: `{value:.6f}`\n"
            else:
                message += f"‚Ä¢ {param_name}: `{value}`\n"
                
        priority = 'success' if trial_value <= best_value else 'info'
        self.send_message(message, priority=priority)
        
    def send_error_alert(self, error_message: str, traceback_info: str = None):
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            error_message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            traceback_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–µ
        """
        message = "üí• *–û—à–∏–±–∫–∞ –≤ –æ–±—É—á–µ–Ω–∏–∏*\n\n"
        message += f"‚ùå –û—à–∏–±–∫–∞: `{error_message}`\n"
        
        if traceback_info:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É traceback
            if len(traceback_info) > 500:
                traceback_info = traceback_info[:500] + "..."
            message += f"\n```\n{traceback_info}\n```"
            
        self.send_message(message, priority='error')
        
    def send_metrics_summary(self, metrics_data: Dict[str, List[float]], 
                           window_size: int = 10):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
        
        Args:
            metrics_data: –î–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫
            window_size: –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è —É—Å—Ä–µ–¥–Ω–µ–Ω–∏—è
        """
        message = "üìä *–°–≤–æ–¥–∫–∞ –º–µ—Ç—Ä–∏–∫*\n\n"
        
        for metric_name, values in metrics_data.items():
            if len(values) >= window_size:
                recent_avg = sum(values[-window_size:]) / window_size
                overall_avg = sum(values) / len(values)
                
                message += f"*{metric_name}:*\n"
                message += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {window_size}: `{recent_avg:.4f}`\n"
                message += f"‚Ä¢ –û–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ: `{overall_avg:.4f}`\n"
                message += f"‚Ä¢ –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: `{len(values)}`\n\n"
                
        self.send_message(message, priority='info')
        
    def send_custom_alert(self, title: str, content: str, priority: str = 'info'):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫
            content: –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            priority: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        """
        message = f"*{title}*\n\n{content}"
        self.send_message(message, priority=priority)
        
    def send_batch_messages(self, messages: List[Dict[str, Any]]):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞–∫–µ—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        """
        for msg_data in messages:
            message = msg_data.get('message', '')
            priority = msg_data.get('priority', 'info')
            parse_mode = msg_data.get('parse_mode', 'Markdown')
            
            self.send_message(message, priority, parse_mode)
            
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram
        
        Returns:
            True, –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        """
        if not self.enabled:
            self.logger.info("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return False
            
        test_message = "üß™ *–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è*\n\nSmart Tuner V2 —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!"
        result = self.send_message(test_message, priority='info')
        
        if result:
            self.logger.info("–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
        else:
            self.logger.error("–¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è")
            
        return result
        
    def get_bot_info(self) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏–ª–∏ None
        """
        if not self.enabled:
            return None
            
        url = f"https://api.telegram.org/bot{self.bot_token}/getMe"
        
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            if data.get('ok'):
                return data.get('result')
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ API Telegram: {data}")
                return None
                
        except requests.exceptions.RequestException as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
            return None
            
    def set_webhook(self, webhook_url: str) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞
        
        Args:
            webhook_url: URL –¥–ª—è webhook
            
        Returns:
            True, –µ—Å–ª–∏ webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        if not self.enabled:
            return False
            
        url = f"https://api.telegram.org/bot{self.bot_token}/setWebhook"
        payload = {'url': webhook_url}
        
        try:
            response = requests.post(url, json=payload, timeout=10)
            response.raise_for_status()
            
            data = response.json()
            if data.get('ok'):
                self.logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
                return True
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {data}")
                return False
                
        except requests.exceptions.RequestException as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
            return False 