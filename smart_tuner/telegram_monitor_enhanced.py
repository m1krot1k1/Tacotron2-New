#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Enhanced Telegram Monitor –¥–ª—è Smart Tuner V2
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
1. –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
2. –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å EnhancedTacotronTrainer
4. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
"""

import logging
import time
import numpy as np
from typing import Dict, Any, Optional, List
import requests
import json

class TelegramMonitorEnhanced:
    """
    –£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram Monitor —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
    """
    
    def __init__(self, bot_token: str, chat_id: str, enabled: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Telegram Monitor
        
        Args:
            bot_token: –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
            chat_id: ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            enabled: –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        """
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.enabled = enabled
        self.logger = logging.getLogger('TelegramMonitorEnhanced')
        
        # –ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
        self.metrics_history = []
        self.last_alert_time = 0
        self.alert_cooldown = 300  # 5 –º–∏–Ω—É—Ç –º–µ–∂–¥—É –∞–ª–µ—Ä—Ç–∞–º–∏
        
        # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–ª–µ—Ä—Ç–æ–≤
        self.critical_thresholds = {
            'gradient_norm': 100.0,
            'attention_diagonality': 0.1,
            'loss': 50.0,
            'gate_accuracy': 0.3
        }
        
        self.logger.info("üì± Enhanced Telegram Monitor –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def send_training_update(self, step: int, metrics: Dict[str, Any], 
                           attention_weights=None, gate_outputs=None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        
        Args:
            step: –¢–µ–∫—É—â–∏–π —à–∞–≥ –æ–±—É—á–µ–Ω–∏—è
            metrics: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
            attention_weights: –í–µ—Å–∞ attention –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            gate_outputs: –í—ã—Ö–æ–¥—ã gate –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        if not self.enabled:
            return False
        
        try:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
            analysis = self._analyze_metrics(step, metrics, attention_weights, gate_outputs)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_detailed_message(step, metrics, analysis)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            success = self._send_message(message)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.metrics_history.append({
                'step': step,
                'metrics': metrics,
                'analysis': analysis,
                'timestamp': time.time()
            })
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.metrics_history) > 100:
                self.metrics_history = self.metrics_history[-50:]
            
            return success
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ training update: {e}")
            return False
    
    def send_critical_alert(self, issue_type: str, details: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
        
        Args:
            issue_type: –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
            details: –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        if not self.enabled:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º cooldown
        current_time = time.time()
        if current_time - self.last_alert_time < self.alert_cooldown:
            return False
        
        try:
            message = self._format_critical_alert(issue_type, details)
            success = self._send_message(message)
            
            if success:
                self.last_alert_time = current_time
            
            return success
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–µ—Ä—Ç–∞: {e}")
            return False
    
    def send_quality_report(self, step: int, quality_metrics: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ
        
        Args:
            step: –¢–µ–∫—É—â–∏–π —à–∞–≥
            quality_metrics: –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        if not self.enabled:
            return False
        
        try:
            message = self._format_quality_report(step, quality_metrics)
            return self._send_message(message)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ quality report: {e}")
            return False
    
    def _analyze_metrics(self, step: int, metrics: Dict[str, Any], 
                        attention_weights=None, gate_outputs=None) -> Dict[str, Any]:
        """
        –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ –∏ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        
        Args:
            step: –¢–µ–∫—É—â–∏–π —à–∞–≥
            metrics: –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
            attention_weights: –í–µ—Å–∞ attention
            gate_outputs: –í—ã—Ö–æ–¥—ã gate
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∞–Ω–∞–ª–∏–∑–æ–º
        """
        analysis = {
            'issues': [],
            'recommendations': [],
            'trends': {},
            'status': 'normal'
        }
        
        # –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
        grad_norm = metrics.get('grad_norm', 0.0)
        if grad_norm > self.critical_thresholds['gradient_norm']:
            analysis['issues'].append(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤: {grad_norm:.2f}")
            analysis['recommendations'].append("–£–º–µ–Ω—å—à–∏—Ç–µ learning rate –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ gradient clipping")
            analysis['status'] = 'critical'
        elif grad_norm > 10.0:
            analysis['issues'].append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –Ω–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤: {grad_norm:.2f}")
            analysis['recommendations'].append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ learning rate")
            analysis['status'] = 'warning'
        
        # –ê–Ω–∞–ª–∏–∑ attention alignment
        attention_diagonality = metrics.get('attention_diagonality', 0.0)
        if attention_diagonality < self.critical_thresholds['attention_diagonality']:
            analysis['issues'].append(f"üö® –ü–ª–æ—Ö–æ–µ attention alignment: {attention_diagonality:.3f}")
            analysis['recommendations'].append("–£–≤–µ–ª–∏—á—å—Ç–µ guided attention weight")
            analysis['status'] = 'critical'
        elif attention_diagonality < 0.3:
            analysis['issues'].append(f"‚ö†Ô∏è –°–ª–∞–±–æ–µ attention alignment: {attention_diagonality:.3f}")
            analysis['recommendations'].append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ guided attention loss")
            analysis['status'] = 'warning'
        
        # –ê–Ω–∞–ª–∏–∑ loss
        loss = metrics.get('loss', 0.0)
        if loss > self.critical_thresholds['loss']:
            analysis['issues'].append(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤—ã—Å–æ–∫–∏–π loss: {loss:.2f}")
            analysis['recommendations'].append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            analysis['status'] = 'critical'
        
        # –ê–Ω–∞–ª–∏–∑ gate accuracy
        gate_accuracy = metrics.get('gate_accuracy', 0.0)
        if gate_accuracy < self.critical_thresholds['gate_accuracy']:
            analysis['issues'].append(f"üö® –ù–∏–∑–∫–∞—è gate accuracy: {gate_accuracy:.3f}")
            analysis['recommendations'].append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ gate loss –∏ –¥–∞–Ω–Ω—ã–µ")
            analysis['status'] = 'critical'
        
        # –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
        if len(self.metrics_history) >= 5:
            recent_metrics = self.metrics_history[-5:]
            loss_trend = self._calculate_trend([m['metrics'].get('loss', 0) for m in recent_metrics])
            
            if loss_trend > 0.1:  # Loss —Ä–∞—Å—Ç–µ—Ç
                analysis['trends']['loss'] = 'increasing'
                analysis['recommendations'].append("Loss —Ä–∞—Å—Ç–µ—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ learning rate")
            elif loss_trend < -0.1:  # Loss –ø–∞–¥–∞–µ—Ç
                analysis['trends']['loss'] = 'decreasing'
                analysis['recommendations'].append("Loss –ø–∞–¥–∞–µ—Ç - –æ–±—É—á–µ–Ω–∏–µ –∏–¥–µ—Ç —Ö–æ—Ä–æ—à–æ")
        
        return analysis
    
    def _format_detailed_message(self, step: int, metrics: Dict[str, Any], 
                                analysis: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            step: –¢–µ–∫—É—â–∏–π —à–∞–≥
            metrics: –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è
            analysis: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = f"ü§ñ **Smart Tuner V2 - –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç**\n\n"
        message += f"üìä **–®–∞–≥:** {step:,}\n"
        message += f"‚è∞ **–í—Ä–µ–º—è:** {time.strftime('%H:%M:%S')}\n\n"
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        message += "üìà **–û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:**\n"
        message += f"  ‚Ä¢ Loss: {metrics.get('loss', 0):.4f}\n"
        message += f"  ‚Ä¢ Gradient Norm: {metrics.get('grad_norm', 0):.2f}\n"
        message += f"  ‚Ä¢ Attention Diagonality: {metrics.get('attention_diagonality', 0):.3f}\n"
        message += f"  ‚Ä¢ Gate Accuracy: {metrics.get('gate_accuracy', 0):.3f}\n\n"
        
        # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ loss –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        if 'loss_breakdown' in metrics:
            breakdown = metrics['loss_breakdown']
            message += "üîç **–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è Loss:**\n"
            message += f"  ‚Ä¢ Mel Loss: {breakdown.get('mel_loss', 0):.4f}\n"
            message += f"  ‚Ä¢ Gate Loss: {breakdown.get('gate_loss', 0):.4f}\n"
            message += f"  ‚Ä¢ Guide Loss: {breakdown.get('guide_loss', 0):.4f}\n"
            message += f"  ‚Ä¢ Emb Loss: {breakdown.get('emb_loss', 0):.4f}\n\n"
        
        # –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if analysis['issues']:
            message += "üö® **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:**\n"
            for issue in analysis['issues']:
                message += f"  ‚Ä¢ {issue}\n"
            message += "\n"
        
        if analysis['recommendations']:
            message += "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            for rec in analysis['recommendations']:
                message += f"  ‚Ä¢ {rec}\n"
            message += "\n"
        
        # –°—Ç–∞—Ç—É—Å
        status_emoji = {
            'normal': '‚úÖ',
            'warning': '‚ö†Ô∏è',
            'critical': 'üö®'
        }
        message += f"{status_emoji.get(analysis['status'], '‚ùì')} **–°—Ç–∞—Ç—É—Å:** {analysis['status'].upper()}\n"
        
        return message
    
    def _format_critical_alert(self, issue_type: str, details: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
        
        Args:
            issue_type: –¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
            details: –î–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = f"üö® **–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–õ–ï–†–¢**\n\n"
        message += f"üî¥ **–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã:** {issue_type}\n"
        message += f"‚è∞ **–í—Ä–µ–º—è:** {time.strftime('%H:%M:%S')}\n\n"
        
        message += "üìã **–î–µ—Ç–∞–ª–∏:**\n"
        for key, value in details.items():
            if isinstance(value, float):
                message += f"  ‚Ä¢ {key}: {value:.4f}\n"
            else:
                message += f"  ‚Ä¢ {key}: {value}\n"
        
        message += "\nüõ†Ô∏è **–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!**"
        
        return message
    
    def _format_quality_report(self, step: int, quality_metrics: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ
        
        Args:
            step: –¢–µ–∫—É—â–∏–π —à–∞–≥
            quality_metrics: –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        message = f"üéØ **–û—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ TTS**\n\n"
        message += f"üìä **–®–∞–≥:** {step:,}\n"
        message += f"‚è∞ **–í—Ä–µ–º—è:** {time.strftime('%H:%M:%S')}\n\n"
        
        message += "üìà **–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:**\n"
        for key, value in quality_metrics.items():
            if isinstance(value, float):
                message += f"  ‚Ä¢ {key}: {value:.4f}\n"
            else:
                message += f"  ‚Ä¢ {key}: {value}\n"
        
        return message
    
    def _send_message(self, message: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        try:
            url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
            data = {
                'chat_id': self.chat_id,
                'text': message,
                'parse_mode': 'Markdown'
            }
            
            response = requests.post(url, data=data, timeout=10)
            
            if response.status_code == 200:
                return True
            else:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram: {e}")
            return False
    
    def _calculate_trend(self, values: List[float]) -> float:
        """
        –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        
        Args:
            values: –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π
            
        Returns:
            –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç—Ä–µ–Ω–¥–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π = —Ä–æ—Å—Ç, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π = –ø–∞–¥–µ–Ω–∏–µ)
        """
        if len(values) < 2:
            return 0.0
        
        x = np.arange(len(values))
        y = np.array(values)
        
        # –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è
        slope = np.polyfit(x, y, 1)[0]
        return slope
    
    def get_metrics_history(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫
        
        Returns:
            –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫
        """
        return self.metrics_history.copy()
    
    def clear_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –º–µ—Ç—Ä–∏–∫"""
        self.metrics_history.clear()
        self.logger.info("–ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ –æ—á–∏—â–µ–Ω–∞") 