#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è Smart Tuner TTS

üéµ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—É—á–µ–Ω–∏—è:
- Attention alignment –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∞–Ω–∞–ª–∏–∑–æ–º –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
- –ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ—Ç–µ—Ä—å –∏ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞  
- –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- Russian language support –¥–ª—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""

import asyncio
import io
import logging
import matplotlib
matplotlib.use('Agg')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º backend –±–µ–∑ GUI
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import torch
import telegram
from telegram import Bot
from typing import Dict, List, Optional, Any, Tuple
import time
from datetime import datetime
import os
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")


class TelegramMonitorEnhanced:
    """
    üéµ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è TTS.
    
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ attention alignment —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    - –ì—Ä–∞—Ñ–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è —Å –∑–æ–Ω–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
    - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
    - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 1000 —à–∞–≥–æ–≤
    """
    
    def __init__(self, bot_token: str, chat_id: str, enabled: bool = True):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.enabled = enabled
        self.bot = None
        
        # –ò—Å—Ç–æ—Ä–∏—è –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.metrics_history = {
            'steps': [],
            'train_loss': [],
            'val_loss': [],
            'attention_diagonality': [],
            'gate_accuracy': [],
            'quality_score': [],
            'timestamps': []
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.figure_size = (12, 8)
        self.dpi = 100
        
        self.logger = logging.getLogger(__name__)
        
        if self.enabled and self.bot_token and self.chat_id:
            try:
                self.bot = Bot(token=self.bot_token)
                self.logger.info("‚úÖ Telegram –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram: {e}")
                self.enabled = False
    
    def send_training_update(self, step: int, metrics: Dict[str, Any], 
                           alignments: Optional[torch.Tensor] = None) -> None:
        """
        üéµ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∫–∞–∂–¥—ã–µ 1000 —à–∞–≥–æ–≤.
        
        Args:
            step: –ù–æ–º–µ—Ä —à–∞–≥–∞ –æ–±—É—á–µ–Ω–∏—è
            metrics: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
            alignments: Attention alignments –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        """
        if not self.enabled or step % 1000 != 0:
            return
            
        try:
            # 1. –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫
            self._update_metrics_history(step, metrics)
            
            # 2. –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º attention –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if alignments is not None:
                self._send_attention_analysis(step, alignments)
            
            # 3. –°–æ–∑–¥–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫–∏ –º–µ—Ç—Ä–∏–∫
            self._send_metrics_plots(step)
            
            # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
            self._send_detailed_analysis(step, metrics)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            self.logger.error(traceback.format_exc())
    
    def _update_metrics_history(self, step: int, metrics: Dict[str, Any]) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫."""
        self.metrics_history['steps'].append(step)
        self.metrics_history['train_loss'].append(metrics.get('train_loss', 0))
        self.metrics_history['val_loss'].append(metrics.get('val_loss', 0))
        self.metrics_history['attention_diagonality'].append(metrics.get('attention_diagonality', 0))
        self.metrics_history['gate_accuracy'].append(metrics.get('gate_accuracy', 0))
        self.metrics_history['quality_score'].append(metrics.get('quality_score', 0))
        self.metrics_history['timestamps'].append(datetime.now())
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 —Ç–æ—á–∫–∞–º–∏
        max_history = 100
        for key in self.metrics_history:
            if len(self.metrics_history[key]) > max_history:
                self.metrics_history[key] = self.metrics_history[key][-max_history:]
    
    def _send_attention_analysis(self, step: int, alignments: torch.Tensor) -> None:
        """
        üéØ –°–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ attention alignment.
        """
        try:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏–∑ –±–∞—Ç—á–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            if alignments.dim() == 3:
                alignment = alignments[0].detach().cpu().numpy()
            else:
                alignment = alignments.detach().cpu().numpy()
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ subplot'–∞–º–∏
            fig, axes = plt.subplots(2, 2, figsize=(15, 12))
            fig.suptitle(f'üéµ –ê–Ω–∞–ª–∏–∑ Attention Alignment - –®–∞–≥ {step}', fontsize=16, fontweight='bold')
            
            # 1. –û—Å–Ω–æ–≤–Ω–∞—è attention –º–∞—Ç—Ä–∏—Ü–∞
            ax1 = axes[0, 0]
            im1 = ax1.imshow(alignment, aspect='auto', origin='lower', cmap='Blues')
            ax1.set_title('Attention Matrix', fontweight='bold')
            ax1.set_xlabel('Encoder Steps')
            ax1.set_ylabel('Decoder Steps')
            plt.colorbar(im1, ax=ax1)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–¥–µ–∞–ª—å–Ω—É—é –¥–∏–∞–≥–æ–Ω–∞–ª—å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            diagonal_line = np.linspace(0, alignment.shape[0]-1, alignment.shape[1])
            ax1.plot(diagonal_line, range(alignment.shape[1]), 'r--', alpha=0.7, linewidth=2, label='–ò–¥–µ–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å')
            ax1.legend()
            
            # 2. –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑
            ax2 = axes[0, 1]
            diagonality_score = self._calculate_diagonality(alignment)
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç –¥–∏–∞–≥–æ–Ω–∞–ª–∏
            ideal_diagonal = self._create_ideal_diagonal(alignment.shape)
            deviation = np.abs(alignment - ideal_diagonal)
            im2 = ax2.imshow(deviation, aspect='auto', origin='lower', cmap='Reds')
            ax2.set_title(f'–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –¥–∏–∞–≥–æ–Ω–∞–ª–∏\n–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {diagonality_score:.3f}', fontweight='bold')
            ax2.set_xlabel('Encoder Steps')
            ax2.set_ylabel('Decoder Steps')
            plt.colorbar(im2, ax=ax2)
            
            # 3. –§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ attention
            ax3 = axes[1, 0]
            attention_focus = np.max(alignment, axis=0)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è attention –Ω–∞ –∫–∞–∂–¥–æ–º decoder —à–∞–≥–µ
            ax3.plot(attention_focus, 'g-', linewidth=2, marker='o', markersize=4)
            ax3.set_title('–§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ Attention –ø–æ –≤—Ä–µ–º–µ–Ω–∏', fontweight='bold')
            ax3.set_xlabel('Decoder Steps')
            ax3.set_ylabel('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è Attention')
            ax3.grid(True, alpha=0.3)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—ã –∫–∞—á–µ—Å—Ç–≤–∞
            ax3.axhline(y=0.5, color='orange', linestyle='--', alpha=0.7, label='–ù–æ—Ä–º–∞ (0.5)')
            ax3.axhline(y=0.7, color='green', linestyle='--', alpha=0.7, label='–•–æ—Ä–æ—à–æ (0.7)')
            ax3.legend()
            
            # 4. –ú–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å
            ax4 = axes[1, 1]
            attention_peaks = np.argmax(alignment, axis=0)  # –ü–æ–∑–∏—Ü–∏—è –ø–∏–∫–∞ –Ω–∞ –∫–∞–∂–¥–æ–º decoder —à–∞–≥–µ
            ax4.plot(attention_peaks, 'b-', linewidth=2, marker='s', markersize=4)
            ax4.set_title('–ú–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å Attention', fontweight='bold')
            ax4.set_xlabel('Decoder Steps')
            ax4.set_ylabel('–ü–æ–∑–∏—Ü–∏—è –ø–∏–∫–∞ Attention')
            ax4.grid(True, alpha=0.3)
            
            # –ò–¥–µ–∞–ª—å–Ω–∞—è –º–æ–Ω–æ—Ç–æ–Ω–Ω–∞—è –ª–∏–Ω–∏—è
            ideal_monotonic = np.linspace(0, len(attention_peaks)-1, len(attention_peaks))
            ax4.plot(ideal_monotonic, 'r--', alpha=0.7, linewidth=2, label='–ò–¥–µ–∞–ª—å–Ω–∞—è –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å')
            ax4.legend()
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=self.dpi, bbox_inches='tight')
            buf.seek(0)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            asyncio.create_task(self._send_photo_async(
                buf, 
                f"üéØ **–ê–Ω–∞–ª–∏–∑ Attention - –®–∞–≥ {step}**\n\n"
                f"üìä **–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** {diagonality_score:.3f}\n"
                f"üéØ **–°—Ä–µ–¥–Ω—è—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞:** {np.mean(attention_focus):.3f}\n"
                f"üìà **–ú–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å:** {self._calculate_monotonicity(attention_peaks):.3f}\n\n"
                f"{self._get_attention_quality_text(diagonality_score)}"
            ))
            
            plt.close(fig)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è attention –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def _send_metrics_plots(self, step: int) -> None:
        """
        üìä –°–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –º–µ—Ç—Ä–∏–∫ –æ–±—É—á–µ–Ω–∏—è.
        """
        try:
            if len(self.metrics_history['steps']) < 2:
                return
                
            fig, axes = plt.subplots(2, 2, figsize=(15, 10))
            fig.suptitle(f'üìä –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è - –®–∞–≥ {step}', fontsize=16, fontweight='bold')
            
            steps = self.metrics_history['steps']
            
            # 1. Losses
            ax1 = axes[0, 0]
            ax1.plot(steps, self.metrics_history['train_loss'], 'b-', linewidth=2, label='Train Loss', marker='o', markersize=3)
            ax1.plot(steps, self.metrics_history['val_loss'], 'r-', linewidth=2, label='Val Loss', marker='s', markersize=3)
            ax1.set_title('Loss —Ñ—É–Ω–∫—Ü–∏–∏', fontweight='bold')
            ax1.set_xlabel('–®–∞–≥–∏')
            ax1.set_ylabel('Loss')
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            ax1.set_yscale('log')
            
            # 2. Attention Quality
            ax2 = axes[0, 1]
            ax2.plot(steps, self.metrics_history['attention_diagonality'], 'g-', linewidth=2, label='–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', marker='^', markersize=3)
            ax2.set_title('–ö–∞—á–µ—Å—Ç–≤–æ Attention', fontweight='bold')
            ax2.set_xlabel('–®–∞–≥–∏')
            ax2.set_ylabel('–î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å')
            ax2.legend()
            ax2.grid(True, alpha=0.3)
            
            # –ó–æ–Ω—ã –∫–∞—á–µ—Å—Ç–≤–∞
            ax2.axhline(y=0.3, color='red', linestyle='--', alpha=0.5, label='–ü–ª–æ—Ö–æ')
            ax2.axhline(y=0.6, color='orange', linestyle='--', alpha=0.5, label='–ù–æ—Ä–º–∞')  
            ax2.axhline(y=0.8, color='green', linestyle='--', alpha=0.5, label='–û—Ç–ª–∏—á–Ω–æ')
            
            # 3. Gate Accuracy
            ax3 = axes[1, 0]
            ax3.plot(steps, self.metrics_history['gate_accuracy'], 'm-', linewidth=2, label='Gate Accuracy', marker='d', markersize=3)
            ax3.set_title('Gate Accuracy', fontweight='bold')
            ax3.set_xlabel('–®–∞–≥–∏')
            ax3.set_ylabel('Accuracy')
            ax3.legend()
            ax3.grid(True, alpha=0.3)
            
            # 4. Overall Quality
            ax4 = axes[1, 1]
            ax4.plot(steps, self.metrics_history['quality_score'], 'orange', linewidth=3, label='Quality Score', marker='*', markersize=5)
            ax4.set_title('–û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ', fontweight='bold')
            ax4.set_xlabel('–®–∞–≥–∏')
            ax4.set_ylabel('Quality Score')
            ax4.legend()
            ax4.grid(True, alpha=0.3)
            
            # –ó–æ–Ω–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
            ax4.axhline(y=0.8, color='green', linestyle='--', alpha=0.7, label='–¶–µ–ª—å')
            
            plt.tight_layout()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±—É—Ñ–µ—Ä
            buf = io.BytesIO()
            plt.savefig(buf, format='png', dpi=self.dpi, bbox_inches='tight')
            buf.seek(0)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            asyncio.create_task(self._send_photo_async(
                buf,
                f"üìä **–ì—Ä–∞—Ñ–∏–∫–∏ –º–µ—Ç—Ä–∏–∫ - –®–∞–≥ {step}**\n\n"
                f"üìà **–¢—Ä–µ–Ω–¥ –∫–∞—á–µ—Å—Ç–≤–∞:** {self._analyze_quality_trend()}\n"
                f"üéØ **–°—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è:** {self._get_training_status()}\n"
                f"‚ö° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:** {self._get_training_recommendations()}"
            ))
            
            plt.close(fig)
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –º–µ—Ç—Ä–∏–∫: {e}")
    
    def _send_detailed_analysis(self, step: int, metrics: Dict[str, Any]) -> None:
        """
        üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞.
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = f"üéµ **–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó - –®–ê–ì {step}**\n\n"
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            message += f"üìä **–û–°–ù–û–í–ù–´–ï –ú–ï–¢–†–ò–ö–ò:**\n"
            message += f"‚Ä¢ Train Loss: `{metrics.get('train_loss', 0):.4f}`\n"
            message += f"‚Ä¢ Val Loss: `{metrics.get('val_loss', 0):.4f}`\n"
            message += f"‚Ä¢ Quality Score: `{metrics.get('quality_score', 0):.1%}`\n\n"
            
            # Attention –∞–Ω–∞–ª–∏–∑
            diag = metrics.get('attention_diagonality', 0)
            message += f"üéØ **ATTENTION –ö–ê–ß–ï–°–¢–í–û:**\n"
            message += f"‚Ä¢ –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: `{diag:.3f}`\n"
            message += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {self._get_attention_status_emoji(diag)} {self._get_attention_quality_text(diag)}\n"
            message += f"‚Ä¢ Gate Accuracy: `{metrics.get('gate_accuracy', 0):.1%}`\n\n"
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
            message += f"üìà **–ü–†–û–ì–†–ï–°–° –û–ë–£–ß–ï–ù–ò–Ø:**\n"
            message += f"‚Ä¢ –§–∞–∑–∞: `{metrics.get('phase', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`\n"
            message += f"‚Ä¢ –≠–ø–æ—Ö–∞: `{metrics.get('epoch', 'N/A')}`\n"
            message += f"‚Ä¢ Learning Rate: `{metrics.get('learning_rate', 0):.2e}`\n\n"
            
            # –ü—Ä–æ–±–ª–µ–º—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            issues = self._analyze_potential_issues(metrics)
            if issues:
                message += f"‚ö†Ô∏è **–û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:**\n"
                for issue in issues:
                    message += f"‚Ä¢ {issue}\n"
                message += "\n"
            
            recommendations = self._get_specific_recommendations(metrics)
            message += f"üí° **–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**\n"
            for rec in recommendations:
                message += f"‚Ä¢ {rec}\n"
            
            # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            message += f"\n‚è∞ **–°–ª–µ–¥—É—é—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1000 —à–∞–≥–æ–≤**"
            
            asyncio.create_task(self._send_message_async(message))
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def _calculate_diagonality(self, alignment: np.ndarray) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å attention –º–∞—Ç—Ä–∏—Ü—ã."""
        try:
            rows, cols = alignment.shape
            ideal_diagonal = self._create_ideal_diagonal((rows, cols))
            
            # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ–±–µ –º–∞—Ç—Ä–∏—Ü—ã
            alignment_norm = alignment / (np.sum(alignment) + 1e-8)
            ideal_norm = ideal_diagonal / (np.sum(ideal_diagonal) + 1e-8)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é
            correlation = np.corrcoef(alignment_norm.flatten(), ideal_norm.flatten())[0, 1]
            return max(0.0, correlation) if not np.isnan(correlation) else 0.0
            
        except Exception:
            return 0.0
    
    def _create_ideal_diagonal(self, shape: Tuple[int, int]) -> np.ndarray:
        """–°–æ–∑–¥–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω—É—é –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É."""
        rows, cols = shape
        diagonal = np.zeros((rows, cols))
        
        for j in range(cols):
            i = int(j * rows / cols)
            if i < rows:
                # –°–æ–∑–¥–∞–µ–º –≥–∞—É—Å—Å–æ–≤–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∫—Ä—É–≥ –¥–∏–∞–≥–æ–Ω–∞–ª–∏
                for r in range(rows):
                    diagonal[r, j] = np.exp(-0.5 * ((r - i) / (rows * 0.05)) ** 2)
        
        return diagonal
    
    def _calculate_monotonicity(self, peaks: np.ndarray) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–∏–∫–æ–≤."""
        if len(peaks) < 2:
            return 1.0
            
        monotonic_count = 0
        for i in range(len(peaks) - 1):
            if peaks[i + 1] >= peaks[i]:
                monotonic_count += 1
        
        return monotonic_count / (len(peaks) - 1)
    
    def _get_attention_quality_text(self, diagonality: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ attention."""
        if diagonality >= 0.85:
            return "üü¢ –û—Ç–ª–∏—á–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å! –ú–æ–¥–µ–ª—å –∏–¥–µ–∞–ª—å–Ω–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∞—É–¥–∏–æ."
        elif diagonality >= 0.7:
            return "üü° –•–æ—Ä–æ—à–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å. –ù–µ–±–æ–ª—å—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω—ã."
        elif diagonality >= 0.5:
            return "üü† –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å. –¢—Ä–µ–±—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è."
        elif diagonality >= 0.3:
            return "üî¥ –°–ª–∞–±–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å. –°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å alignment."
        else:
            return "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –Ω–∏–∑–∫–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å! –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞ –≤–º–µ—Å—Ç–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏."
    
    def _get_attention_status_emoji(self, diagonality: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç emoji —Å—Ç–∞—Ç—É—Å–∞ attention."""
        if diagonality >= 0.85:
            return "üéØ"
        elif diagonality >= 0.7:
            return "‚úÖ"
        elif diagonality >= 0.5:
            return "‚ö†Ô∏è"
        elif diagonality >= 0.3:
            return "‚ùå"
        else:
            return "üö®"
    
    def _analyze_quality_trend(self) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥ –∫–∞—á–µ—Å—Ç–≤–∞."""
        if len(self.metrics_history['quality_score']) < 5:
            return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"
            
        recent_scores = self.metrics_history['quality_score'][-5:]
        if recent_scores[-1] > recent_scores[0]:
            return "üìà –£–ª—É—á—à–∞–µ—Ç—Å—è"
        elif recent_scores[-1] < recent_scores[0]:
            return "üìâ –£—Ö—É–¥—à–∞–µ—Ç—Å—è"
        else:
            return "üìä –°—Ç–∞–±–∏–ª—å–Ω–æ"
    
    def _get_training_status(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–±—É—á–µ–Ω–∏—è."""
        if not self.metrics_history['quality_score']:
            return "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"
            
        latest_quality = self.metrics_history['quality_score'][-1]
        if latest_quality >= 0.8:
            return "üü¢ –û—Ç–ª–∏—á–Ω–æ"
        elif latest_quality >= 0.6:
            return "üü° –•–æ—Ä–æ—à–æ"
        elif latest_quality >= 0.4:
            return "üü† –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
        else:
            return "üî¥ –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
    
    def _get_training_recommendations(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
        if not self.metrics_history['attention_diagonality']:
            return "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞"
            
        latest_diag = self.metrics_history['attention_diagonality'][-1]
        if latest_diag < 0.3:
            return "üî• –ü—Ä–æ–≤–µ—Ä–∏—Ç—å guided attention loss!"
        elif latest_diag < 0.6:
            return "‚ö° –°–Ω–∏–∑–∏—Ç—å learning rate"
        else:
            return "‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
    
    def _analyze_potential_issues(self, metrics: Dict[str, Any]) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã."""
        issues = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        diag = metrics.get('attention_diagonality', 0)
        if diag < 0.3:
            issues.append("üö® –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞ –≤–º–µ—Å—Ç–æ –¥–∏–∞–≥–æ–Ω–∞–ª–∏ - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞ alignment!")
        elif diag < 0.5:
            issues.append("‚ö†Ô∏è –°–ª–∞–±–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å attention")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ gate accuracy
        gate_acc = metrics.get('gate_accuracy', 0)
        if gate_acc < 0.5:
            issues.append("‚ùå –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å gate - –ø—Ä–æ–±–ª–µ–º—ã —Å –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π")
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ loss
        train_loss = metrics.get('train_loss', 0)
        val_loss = metrics.get('val_loss', 0)
        if val_loss > train_loss * 1.5:
            issues.append("üìà –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è")
            
        return issues
    
    def _get_specific_recommendations(self, metrics: Dict[str, Any]) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
        recommendations = []
        
        diag = metrics.get('attention_diagonality', 0)
        if diag < 0.3:
            recommendations.extend([
                "üî• –£–≤–µ–ª–∏—á–∏—Ç—å guide_loss_weight –¥–æ 15.0",
                "‚ö° –°–Ω–∏–∑–∏—Ç—å learning_rate –¥–æ 1e-5",
                "üéØ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å guided attention —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é"
            ])
        elif diag < 0.6:
            recommendations.extend([
                "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å alignment",
                "‚öôÔ∏è –†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
            ])
        else:
            recommendations.append("‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ")
            
        return recommendations
    
    async def _send_message_async(self, message: str) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        try:
            if self.bot:
                await self.bot.send_message(
                    chat_id=self.chat_id,
                    text=message,
                    parse_mode='Markdown'
                )
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _send_photo_async(self, photo_buffer: io.BytesIO, caption: str) -> None:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é."""
        try:
            if self.bot:
                await self.bot.send_photo(
                    chat_id=self.chat_id,
                    photo=photo_buffer,
                    caption=caption,
                    parse_mode='Markdown'
                )
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    def send_training_start(self, config: Dict[str, Any]) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –æ–±—É—á–µ–Ω–∏—è."""
        if not self.enabled:
            return
            
        message = f"üöÄ **–ó–ê–ü–£–°–ö –û–ë–£–ß–ï–ù–ò–Ø TTS**\n\n"
        message += f"üìÖ **–í—Ä–µ–º—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        message += f"üéØ **–ú–æ–¥–µ–ª—å:** Smart Tuner TTS v2\n"
        message += f"‚öôÔ∏è **Learning Rate:** `{config.get('learning_rate', 'N/A')}`\n"
        message += f"üì¶ **Batch Size:** `{config.get('batch_size', 'N/A')}`\n\n"
        message += f"üìä **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 1000 —à–∞–≥–æ–≤**\n"
        message += f"üéµ **–¶–µ–ª—å: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –≥–æ–ª–æ—Å –±–µ–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤**"
        
        asyncio.create_task(self._send_message_async(message))
    
    def send_training_complete(self, final_metrics: Dict[str, Any]) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è."""
        if not self.enabled:
            return
            
        message = f"üèÅ **–û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!**\n\n"
        message += f"üìÖ **–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        message += f"üéØ **–§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:** `{final_metrics.get('final_diagonality', 0):.3f}`\n"
        message += f"üìä **–§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ:** `{final_metrics.get('final_quality', 0):.1%}`\n"
        message += f"üèÜ **–õ—É—á—à–∏–π val_loss:** `{final_metrics.get('best_val_loss', 0):.4f}`\n\n"
        
        if final_metrics.get('final_diagonality', 0) >= 0.8:
            message += f"üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!** –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –æ—Ç–ª–∏—á–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å!\n"
            message += f"üéµ –ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≥–æ–ª–æ—Å–∞!"
        else:
            message += f"üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:** –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è alignment"
        
        asyncio.create_task(self._send_message_async(message)) 