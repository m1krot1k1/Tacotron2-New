#!/usr/bin/env python3
"""
–ü–∞—Ç—á –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –≤ MLflow
–î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
"""

import mlflow
import psutil
import torch
import time
import os

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
try:
    import pynvml
    pynvml.nvmlInit()
    GPU_AVAILABLE = True
    gpu_count = pynvml.nvmlDeviceGetCount()
    print(f"‚úÖ GPU –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è {gpu_count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
except:
    GPU_AVAILABLE = False
    print("‚ö†Ô∏è GPU –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

def log_system_metrics(step):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
    try:
        system_metrics = {}
        
        # CPU –º–µ—Ç—Ä–∏–∫–∏
        system_metrics['system/cpu_usage_percent'] = psutil.cpu_percent(interval=0.1)
        system_metrics['system/cpu_count'] = psutil.cpu_count()
        
        # –ü–∞–º—è—Ç—å
        memory = psutil.virtual_memory()
        system_metrics['system/memory_usage_percent'] = memory.percent
        system_metrics['system/memory_available_gb'] = memory.available / (1024**3)
        system_metrics['system/memory_used_gb'] = memory.used / (1024**3)
        
        # –î–∏—Å–∫
        disk = psutil.disk_usage('.')
        system_metrics['system/disk_usage_percent'] = (disk.used / disk.total) * 100
        system_metrics['system/disk_free_gb'] = disk.free / (1024**3)
        
        # –ü—Ä–æ—Ü–µ—Å—Å
        process = psutil.Process()
        system_metrics['system/process_memory_mb'] = process.memory_info().rss / (1024**2)
        
        # GPU –º–µ—Ç—Ä–∏–∫–∏
        if GPU_AVAILABLE:
            for i in range(gpu_count):
                handle = pynvml.nvmlDeviceGetHandleByIndex(i)
                
                # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU
                util = pynvml.nvmlDeviceGetUtilizationRates(handle)
                system_metrics[f'gpu_{i}/utilization_percent'] = util.gpu
                system_metrics[f'gpu_{i}/memory_utilization_percent'] = util.memory
                
                # –ü–∞–º—è—Ç—å GPU
                mem_info = pynvml.nvmlDeviceGetMemoryInfo(handle)
                system_metrics[f'gpu_{i}/memory_used_mb'] = mem_info.used / (1024**2)
                system_metrics[f'gpu_{i}/memory_free_mb'] = mem_info.free / (1024**2)
                system_metrics[f'gpu_{i}/memory_usage_percent'] = (mem_info.used / mem_info.total) * 100
                
                # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
                try:
                    temp = pynvml.nvmlDeviceGetTemperature(handle, pynvml.NVML_TEMPERATURE_GPU)
                    system_metrics[f'gpu_{i}/temperature_celsius'] = temp
                except:
                    pass
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        mlflow.log_metrics(system_metrics, step=step)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫: {e}")

def log_enhanced_training_metrics(metrics_dict, step):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ–±—É—á–µ–Ω–∏—è"""
    try:
        # –†–µ–æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        enhanced_metrics = {}
        
        for key, value in metrics_dict.items():
            if key == 'training.loss':
                enhanced_metrics['Loss/Total_Training'] = value
            elif key == 'training.taco_loss':
                enhanced_metrics['Loss/Tacotron'] = value
            elif key == 'training.mi_loss':
                enhanced_metrics['Loss/MI'] = value
            elif key == 'training.guide_loss':
                enhanced_metrics['Loss/Guide'] = value
            elif key == 'training.gate_loss':
                enhanced_metrics['Loss/Gate'] = value
            elif key == 'training.emb_loss':
                enhanced_metrics['Loss/Embedding'] = value
            elif key == 'validation.loss':
                enhanced_metrics['Loss/Validation'] = value
            elif key == 'grad_norm':
                enhanced_metrics['Gradients/Norm'] = value
            elif key == 'learning_rate':
                enhanced_metrics['Optimizer/Learning_Rate'] = value
            elif key == 'duration':
                enhanced_metrics['Performance/Step_Duration'] = value
            elif key == 'guide_loss_weight':
                enhanced_metrics['Weights/Guide_Loss'] = value
            else:
                enhanced_metrics[key] = value
        
        # –õ–æ–≥–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        mlflow.log_metrics(enhanced_metrics, step=step)
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—ã–µ 10 —à–∞–≥–æ–≤
        if step % 10 == 0:
            log_system_metrics(step)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ç—á–∏–Ω–≥–∞ train.py
def patch_training_logging():
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –ø–∞—Ç—á–∏–Ω–≥—É"""
    print("""
üîß –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:

1. –í train.py –Ω–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É:
   mlflow.log_metrics({...}, step=iteration)

2. –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞:
   from mlflow_metrics_enhancer import log_enhanced_training_metrics
   log_enhanced_training_metrics({...}, iteration)

3. –î–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ train.py:
   import mlflow_metrics_enhancer

–≠—Ç–æ –¥–æ–±–∞–≤–∏—Ç:
‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ (CPU, GPU, RAM)
‚úÖ –£–ª—É—á—à–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫—É –º–µ—Ç—Ä–∏–∫
‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ MLflow UI
""")

if __name__ == "__main__":
    patch_training_logging()
