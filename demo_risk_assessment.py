"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Risk Assessment Module –¥–ª—è Enhanced Tacotron2 AI System

–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –ø–æ–º–æ—â—å—é
Monte Carlo —Å–∏–º—É–ª—è—Ü–∏–π –∏ bootstrap –∞–Ω–∞–ª–∏–∑–∞.
"""

import logging
import json
from datetime import datetime
from risk_assessment_module import (
    RiskAssessmentModule,
    RiskAssessmentConfig,
    quick_risk_assessment,
    quick_system_assessment
)

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('risk_assessment_demo.log')
        ]
    )

def print_separator(title: str):
    """–ü–µ—á–∞—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º"""
    print("\n" + "="*60)
    print(f" {title} ")
    print("="*60)

def print_parameter_risk(risk):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Ä–∏—Å–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
    print(f"\nüìä –ü–∞—Ä–∞–º–µ—Ç—Ä: {risk.parameter_name}")
    print(f"   –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {risk.current_value}")
    print(f"   –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {risk.proposed_value}")
    print(f"   üéØ Risk Score: {risk.risk_score:.3f}")
    print(f"   üìà –î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: [{risk.confidence_interval[0]:.3f}, {risk.confidence_interval[1]:.3f}]")
    print(f"   üìê –ú–µ—Ç—Ä–∏–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏: {risk.stability_metric:.3f}")
    print(f"   ‚ö†Ô∏è  –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {risk.impact_severity.upper()}")
    print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {risk.recommendation}")

def print_system_assessment(assessment):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
    print(f"\nüéØ –û–±—â–∏–π —Ä–∏—Å–∫ —Å–∏—Å—Ç–µ–º—ã: {assessment.overall_risk_score:.3f}")
    print(f"‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å: {assessment.is_safe_to_proceed}")
    print(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(assessment.parameter_risks)}")
    
    print(f"\nüîí –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
    constraints = assessment.safety_constraints
    if constraints.get('rejected_changes'):
        print(f"   üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {constraints['rejected_changes']}")
    if constraints.get('gradual_changes'):
        print(f"   üêå –¢—Ä–µ–±—É—é—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {constraints['gradual_changes']}")
    if constraints.get('monitoring_required'):
        print(f"   üëÄ –¢—Ä–µ–±—É—é—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {constraints['monitoring_required']}")
    
    print(f"\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã:")
    for i, rec in enumerate(assessment.recommendations, 1):
        print(f"   {i}. {rec}")

def demo_single_parameter_assessment():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
    print_separator("–î–ï–ú–û: –û—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥—É–ª—è —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –¥–ª—è –¥–µ–º–æ
    config = RiskAssessmentConfig(
        n_samples=2000,
        n_bootstrap=200,
        risk_db_path="demo_risk_assessment.db"
    )
    module = RiskAssessmentModule(config)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ learning rate
    print("\nüü¢ –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ learning rate")
    risk1 = module.assess_parameter_risk(
        parameter_name="learning_rate",
        current_value=1e-3,
        proposed_value=1.2e-3,  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ 20%
        parameter_type="learning_rate"
    )
    print_parameter_risk(risk1)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –†–∏—Å–∫–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ learning rate
    print("\nüü° –°—Ü–µ–Ω–∞—Ä–∏–π 2: –†–∏—Å–∫–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ learning rate")
    risk2 = module.assess_parameter_risk(
        parameter_name="learning_rate",
        current_value=1e-3,
        proposed_value=5e-3,  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ 5 —Ä–∞–∑
        parameter_type="learning_rate"
    )
    print_parameter_risk(risk2)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    print("\nüî¥ –°—Ü–µ–Ω–∞—Ä–∏–π 3: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ learning rate")
    risk3 = module.assess_parameter_risk(
        parameter_name="learning_rate",
        current_value=1e-4,
        proposed_value=1e-1,  # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ 1000 —Ä–∞–∑
        parameter_type="learning_rate"
    )
    print_parameter_risk(risk3)
    
    return module

def demo_system_risk_assessment(module):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤"""
    print_separator("–î–ï–ú–û: –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–æ–≤")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print("\nüü¢ –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    conservative_changes = {
        "learning_rate": (1e-3, 1.1e-3),      # +10%
        "batch_size": (32, 36),                # +12.5%
        "gradient_clip": (1.0, 1.1),           # +10%
        "weight_decay": (1e-4, 1.2e-4)        # +20%
    }
    
    assessment1 = module.assess_system_risk(conservative_changes)
    print_system_assessment(assessment1)
    
    # –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É
    print(f"\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:")
    for risk in assessment1.parameter_risks:
        print(f"   ‚Ä¢ {risk.parameter_name}: {risk.risk_score:.3f} ({risk.impact_severity})")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –°–º–µ—à–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print("\nüü° –°—Ü–µ–Ω–∞—Ä–∏–π 2: –°–º–µ—à–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ + –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ)")
    mixed_changes = {
        "learning_rate": (1e-3, 0.9e-3),      # –£–º–µ–Ω—å—à–µ–Ω–∏–µ –Ω–∞ 10% (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        "batch_size": (32, 128),               # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ 4 —Ä–∞–∑–∞ (—Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫)
        "gradient_clip": (1.0, 3.0),           # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ 3 —Ä–∞–∑–∞ (–≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫)
        "dropout_rate": (0.1, 0.15)           # –ù–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
    }
    
    assessment2 = module.assess_system_risk(mixed_changes)
    print_system_assessment(assessment2)
    
    print(f"\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:")
    for risk in assessment2.parameter_risks:
        print(f"   ‚Ä¢ {risk.parameter_name}: {risk.risk_score:.3f} ({risk.impact_severity})")
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    print("\nüî¥ –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    aggressive_changes = {
        "learning_rate": (1e-3, 1e-2),        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ 10 —Ä–∞–∑
        "batch_size": (32, 512),               # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ 16 —Ä–∞–∑
        "gradient_clip": (1.0, 10.0),          # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ 10 —Ä–∞–∑
    }
    
    assessment3 = module.assess_system_risk(aggressive_changes)
    print_system_assessment(assessment3)
    
    print(f"\nüìã –î–µ—Ç–∞–ª–∏ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:")
    for risk in assessment3.parameter_risks:
        print(f"   ‚Ä¢ {risk.parameter_name}: {risk.risk_score:.3f} ({risk.impact_severity})")

def demo_quick_functions():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
    print_separator("–î–ï–ú–û: –ë—ã—Å—Ç—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ü–µ–Ω–∫–∏")
    
    print("\n‚ö° –ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:")
    quick_risk = quick_risk_assessment("batch_size", 32, 64)
    print_parameter_risk(quick_risk)
    
    print("\n‚ö° –ë—ã—Å—Ç—Ä–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:")
    quick_changes = {
        "learning_rate": (1e-3, 2e-3),
        "batch_size": (32, 48)
    }
    quick_assessment = quick_system_assessment(quick_changes)
    print_system_assessment(quick_assessment)

def demo_real_world_scenarios():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –æ–±—É—á–µ–Ω–∏—è"""
    print_separator("–î–ï–ú–û: –†–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è")
    
    module = RiskAssessmentModule()
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–∞–µ—Ç—Å—è
    print("\nüìâ –°—Ü–µ–Ω–∞—Ä–∏–π: –ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–æ–±—É—á–∞–µ—Ç—Å—è, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—é")
    overfitting_fix = {
        "learning_rate": (1e-3, 5e-4),        # –£–º–µ–Ω—å—à–∞–µ–º LR
        "weight_decay": (1e-4, 1e-3),         # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—é
        "dropout_rate": (0.1, 0.3),           # –ë–æ–ª—å—à–µ dropout
        "gradient_clip": (1.0, 0.5)           # –ë–æ–ª–µ–µ –∂–µ—Å—Ç–∫–∏–π clipping
    }
    
    assessment = module.assess_system_risk(overfitting_fix)
    print_system_assessment(assessment)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    print("\nüêå –°—Ü–µ–Ω–∞—Ä–∏–π: –û–±—É—á–µ–Ω–∏–µ –∏–¥–µ—Ç —Å–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ, –Ω—É–∂–Ω–æ —É—Å–∫–æ—Ä–∏—Ç—å")
    slow_training_fix = {
        "learning_rate": (5e-4, 1.5e-3),      # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º LR
        "batch_size": (16, 32),                # –ë–æ–ª—å—à–µ batch size
        "gradient_accumulation": (1, 2)        # –ê–∫–∫—É–º—É–ª—è—Ü–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
    }
    
    assessment = module.assess_system_risk(slow_training_fix)
    print_system_assessment(assessment)
    
    # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–Ω–∏–º–∞–Ω–∏–µ–º
    print("\nüëÅÔ∏è –°—Ü–µ–Ω–∞—Ä–∏–π: –ü—Ä–æ–±–ª–µ–º—ã —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –≤–Ω–∏–º–∞–Ω–∏—è")
    attention_fix = {
        "attention_dropout": (0.1, 0.05),     # –ú–µ–Ω—å—à–µ dropout –¥–ª—è –≤–Ω–∏–º–∞–Ω–∏—è
        "attention_heads": (8, 4),             # –ú–µ–Ω—å—à–µ –≥–æ–ª–æ–≤ –≤–Ω–∏–º–∞–Ω–∏—è
        "attention_dim": (512, 256)            # –ú–µ–Ω—å—à–µ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å
    }
    
    assessment = module.assess_system_risk(attention_fix)
    print_system_assessment(assessment)

def demo_database_features(module):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print_separator("–î–ï–ú–û: –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ü–µ–Ω–æ–∫
    print("\nüìö –ò—Å—Ç–æ—Ä–∏—è –æ—Ü–µ–Ω–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ learning_rate:")
    history = module.get_parameter_risk_history("learning_rate", days=1)
    
    if history:
        print(f"   –ù–∞–π–¥–µ–Ω–æ {len(history)} –∑–∞–ø–∏—Å–µ–π:")
        for record in history[-3:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3
            print(f"   ‚Ä¢ {record['timestamp'][:19]}: risk={record['risk_score']:.3f}")
    else:
        print("   –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞")
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    print("\nüîß –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤:")
    status = module.get_system_status()
    print(f"   ‚Ä¢ –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è: {status['module_status']}")
    print(f"   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∏—Å—Ç–æ—Ä–∏–∏: {len(status['parameter_history_count'])}")
    print(f"   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {status['database_path']}")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = status['config']
    print(f"   ‚Ä¢ Monte Carlo —Å—ç–º–ø–ª—ã: {config['n_samples']}")
    print(f"   ‚Ä¢ Bootstrap —Å—ç–º–ø–ª—ã: {config['n_bootstrap']}")
    print(f"   ‚Ä¢ –ü–æ—Ä–æ–≥ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞: {config['high_risk_threshold']}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    setup_logging()
    
    print("üéØ RISK ASSESSMENT MODULE DEMO")
    print("Enhanced Tacotron2 AI System")
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    try:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ –æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        module = demo_single_parameter_assessment()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        demo_system_risk_assessment(module)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±—ã—Å—Ç—Ä—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        demo_quick_functions()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
        demo_real_world_scenarios()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        demo_database_features(module)
        
        print_separator("–ó–ê–í–ï–†–®–ï–ù–ò–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò")
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Risk Assessment Module –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("üìä –í—Å–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: demo_risk_assessment.db")
        print("üìù –õ–æ–≥–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª: risk_assessment_demo.log")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        final_status = module.get_system_status()
        total_assessments = sum(final_status['parameter_history_count'].values())
        print(f"üìà –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –æ—Ü–µ–Ω–æ–∫: {total_assessments}")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        logging.error(f"Demo failed: {e}")
        raise

if __name__ == "__main__":
    main() 