#!/usr/bin/env python3
"""
–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–µ–¥–µ–Ω–∏—è –ª–æ–≥–æ–≤ –æ–±—É—á–µ–Ω–∏—è TTS

–ê–≤—Ç–æ—Ä: AI Assistant
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –°–æ–∑–¥–∞–Ω–∏–µ markdown –ª–æ–≥–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –æ–±—É—á–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
"""

import os
import json
import yaml
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Optional, Any
import mlflow
import matplotlib.pyplot as plt
import seaborn as sns
from dataclasses import dataclass, asdict

@dataclass
class TrainingEvent:
    """–°–æ–±—ã—Ç–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—É—á–µ–Ω–∏—è"""
    timestamp: str
    event_type: str  # "start", "metric", "param_change", "warning", "stop"
    data: Dict[str, Any]
    description: str
    
class SmartTrainingLogger:
    """
    –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è TTS
    """
    
    def __init__(self, logs_dir="smart_logs"):
        self.logs_dir = Path(logs_dir)
        self.logs_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
        (self.logs_dir / "training_sessions").mkdir(exist_ok=True)
        (self.logs_dir / "plots").mkdir(exist_ok=True)
        (self.logs_dir / "param_changes").mkdir(exist_ok=True)
        
        self.current_session = None
        self.session_file = None
        self.events_log = []
        
        print(f"üìù Smart Training Logger –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ {self.logs_dir}")
    
    def start_training_session(self, run_id: str, training_params: Dict):
        """
        –ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            run_id: MLflow run ID
            training_params: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
        """
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        session_name = f"training_session_{run_id[:8]}_{timestamp}"
        
        self.current_session = {
            "session_id": session_name,
            "run_id": run_id,
            "start_time": datetime.now().isoformat(),
            "training_params": training_params,
            "events": [],
            "metrics_history": {},
            "param_changes": []
        }
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏
        self.session_file = self.logs_dir / "training_sessions" / f"{session_name}.md"
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        self._write_session_header()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ
        self.log_event(
            event_type="start",
            data=training_params,
            description=f"üöÄ –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è TTS –º–æ–¥–µ–ª–∏"
        )
        
        print(f"üìä –ù–∞—á–∞—Ç–∞ —Å–µ—Å—Å–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {session_name}")
        return session_name
    
    def log_event(self, event_type: str, data: Dict, description: str):
        """
        –î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –≤ –ª–æ–≥
        
        Args:
            event_type: —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            data: –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
            description: –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        """
        if not self.current_session:
            print("‚ö†Ô∏è –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞—á–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ start_training_session()")
            return
        
        event = TrainingEvent(
            timestamp=datetime.now().isoformat(),
            event_type=event_type,
            data=data,
            description=description
        )
        
        self.current_session["events"].append(asdict(event))
        self.events_log.append(event)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª –ª–æ–≥–∞
        self._update_session_log(event)
    
    def log_metrics(self, step: int, metrics: Dict[str, float]):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            step: —à–∞–≥ –æ–±—É—á–µ–Ω–∏—è
            metrics: —Å–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫
        for metric_name, value in metrics.items():
            if metric_name not in self.current_session["metrics_history"]:
                self.current_session["metrics_history"][metric_name] = []
            
            self.current_session["metrics_history"][metric_name].append({
                "step": step,
                "value": value,
                "timestamp": datetime.now().isoformat()
            })
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ —Å–æ–±—ã—Ç–∏–µ (–∫–∞–∂–¥—ã–µ 100 —à–∞–≥–æ–≤)
        if step % 100 == 0:
            key_metrics = {
                k: v for k, v in metrics.items() 
                if any(x in k.lower() for x in ["loss", "grad", "learning"])
            }
            
            self.log_event(
                event_type="metric",
                data={"step": step, "metrics": key_metrics},
                description=f"üìä –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ —à–∞–≥–µ {step}"
            )
    
    def log_parameter_change(self, param_name: str, old_value: Any, new_value: Any, reason: str):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        
        Args:
            param_name: –∏–º—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
            old_value: —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            new_value: –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ  
            reason: –ø—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        """
        change_data = {
            "param_name": param_name,
            "old_value": old_value,
            "new_value": new_value,
            "reason": reason,
            "timestamp": datetime.now().isoformat()
        }
        
        self.current_session["param_changes"].append(change_data)
        
        self.log_event(
            event_type="param_change",
            data=change_data,
            description=f"‚öôÔ∏è –ò–∑–º–µ–Ω–µ–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä {param_name}: {old_value} ‚Üí {new_value}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        self._save_param_change_details(change_data)
    
    def log_warning(self, warning_type: str, message: str, data: Dict = None):
        """
        –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        
        Args:
            warning_type: —Ç–∏–ø –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            message: —Å–æ–æ–±—â–µ–Ω–∏–µ
            data: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        self.log_event(
            event_type="warning",
            data={"warning_type": warning_type, "data": data or {}},
            description=f"‚ö†Ô∏è {warning_type}: {message}"
        )
    
    def end_training_session(self, final_metrics: Dict = None, status: str = "completed"):
        """
        –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é –æ–±—É—á–µ–Ω–∏—è
        
        Args:
            final_metrics: —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            status: —Å—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        """
        if not self.current_session:
            return
        
        self.current_session["end_time"] = datetime.now().isoformat()
        self.current_session["status"] = status
        self.current_session["final_metrics"] = final_metrics or {}
        
        self.log_event(
            event_type="stop",
            data={"status": status, "final_metrics": final_metrics or {}},
            description=f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è: {status}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self._create_final_report()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
        self._generate_plots()
        
        print(f"‚úÖ –°–µ—Å—Å–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {self.current_session['session_id']}")
    
    def _write_session_header(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ—Å—Å–∏–∏"""
        with open(self.session_file, 'w', encoding='utf-8') as f:
            f.write(f"# üéØ –°–µ—Å—Å–∏—è –æ–±—É—á–µ–Ω–∏—è TTS\n\n")
            f.write(f"**Session ID:** `{self.current_session['session_id']}`\n")
            f.write(f"**MLflow Run ID:** `{self.current_session['run_id']}`\n")
            f.write(f"**–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:** {self.current_session['start_time']}\n")
            f.write(f"**–°—Ç–∞—Ç—É—Å:** üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ...\n\n")
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è
            f.write("## ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è\n\n")
            f.write("```yaml\n")
            f.write(yaml.dump(self.current_session['training_params'], default_flow_style=False, allow_unicode=True))
            f.write("```\n\n")
            
            # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ–∫—Ü–∏—é —Å–æ–±—ã—Ç–∏–π
            f.write("## üìä –ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è\n\n")
    
    def _update_session_log(self, event: TrainingEvent):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–≥ —Å–µ—Å—Å–∏–∏ –Ω–æ–≤—ã–º —Å–æ–±—ã—Ç–∏–µ–º"""
        with open(self.session_file, 'a', encoding='utf-8') as f:
            timestamp = datetime.fromisoformat(event.timestamp).strftime("%H:%M:%S")
            
            if event.event_type == "start":
                f.write(f"### üöÄ {timestamp} - –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è\n\n")
                
            elif event.event_type == "metric":
                step = event.data.get("step", 0)
                metrics = event.data.get("metrics", {})
                f.write(f"### üìä {timestamp} - –®–∞–≥ {step}\n\n")
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
                if metrics:
                    f.write("| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |\n")
                    f.write("|---------|----------|\n")
                    for name, value in metrics.items():
                        if isinstance(value, (int, float)):
                            f.write(f"| `{name}` | {value:.6f} |\n")
                        else:
                            f.write(f"| `{name}` | {value} |\n")
                    f.write("\n")
                
            elif event.event_type == "param_change":
                param_name = event.data.get("param_name", "")
                old_value = event.data.get("old_value", "")
                new_value = event.data.get("new_value", "")
                reason = event.data.get("reason", "")
                
                f.write(f"### ‚öôÔ∏è {timestamp} - –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞\n\n")
                f.write(f"**–ü–∞—Ä–∞–º–µ—Ç—Ä:** `{param_name}`\n")
                f.write(f"**–ë—ã–ª–æ:** `{old_value}`\n")
                f.write(f"**–°—Ç–∞–ª–æ:** `{new_value}`\n")
                f.write(f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason}\n\n")
                
            elif event.event_type == "warning":
                warning_type = event.data.get("warning_type", "")
                f.write(f"### ‚ö†Ô∏è {timestamp} - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: {warning_type}\n\n")
                f.write(f"{event.description}\n\n")
                
            elif event.event_type == "stop":
                status = event.data.get("status", "unknown")
                f.write(f"### üèÅ {timestamp} - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è\n\n")
                f.write(f"**–°—Ç–∞—Ç—É—Å:** {status}\n\n")
    
    def _save_param_change_details(self, change_data: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"param_change_{change_data['param_name']}_{timestamp}.json"
        filepath = self.logs_dir / "param_changes" / filename
        
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(change_data, f, indent=2, ensure_ascii=False, default=str)
    
    def _create_final_report(self):
        """–°–æ–∑–¥–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–µ—Å—Å–∏–∏"""
        with open(self.session_file, 'a', encoding='utf-8') as f:
            f.write("\n" + "="*80 + "\n")
            f.write("## üìã –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç\n\n")
            
            # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            start_time = datetime.fromisoformat(self.current_session['start_time'])
            end_time = datetime.fromisoformat(self.current_session['end_time'])
            duration = end_time - start_time
            
            f.write(f"**–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:** {duration}\n")
            f.write(f"**–°—Ç–∞—Ç—É—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:** {self.current_session['status']}\n")
            f.write(f"**–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π:** {len(self.current_session['events'])}\n")
            f.write(f"**–ò–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:** {len(self.current_session['param_changes'])}\n\n")
            
            # –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if self.current_session.get('final_metrics'):
                f.write("### üìä –§–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏\n\n")
                f.write("| –ú–µ—Ç—Ä–∏–∫–∞ | –ó–Ω–∞—á–µ–Ω–∏–µ |\n")
                f.write("|---------|----------|\n")
                for name, value in self.current_session['final_metrics'].items():
                    if isinstance(value, (int, float)):
                        f.write(f"| `{name}` | {value:.6f} |\n")
                    else:
                        f.write(f"| `{name}` | {value} |\n")
                f.write("\n")
            
            # –°–≤–æ–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if self.current_session['param_changes']:
                f.write("### ‚öôÔ∏è –°–≤–æ–¥–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n\n")
                f.write("| –í—Ä–µ–º—è | –ü–∞—Ä–∞–º–µ—Ç—Ä | –ë—ã–ª–æ | –°—Ç–∞–ª–æ | –ü—Ä–∏—á–∏–Ω–∞ |\n")
                f.write("|-------|----------|------|-------|----------|\n")
                
                for change in self.current_session['param_changes']:
                    time_str = datetime.fromisoformat(change['timestamp']).strftime("%H:%M:%S")
                    f.write(f"| {time_str} | `{change['param_name']}` | `{change['old_value']}` | `{change['new_value']}` | {change['reason']} |\n")
                f.write("\n")
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            f.write("### üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è\n\n")
            recommendations = self._generate_recommendations()
            for rec in recommendations:
                f.write(f"- {rec}\n")
            f.write("\n")
            
            f.write(f"---\n")
            f.write(f"*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n")
    
    def _generate_recommendations(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è"""
        recommendations = []
        
        # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if self.current_session.get('end_time') and self.current_session.get('start_time'):
            start_time = datetime.fromisoformat(self.current_session['start_time'])
            end_time = datetime.fromisoformat(self.current_session['end_time'])
            duration_hours = (end_time - start_time).total_seconds() / 3600
            
            if duration_hours < 3:
                recommendations.append("‚è∞ –û–±—É—á–µ–Ω–∏–µ –±—ã–ª–æ –∫–æ—Ä–æ—Ç–∫–∏–º. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ patience –¥–ª—è early stopping")
            elif duration_hours > 24:
                recommendations.append("‚è∞ –û–±—É—á–µ–Ω–∏–µ –±—ã–ª–æ –æ—á–µ–Ω—å –¥–æ–ª–≥–∏–º. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å learning rate schedule")
        
        # –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        param_changes_count = len(self.current_session['param_changes'])
        if param_changes_count > 10:
            recommendations.append("‚öôÔ∏è –ú–Ω–æ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        elif param_changes_count == 0:
            recommendations.append("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∏–∑–º–µ–Ω—è–ª–∏—Å—å. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        warnings = [e for e in self.current_session['events'] if e['event_type'] == 'warning']
        if len(warnings) > 5:
            recommendations.append("‚ö†Ô∏è –ú–Ω–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è")
        
        if not recommendations:
            recommendations.append("‚úÖ –û–±—É—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
        return recommendations
    
    def _generate_plots(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫–∏ –º–µ—Ç—Ä–∏–∫"""
        if not self.current_session.get('metrics_history'):
            return
        
        try:
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
            plt.style.use('default')
            sns.set_palette("husl")
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç–µ—Ä—å
            self._plot_losses()
            
            # –ì—Ä–∞—Ñ–∏–∫ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
            self._plot_gradients()
            
            # –ì—Ä–∞—Ñ–∏–∫ learning rate
            self._plot_learning_rate()
            
            print(f"üìä –ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {self.logs_dir / 'plots'}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {e}")
    
    def _plot_losses(self):
        """–ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç–µ—Ä—å"""
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        fig.suptitle('üìä –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Ç–µ—Ä—å –æ–±—É—á–µ–Ω–∏—è', fontsize=16)
        
        loss_metrics = {
            k: v for k, v in self.current_session['metrics_history'].items()
            if 'loss' in k.lower()
        }
        
        if not loss_metrics:
            return
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏
        ax = axes[0, 0]
        for name, history in loss_metrics.items():
            if 'training' in name or 'validation' in name:
                steps = [h['step'] for h in history]
                values = [h['value'] for h in history]
                ax.plot(steps, values, label=name, linewidth=2)
        
        ax.set_title('–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏')
        ax.set_xlabel('–®–∞–≥')
        ax.set_ylabel('Loss')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        # Tacotron –ø–æ—Ç–µ—Ä–∏
        ax = axes[0, 1]
        for name, history in loss_metrics.items():
            if 'taco' in name.lower() or 'gate' in name.lower():
                steps = [h['step'] for h in history]
                values = [h['value'] for h in history]
                ax.plot(steps, values, label=name, linewidth=2)
        
        ax.set_title('Tacotron –ø–æ—Ç–µ—Ä–∏')
        ax.set_xlabel('–®–∞–≥')
        ax.set_ylabel('Loss')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –º–∞—Å—à—Ç–∞–±
        ax = axes[1, 0]
        for name, history in loss_metrics.items():
            if 'training' in name or 'validation' in name:
                steps = [h['step'] for h in history]
                values = [h['value'] for h in history]
                ax.semilogy(steps, values, label=name, linewidth=2)
        
        ax.set_title('–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ (–ª–æ–≥. –º–∞—Å—à—Ç–∞–±)')
        ax.set_xlabel('–®–∞–≥')
        ax.set_ylabel('Log Loss')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        # –°–≥–ª–∞–∂–µ–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏
        ax = axes[1, 1]
        try:
            from scipy.ndimage import uniform_filter1d
            for name, history in loss_metrics.items():
                if 'training' in name or 'validation' in name:
                    steps = [h['step'] for h in history]
                    values = [h['value'] for h in history]
                    if len(values) > 10:
                        smoothed = uniform_filter1d(values, size=min(50, len(values)//10))
                        ax.plot(steps, smoothed, label=f'{name} (—Å–≥–ª–∞–∂–µ–Ω–Ω—ã–π)', linewidth=2)
        except ImportError:
            ax.text(0.5, 0.5, '–¢—Ä–µ–±—É–µ—Ç—Å—è scipy –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è', 
                   ha='center', va='center', transform=ax.transAxes)
        
        ax.set_title('–°–≥–ª–∞–∂–µ–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏')
        ax.set_xlabel('–®–∞–≥')
        ax.set_ylabel('Loss')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"losses_{self.current_session['session_id']}_{timestamp}.png"
        filepath = self.logs_dir / "plots" / filename
        plt.savefig(filepath, dpi=300, bbox_inches='tight')
        plt.close()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ markdown
        with open(self.session_file, 'a', encoding='utf-8') as f:
            f.write(f"\n### üìä –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç–µ—Ä—å\n\n")
            f.write(f"![–ü–æ—Ç–µ—Ä–∏](plots/{filename})\n\n")
    
    def _plot_gradients(self):
        """–ì—Ä–∞—Ñ–∏–∫ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤"""
        grad_metrics = {
            k: v for k, v in self.current_session['metrics_history'].items()
            if 'grad' in k.lower()
        }
        
        if not grad_metrics:
            return
        
        fig, axes = plt.subplots(1, 2, figsize=(12, 5))
        fig.suptitle('üìä –ò—Å—Ç–æ—Ä–∏—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤', fontsize=16)
        
        # –ù–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
        ax = axes[0]
        for name, history in grad_metrics.items():
            steps = [h['step'] for h in history]
            values = [h['value'] for h in history]
            ax.plot(steps, values, label=name, linewidth=2)
        
        ax.set_title('–ù–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤')
        ax.set_xlabel('–®–∞–≥')
        ax.set_ylabel('Gradient Norm')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∏–π –º–∞—Å—à—Ç–∞–±
        ax = axes[1]
        for name, history in grad_metrics.items():
            steps = [h['step'] for h in history]
            values = [h['value'] for h in history]
            ax.semilogy(steps, values, label=name, linewidth=2)
        
        ax.set_title('–ù–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ (–ª–æ–≥. –º–∞—Å—à—Ç–∞–±)')
        ax.set_xlabel('–®–∞–≥')
        ax.set_ylabel('Log Gradient Norm')
        ax.legend()
        ax.grid(True, alpha=0.3)
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"gradients_{self.current_session['session_id']}_{timestamp}.png"
        filepath = self.logs_dir / "plots" / filename
        plt.savefig(filepath, dpi=300, bbox_inches='tight')
        plt.close()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ markdown
        with open(self.session_file, 'a', encoding='utf-8') as f:
            f.write(f"\n### üìä –ì—Ä–∞—Ñ–∏–∫ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤\n\n")
            f.write(f"![–ì—Ä–∞–¥–∏–µ–Ω—Ç—ã](plots/{filename})\n\n")
    
    def _plot_learning_rate(self):
        """–ì—Ä–∞—Ñ–∏–∫ learning rate"""
        lr_metrics = {
            k: v for k, v in self.current_session['metrics_history'].items()
            if 'learning' in k.lower() and 'rate' in k.lower()
        }
        
        if not lr_metrics:
            return
        
        fig, ax = plt.subplots(1, 1, figsize=(10, 6))
        fig.suptitle('üìä –ò—Å—Ç–æ—Ä–∏—è Learning Rate', fontsize=16)
        
        for name, history in lr_metrics.items():
            steps = [h['step'] for h in history]
            values = [h['value'] for h in history]
            ax.plot(steps, values, label=name, linewidth=2)
        
        ax.set_title('Learning Rate')
        ax.set_xlabel('–®–∞–≥')
        ax.set_ylabel('Learning Rate')
        ax.legend()
        ax.grid(True, alpha=0.3)
        ax.set_yscale('log')
        
        plt.tight_layout()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"learning_rate_{self.current_session['session_id']}_{timestamp}.png"
        filepath = self.logs_dir / "plots" / filename
        plt.savefig(filepath, dpi=300, bbox_inches='tight')
        plt.close()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ markdown
        with open(self.session_file, 'a', encoding='utf-8') as f:
            f.write(f"\n### üìä –ì—Ä–∞—Ñ–∏–∫ Learning Rate\n\n")
            f.write(f"![Learning Rate](plots/{filename})\n\n")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
_global_logger = None

def get_training_logger():
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞"""
    global _global_logger
    if _global_logger is None:
        _global_logger = SmartTrainingLogger()
    return _global_logger

def log_training_start(run_id: str, params: Dict):
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger = get_training_logger()
    return logger.start_training_session(run_id, params)

def log_training_metrics(step: int, metrics: Dict):
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫"""
    logger = get_training_logger()
    logger.log_metrics(step, metrics)

def log_param_change(param_name: str, old_value: Any, new_value: Any, reason: str):
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞"""
    logger = get_training_logger()
    logger.log_parameter_change(param_name, old_value, new_value, reason)

def log_training_warning(warning_type: str, message: str, data: Dict = None):
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    logger = get_training_logger()
    logger.log_warning(warning_type, message, data)

def log_training_end(final_metrics: Dict = None, status: str = "completed"):
    """–ë—ã—Å—Ç—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger = get_training_logger()
    logger.end_training_session(final_metrics, status)

if __name__ == "__main__":
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Smart Training Logger")
    
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    logger = SmartTrainingLogger()
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å–µ—Å—Å–∏—é
    session_id = logger.start_training_session(
        run_id="test_run_12345",
        training_params={
            "learning_rate": 0.001,
            "batch_size": 32,
            "model": "Tacotron2"
        }
    )
    
    # –ü—Ä–∏–º–µ—Ä—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logger.log_metrics(100, {
        "training.loss": 2.5,
        "validation.loss": 2.8,
        "grad_norm": 5.2,
        "learning_rate": 0.001
    })
    
    logger.log_parameter_change(
        param_name="learning_rate",
        old_value=0.001,
        new_value=0.0008,
        reason="–ì—Ä–∞–¥–∏–µ–Ω—Ç—ã —Å—Ç–∞–ª–∏ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏"
    )
    
    logger.log_warning(
        warning_type="GradientWarning",
        message="–í—ã—Å–æ–∫–∞—è –Ω–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤",
        data={"grad_norm": 50.0}
    )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    logger.end_training_session(
        final_metrics={
            "final_loss": 1.2,
            "validation_loss": 1.5
        },
        status="completed"
    )
    
    print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω") 