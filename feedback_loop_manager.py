#!/usr/bin/env python3
"""
üîÑ FEEDBACK LOOP MANAGER - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
==============================================================

–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Kalman-—Ñ–∏–ª—å—Ç—Ä–æ–≤
–¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±—É—á–µ–Ω–∏—è –∏ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞.

–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
1. KalmanFilter - —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
2. PIDController - –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ-–∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ-–¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
3. SystemIdentifier - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã
4. FeedbackLoopManager - –≥–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π

–ê–≤—Ç–æ—Ä: Enhanced Tacotron2 AI System
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import numpy as np
import torch
import json
import logging
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Any, Union
from dataclasses import dataclass, asdict
from enum import Enum
from collections import deque
from datetime import datetime
import pickle

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
try:
    from unified_logging_system import UnifiedLoggingSystem
    UNIFIED_LOGGING_AVAILABLE = True
except ImportError:
    UNIFIED_LOGGING_AVAILABLE = False

try:
    from context_aware_training_manager import TrainingPhase
    CONTEXT_MANAGER_AVAILABLE = True
except ImportError:
    class TrainingPhase(Enum):
        PRE_ALIGNMENT = "pre_alignment"
        ALIGNMENT_LEARNING = "alignment"
        REFINEMENT = "refinement"
        CONVERGENCE = "convergence"
    CONTEXT_MANAGER_AVAILABLE = False


class ControlMode(Enum):
    """–†–µ–∂–∏–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    MANUAL = "manual"           # –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    PID = "pid"                # PID –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
    ADAPTIVE = "adaptive"       # –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    KALMAN_PID = "kalman_pid"  # Kalman + PID
    MODEL_PREDICTIVE = "mpc"    # Model Predictive Control


@dataclass
class SystemState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è"""
    timestamp: float
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    loss: float
    learning_rate: float
    gradient_norm: float
    attention_quality: float
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    loss_derivative: float = 0.0
    lr_derivative: float = 0.0
    convergence_rate: float = 0.0
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    batch_size: int = 32
    epoch: int = 0
    step: int = 0
    
    # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    is_stable: bool = True
    needs_intervention: bool = False


@dataclass
class ControlAction:
    """–£–ø—Ä–∞–≤–ª—è—é—â–µ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ"""
    timestamp: float
    action_type: str
    parameter_name: str
    old_value: float
    new_value: float
    confidence: float
    reason: str


class KalmanFilter:
    """üîç Kalman Filter –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    
    def __init__(self, state_dim: int = 4, obs_dim: int = 4):
        """
        Args:
            state_dim: –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è [loss, lr, grad_norm, attention]
            obs_dim: –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
        """
        self.state_dim = state_dim
        self.obs_dim = obs_dim
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Ç—Ä–∏—Ü Kalman —Ñ–∏–ª—å—Ç—Ä–∞
        self.x = np.zeros(state_dim)  # –í–µ–∫—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.P = np.eye(state_dim) * 10.0  # –ö–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–∫–∏
        
        # –ú–∞—Ç—Ä–∏—Ü–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å)
        self.F = np.eye(state_dim)
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–±—É—é —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –ø–æ–∑–≤–æ–ª—è–µ—Ç
        if state_dim >= 2:
            self.F[0, 1] = -0.1  # loss –∑–∞–≤–∏—Å–∏—Ç –æ—Ç lr
        if state_dim >= 3:
            self.F[1, 2] = -0.05  # lr –∑–∞–≤–∏—Å–∏—Ç –æ—Ç gradient norm
        
        # –ú–∞—Ç—Ä–∏—Ü–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
        self.H = np.eye(obs_dim, state_dim)
        
        # –ö–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã —à—É–º–∞
        self.Q = np.eye(state_dim) * 0.1  # –®—É–º –ø—Ä–æ—Ü–µ—Å—Å–∞
        self.R = np.eye(obs_dim) * 1.0    # –®—É–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–π
        
        self.is_initialized = False
        self.prediction_history = deque(maxlen=100)
        
    def predict(self) -> np.ndarray:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.x = self.F @ self.x
        
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
        self.P = self.F @ self.P @ self.F.T + self.Q
        
        return self.x.copy()
    
    def update(self, measurement: np.ndarray) -> np.ndarray:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏—é"""
        if not self.is_initialized:
            self.x = measurement[:self.state_dim]
            self.is_initialized = True
            return self.x.copy()
        
        # –ò–Ω–Ω–æ–≤–∞—Ü–∏—è (—Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º)
        y = measurement - self.H @ self.x
        
        # –ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        S = self.H @ self.P @ self.H.T + self.R
        
        # Kalman gain
        K = self.P @ self.H.T @ np.linalg.inv(S)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.x = self.x + K @ y
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã
        I_KH = np.eye(self.state_dim) - K @ self.H
        self.P = I_KH @ self.P
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        prediction = self.x.copy()
        self.prediction_history.append({
            'timestamp': datetime.now().timestamp(),
            'state': prediction,
            'innovation': y,
            'uncertainty': np.diag(self.P)
        })
        
        return prediction
    
    def get_uncertainty(self) -> np.ndarray:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ü–µ–Ω–∫–∏"""
        return np.sqrt(np.diag(self.P))
    
    def get_prediction_confidence(self) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏"""
        uncertainty = self.get_uncertainty()
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∏–Ω–≤–µ—Ä—Å–∏—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç–∏
        max_uncertainty = np.max(uncertainty)
        if max_uncertainty > 0:
            confidence = 1.0 / (1.0 + max_uncertainty)
        else:
            confidence = 1.0
        return confidence


class PIDController:
    """üéõÔ∏è PID Controller –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    def __init__(self, kp: float = 1.0, ki: float = 0.1, kd: float = 0.01,
                 output_limits: Tuple[float, float] = (-10.0, 10.0)):
        self.kp = kp  # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        self.ki = ki  # –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç  
        self.kd = kd  # –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
        
        self.output_limits = output_limits
        
        # –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.setpoint = 0.0
        self.last_error = 0.0
        self.integral = 0.0
        self.last_time = None
        
        self.error_history = deque(maxlen=100)
        self.output_history = deque(maxlen=100)
        
    def set_setpoint(self, setpoint: float):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
        self.setpoint = setpoint
        
    def update(self, current_value: float, dt: Optional[float] = None) -> float:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ PID –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        if dt is None:
            current_time = datetime.now().timestamp()
            if self.last_time is not None:
                dt = current_time - self.last_time
            else:
                dt = 0.1  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.last_time = current_time
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
        error = self.setpoint - current_value
        
        # –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è
        proportional = self.kp * error
        
        # –ò–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è
        self.integral += error * dt
        integral = self.ki * self.integral
        
        # –î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∞—è
        if dt > 0:
            derivative = self.kd * (error - self.last_error) / dt
        else:
            derivative = 0.0
        
        # –û–±—â–∏–π –≤—ã—Ö–æ–¥
        output = proportional + integral + derivative
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞
        output = np.clip(output, self.output_limits[0], self.output_limits[1])
        
        # –ó–∞—â–∏—Ç–∞ –æ—Ç –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω–æ–≥–æ –Ω–∞—Å—ã—â–µ–Ω–∏—è
        if output == self.output_limits[0] or output == self.output_limits[1]:
            self.integral -= error * dt  # –û—Ç–∫–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∞–ª–∞
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.last_error = error
        
        # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.error_history.append(error)
        self.output_history.append(output)
        
        return output
    
    def tune_parameters(self, error_data: List[float]) -> Dict[str, float]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PID –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–µ—Ç–æ–¥–æ–º Ziegler-Nichols"""
        if len(error_data) < 10:
            return {'kp': self.kp, 'ki': self.ki, 'kd': self.kd}
        
        # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        error_variance = np.var(error_data)
        error_mean = np.mean(np.abs(error_data))
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
        if error_variance > 1.0:  # –í—ã—Å–æ–∫–∞—è –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
            new_kp = self.kp * 0.8  # –£–º–µ–Ω—å—à–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π
            new_ki = self.ki  # –û—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            new_kd = self.kd * 1.2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π
        elif error_mean > 0.5:   # –ë–æ–ª—å—à–∞—è –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
            new_kp = self.kp * 1.1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π
            new_ki = self.ki * 1.2  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞–ª—å–Ω—ã–π
            new_kd = self.kd  # –û—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        else:  # –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª—å–Ω–∞
            new_kp = self.kp
            new_ki = self.ki
            new_kd = self.kd
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
        new_kp = np.clip(new_kp, 0.1, 10.0)
        new_ki = np.clip(new_ki, 0.01, 1.0)
        new_kd = np.clip(new_kd, 0.001, 0.1)
        
        return {'kp': new_kp, 'ki': new_ki, 'kd': new_kd}
    
    def get_performance_metrics(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        if len(self.error_history) < 5:
            return {}
        
        errors = list(self.error_history)
        outputs = list(self.output_history)
        
        return {
            'steady_state_error': np.mean(errors[-10:]) if len(errors) >= 10 else np.mean(errors),
            'overshoot': np.max(outputs) - self.setpoint if outputs else 0.0,
            'settling_time': len(errors),  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞
            'error_variance': np.var(errors),
            'control_effort': np.sum(np.abs(outputs))
        }


class SystemIdentifier:
    """üî¨ System Identifier –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, input_dim: int = 1, output_dim: int = 1, history_length: int = 50):
        self.input_dim = input_dim
        self.output_dim = output_dim
        self.history_length = history_length
        
        # –ò—Å—Ç–æ—Ä–∏—è –≤—Ö–æ–¥–æ–≤ –∏ –≤—ã—Ö–æ–¥–æ–≤
        self.input_history = deque(maxlen=history_length)
        self.output_history = deque(maxlen=history_length)
        
        # –ò–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å (–ø—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è AR –º–æ–¥–µ–ª—å)
        self.model_order = 3
        self.A_matrix = None  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏
        self.B_matrix = None  # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤—Ö–æ–¥–æ–≤
        
        self.model_confidence = 0.0
        self.last_identification_time = None
        
    def add_data_point(self, input_val: np.ndarray, output_val: np.ndarray):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
        self.input_history.append(input_val.copy())
        self.output_history.append(output_val.copy())
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
        if len(self.input_history) >= self.model_order * 3:
            if (self.last_identification_time is None or 
                datetime.now().timestamp() - self.last_identification_time > 30):  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                self._identify_model()
                self.last_identification_time = datetime.now().timestamp()
    
    def _identify_model(self):
        """–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –º–µ—Ç–æ–¥–æ–º –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤"""
        if len(self.output_history) < self.model_order + 2:
            return
        
        try:
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            X = []  # –†–µ–≥—Ä–µ—Å—Å–æ—Ä—ã
            Y = []  # –í—ã—Ö–æ–¥—ã
            
            for i in range(self.model_order, len(self.output_history)):
                # –ê–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                ar_components = []
                for j in range(self.model_order):
                    ar_components.extend(self.output_history[i-j-1])
                
                # –í—Ö–æ–¥–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                input_components = []
                for j in range(self.model_order):
                    if i-j-1 < len(self.input_history):
                        input_components.extend(self.input_history[i-j-1])
                    else:
                        input_components.extend([0.0] * self.input_dim)
                
                X.append(ar_components + input_components)
                Y.append(self.output_history[i])
            
            if len(X) < 3:  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö
                return
            
            X = np.array(X)
            Y = np.array(Y)
            
            # –†–µ—à–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤
            theta = np.linalg.lstsq(X, Y, rcond=None)[0]
            
            # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            ar_coef_size = self.model_order * self.output_dim
            self.A_matrix = theta[:ar_coef_size].reshape(self.output_dim, self.model_order)
            self.B_matrix = theta[ar_coef_size:].reshape(self.output_dim, -1)
            
            # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏
            Y_pred = X @ theta
            mse = np.mean((Y - Y_pred) ** 2)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MSE –≤ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            self.model_confidence = 1.0 / (1.0 + mse)
            
        except np.linalg.LinAlgError:
            # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –ø–ª–æ—Ö–æ –æ–±—É—Å–ª–æ–≤–ª–µ–Ω–∞
            self.model_confidence = 0.0
    
    def predict(self, steps_ahead: int = 1) -> Optional[np.ndarray]:
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        if self.A_matrix is None or len(self.output_history) < self.model_order:
            return None
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
            prediction = np.zeros(self.output_dim)
            
            for i in range(self.model_order):
                if i < len(self.output_history):
                    prediction += self.A_matrix[:, i] * self.output_history[-(i+1)]
            
            return prediction
            
        except Exception:
            return None
    
    def get_model_quality(self) -> Dict[str, float]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏"""
        return {
            'confidence': self.model_confidence,
            'data_points': len(self.output_history),
            'model_age': (datetime.now().timestamp() - self.last_identification_time 
                         if self.last_identification_time else 0)
        }


class FeedbackController:
    """üéÆ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    
    def __init__(self, parameter_name: str, target_range: Tuple[float, float],
                 control_mode: ControlMode = ControlMode.KALMAN_PID):
        self.parameter_name = parameter_name
        self.target_range = target_range
        self.control_mode = control_mode
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.kalman_filter = KalmanFilter(state_dim=1, obs_dim=1)
        self.pid_controller = PIDController()
        self.system_identifier = SystemIdentifier(input_dim=1, output_dim=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PID –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
        if parameter_name == "learning_rate":
            self.pid_controller.kp = 0.5
            self.pid_controller.ki = 0.1
            self.pid_controller.kd = 0.02
            self.pid_controller.output_limits = (-0.001, 0.001)
        elif parameter_name == "loss":
            self.pid_controller.kp = 1.0
            self.pid_controller.ki = 0.2
            self.pid_controller.kd = 0.05
            self.pid_controller.output_limits = (-5.0, 5.0)
        
        # –¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (—Å–µ—Ä–µ–¥–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
        target_value = (target_range[0] + target_range[1]) / 2
        self.pid_controller.set_setpoint(target_value)
        
        self.action_history = deque(maxlen=100)
        self.last_value = None
        
    def process_measurement(self, current_value: float) -> Optional[ControlAction]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è"""
        timestamp = datetime.now().timestamp()
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Kalman
        measurement = np.array([current_value])
        if self.control_mode in [ControlMode.KALMAN_PID, ControlMode.ADAPTIVE]:
            filtered_value = self.kalman_filter.update(measurement)[0]
            confidence = self.kalman_filter.get_prediction_confidence()
        else:
            filtered_value = current_value
            confidence = 1.0
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—É –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        if self.last_value is not None:
            input_data = np.array([self.last_value])
            output_data = np.array([filtered_value])
            self.system_identifier.add_data_point(input_data, output_data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
        if self.target_range[0] <= filtered_value <= self.target_range[1]:
            # –ó–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            self.last_value = filtered_value
            return None
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
        if self.control_mode in [ControlMode.PID, ControlMode.KALMAN_PID]:
            control_output = self.pid_controller.update(filtered_value)
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            if self.parameter_name == "learning_rate":
                # –î–ª—è learning rate –∏—Å–ø–æ–ª—å–∑—É–µ–º –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
                new_value = current_value * (1.0 + control_output)
                new_value = np.clip(new_value, 1e-6, 0.1)
            else:
                # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ - –∞–¥–¥–∏—Ç–∏–≤–Ω–æ–µ
                new_value = current_value + control_output
                
            action = ControlAction(
                timestamp=timestamp,
                action_type="pid_control",
                parameter_name=self.parameter_name,
                old_value=current_value,
                new_value=new_value,
                confidence=confidence,
                reason=f"Value {filtered_value:.4f} outside target range {self.target_range}"
            )
            
            self.action_history.append(action)
            self.last_value = filtered_value
            
            return action
        
        self.last_value = filtered_value
        return None
    
    def get_controller_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        pid_metrics = self.pid_controller.get_performance_metrics()
        model_quality = self.system_identifier.get_model_quality()
        
        return {
            'parameter_name': self.parameter_name,
            'control_mode': self.control_mode.value,
            'target_range': self.target_range,
            'actions_taken': len(self.action_history),
            'kalman_confidence': self.kalman_filter.get_prediction_confidence(),
            'pid_metrics': pid_metrics,
            'model_quality': model_quality,
            'last_uncertainty': self.kalman_filter.get_uncertainty().tolist()
        }


class FeedbackLoopManager:
    """üîÑ –ì–ª–∞–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–≤—è–∑–µ–π"""
    
    def __init__(self, config_file: Optional[str] = None):
        self.controllers: Dict[str, FeedbackController] = {}
        self.system_state_history = deque(maxlen=1000)
        self.global_control_mode = ControlMode.KALMAN_PID
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config = self._load_config(config_file)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self._initialize_default_controllers()
        
        self.logger = self._setup_logger()
        self.logger.info("üîÑ Feedback Loop Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_interventions = 0
        self.successful_interventions = 0
        
    def _setup_logger(self):
        if UNIFIED_LOGGING_AVAILABLE:
            return UnifiedLoggingSystem().register_component("FeedbackLoopManager")
        else:
            logger = logging.getLogger("FeedbackLoopManager")
            logger.setLevel(logging.INFO)
            return logger
    
    def _load_config(self, config_file: Optional[str]) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        default_config = {
            'learning_rate_target': (1e-4, 1e-3),
            'loss_target': (0.5, 5.0),
            'gradient_norm_target': (0.1, 10.0),
            'attention_quality_target': (0.3, 1.0),
            'intervention_threshold': 0.7,
            'max_interventions_per_minute': 5
        }
        
        if config_file and Path(config_file).exists():
            try:
                with open(config_file, 'r') as f:
                    user_config = json.load(f)
                default_config.update(user_config)
            except Exception as e:
                self.logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        return default_config
    
    def _initialize_default_controllers(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        # –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä learning rate
        self.controllers['learning_rate'] = FeedbackController(
            parameter_name='learning_rate',
            target_range=self.config['learning_rate_target'],
            control_mode=self.global_control_mode
        )
        
        # –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä loss
        self.controllers['loss'] = FeedbackController(
            parameter_name='loss',
            target_range=self.config['loss_target'],
            control_mode=self.global_control_mode
        )
        
        # –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä gradient norm
        self.controllers['gradient_norm'] = FeedbackController(
            parameter_name='gradient_norm',
            target_range=self.config['gradient_norm_target'],
            control_mode=self.global_control_mode
        )
        
        # –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä attention quality
        self.controllers['attention_quality'] = FeedbackController(
            parameter_name='attention_quality',
            target_range=self.config['attention_quality_target'],
            control_mode=self.global_control_mode
        )
    
    def update_system_state(self, state: SystemState) -> List[ControlAction]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–π"""
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.system_state_history.append(state)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º
        actions = []
        
        for param_name, controller in self.controllers.items():
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            if hasattr(state, param_name):
                current_value = getattr(state, param_name)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º
                action = controller.process_measurement(current_value)
                
                if action is not None:
                    actions.append(action)
                    self.total_interventions += 1
                    
                    self.logger.info(f"üéõÔ∏è –£–ø—Ä–∞–≤–ª—è—é—â–µ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ: {param_name} "
                                   f"{action.old_value:.6f} ‚Üí {action.new_value:.6f}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
        self._check_system_stability(state)
        
        return actions
    
    def _check_system_stability(self, state: SystemState):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        if len(self.system_state_history) < 10:
            return
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
        recent_states = list(self.system_state_history)[-10:]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–¥–∞ loss
        losses = [s.loss for s in recent_states]
        loss_trend = np.polyfit(range(len(losses)), losses, 1)[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        loss_variance = np.var(losses)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        is_unstable = (
            loss_trend > 0.1 or          # –†–∞—Å—Ç—É—â–∏–π loss
            loss_variance > 10.0 or      # –í—ã—Å–æ–∫–∞—è –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å
            state.gradient_norm > 100.0   # –í–∑—Ä—ã–≤ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
        )
        
        if is_unstable and state.is_stable:
            state.is_stable = False
            state.needs_intervention = True
            self.logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã")
        elif not is_unstable and not state.is_stable:
            state.is_stable = True
            state.needs_intervention = False
            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def get_system_diagnostics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        diagnostics = {
            'total_interventions': self.total_interventions,
            'success_rate': (self.successful_interventions / max(1, self.total_interventions)),
            'system_state_count': len(self.system_state_history),
            'controllers': {}
        }
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        for name, controller in self.controllers.items():
            diagnostics['controllers'][name] = controller.get_controller_status()
        
        # –û–±—â–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
        if self.system_state_history:
            recent_states = list(self.system_state_history)[-5:]
            stability_score = sum(1 for s in recent_states if s.is_stable) / len(recent_states)
            diagnostics['system_stability'] = stability_score
        else:
            diagnostics['system_stability'] = 1.0
        
        return diagnostics
    
    def set_control_mode(self, mode: ControlMode):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤"""
        self.global_control_mode = mode
        
        for controller in self.controllers.values():
            controller.control_mode = mode
            
        self.logger.info(f"üéõÔ∏è –†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mode.value}")
    
    def add_custom_controller(self, parameter_name: str, target_range: Tuple[float, float]):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        self.controllers[parameter_name] = FeedbackController(
            parameter_name=parameter_name,
            target_range=target_range,
            control_mode=self.global_control_mode
        )
        
        self.logger.info(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {parameter_name}")
    
    def remove_controller(self, parameter_name: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞"""
        if parameter_name in self.controllers:
            del self.controllers[parameter_name]
            self.logger.info(f"‚ûñ –£–¥–∞–ª–µ–Ω –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: {parameter_name}")
    
    def get_recommendations(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Å–∏—Å—Ç–µ–º—ã"""
        recommendations = []
        
        if len(self.system_state_history) < 50:
            recommendations.append("–ù–∞–∫–æ–ø–∏—Ç–µ –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è >50 —Å–æ—Å—Ç–æ—è–Ω–∏–π)")
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
        for name, controller in self.controllers.items():
            status = controller.get_controller_status()
            
            if status['kalman_confidence'] < 0.5:
                recommendations.append(f"–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å Kalman —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è {name}. "
                                     "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —à—É–º–∞.")
            
            if 'error_variance' in status.get('pid_metrics', {}):
                if status['pid_metrics']['error_variance'] > 1.0:
                    recommendations.append(f"–í—ã—Å–æ–∫–∞—è –≤–∞—Ä–∏–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –æ—à–∏–±–∫–∏ –¥–ª—è {name}. "
                                         "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–π–∫—É PID –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.")
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        diagnostics = self.get_system_diagnostics()
        if diagnostics['system_stability'] < 0.7:
            recommendations.append("–ù–∏–∑–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        
        return recommendations


# –§—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
def create_feedback_loop_manager(config_file: Optional[str] = None) -> FeedbackLoopManager:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ Feedback Loop Manager"""
    return FeedbackLoopManager(config_file=config_file)


if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("üîÑ Feedback Loop Manager –¥–µ–º–æ")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager = create_feedback_loop_manager()
    
    # –°–∏–º—É–ª—è—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    test_state = SystemState(
        timestamp=datetime.now().timestamp(),
        loss=8.5,
        learning_rate=0.0005,
        gradient_norm=2.5,
        attention_quality=0.4
    )
    
    print(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã: loss={test_state.loss}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    actions = manager.update_system_state(test_state)
    
    if actions:
        print(f"üéõÔ∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(actions)} —É–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–π")
        for action in actions:
            print(f"   {action.parameter_name}: {action.old_value:.6f} ‚Üí {action.new_value:.6f}")
    else:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤ –Ω–æ—Ä–º–µ, –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è")
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    diagnostics = manager.get_system_diagnostics()
    print(f"üìà –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã: —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å = {diagnostics['system_stability']:.2f}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = manager.get_recommendations()
    if recommendations:
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in recommendations:
            print(f"   ‚Ä¢ {rec}")
    
    print("‚úÖ Feedback Loop Manager –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!") 