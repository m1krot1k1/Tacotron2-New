#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üß™ COMPREHENSIVE TESTS: Unified Performance Optimization System
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
1. SystemProfiler - –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ bottleneck'–æ–≤
2. PerformanceOptimizer - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
3. AdaptiveParameterController - –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
4. UnifiedPerformanceOptimizationSystem - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
5. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
6. –≠–∫—Å—Ç—Ä–µ–Ω–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö
"""

import os
import sys
import time
import tempfile
import unittest
from unittest.mock import Mock, patch, MagicMock
import torch
import torch.nn as nn
import numpy as np
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º current directory –≤ path –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.getcwd())

try:
    from unified_performance_optimization_system import (
        UnifiedPerformanceOptimizationSystem,
        SystemProfiler,
        PerformanceOptimizer,
        AdaptiveParameterController,
        PerformanceMetrics,
        OptimizationRecommendation,
        OptimizationPriority,
        PerformanceMetricType,
        create_performance_optimization_system
    )
    OPTIMIZATION_SYSTEM_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Unified Performance Optimization System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    OPTIMIZATION_SYSTEM_AVAILABLE = False

try:
    from hparams import create_hparams
    HPARAMS_AVAILABLE = True
except ImportError:
    HPARAMS_AVAILABLE = False


class MockHparams:
    """Mock –æ–±—ä–µ–∫—Ç –¥–ª—è hparams"""
    def __init__(self):
        self.learning_rate = 1e-3
        self.batch_size = 16
        self.gradient_accumulation_steps = 1
        self.attention_dropout = 0.1
        self.decoder_dropout = 0.1
        self.gradient_clip_thresh = 1.0


def test_system_profiler():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SystemProfiler"""
    print("\nüß™ –¢–ï–°–¢ 1: SystemProfiler")
    
    try:
        profiler = SystemProfiler()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
        metrics = profiler.profile_system_performance()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
        assert isinstance(metrics, PerformanceMetrics), "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–∏–ø–∞ PerformanceMetrics"
        assert metrics.timestamp > 0, "Timestamp –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        assert 0 <= metrics.cpu_usage <= 100, f"CPU usage –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100, –ø–æ–ª—É—á–µ–Ω: {metrics.cpu_usage}"
        assert 0 <= metrics.memory_usage <= 100, f"Memory usage –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0-100, –ø–æ–ª—É—á–µ–Ω: {metrics.memory_usage}"
        assert metrics.memory_available_gb >= 0, "–î–æ—Å—Ç—É–ø–Ω–∞—è –ø–∞–º—è—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å >= 0"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        assert 0 <= metrics.memory_efficiency <= 100, "Memory efficiency –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 0-100%"
        assert 0 <= metrics.compute_efficiency <= 100, "Compute efficiency –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 0-100%"
        
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: CPU={metrics.cpu_usage:.1f}%, RAM={metrics.memory_usage:.1f}%")
        print(f"‚úÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: Memory={metrics.memory_efficiency:.1f}%, Compute={metrics.compute_efficiency:.1f}%")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è bottleneck'–æ–≤
        if metrics.bottleneck_detected:
            print(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω bottleneck: {metrics.bottleneck_type}")
        else:
            print("‚úÖ Bottleneck'–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        assert len(profiler.profiling_history) == 1, "–ò—Å—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 1 –∑–∞–ø–∏—Å—å"
        
        print("‚úÖ SystemProfiler: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ—Ñ–∏–ª–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É")
        return True
        
    except Exception as e:
        print(f"‚ùå SystemProfiler: {e}")
        return False


def test_performance_optimizer():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PerformanceOptimizer"""
    print("\nüß™ –¢–ï–°–¢ 2: PerformanceOptimizer")
    
    try:
        optimizer = PerformanceOptimizer()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
        test_scenarios = [
            {
                'name': '–ù–∏–∑–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU',
                'metrics': PerformanceMetrics(
                    timestamp=time.time(),
                    gpu_usage=30.0,
                    gpu_memory_usage=40.0,
                    memory_usage=50.0
                ),
                'training_context': {'loss': 5.0, 'gradient_norm': 2.0}
            },
            {
                'name': '–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏',
                'metrics': PerformanceMetrics(
                    timestamp=time.time(),
                    memory_usage=95.0,
                    gpu_memory_usage=85.0
                ),
                'training_context': {'loss': 3.0, 'gradient_norm': 1.5}
            },
            {
                'name': '–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã',
                'metrics': PerformanceMetrics(
                    timestamp=time.time(),
                    gpu_usage=80.0,
                    memory_usage=60.0
                ),
                'training_context': {'loss': 10.0, 'gradient_norm': 15.0, 'learning_rate': 1e-3}
            }
        ]
        
        total_recommendations = 0
        
        for scenario in test_scenarios:
            recommendations = optimizer.generate_optimization_recommendations(
                scenario['metrics'], 
                scenario['training_context']
            )
            
            print(f"   üìä {scenario['name']}: {len(recommendations)} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
            for rec in recommendations:
                assert isinstance(rec, OptimizationRecommendation), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å OptimizationRecommendation"
                assert isinstance(rec.priority, OptimizationPriority), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç"
                assert isinstance(rec.metric_type, PerformanceMetricType), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∏–ø –º–µ—Ç—Ä–∏–∫–∏"
                assert rec.description, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
                assert rec.suggested_action, "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
                assert 0 <= rec.expected_improvement <= 100, "–û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 0-100%"
                assert 0 <= rec.estimated_risk <= 1, "–†–∏—Å–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0.0-1.0"
                assert 0 <= rec.confidence <= 1, "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 0.0-1.0"
                assert isinstance(rec.parameters_to_change, dict), "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å–ª–æ–≤–∞—Ä–µ–º"
                
                print(f"     ‚Ä¢ {rec.priority.value}: {rec.description}")
                
            total_recommendations += len(recommendations)
        
        print(f"‚úÖ –í—Å–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {total_recommendations} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        print("‚úÖ PerformanceOptimizer: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        return True
        
    except Exception as e:
        print(f"‚ùå PerformanceOptimizer: {e}")
        return False


def test_adaptive_parameter_controller():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AdaptiveParameterController"""
    print("\nüß™ –¢–ï–°–¢ 3: AdaptiveParameterController")
    
    try:
        hparams = MockHparams()
        controller = AdaptiveParameterController(hparams)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        recommendations = [
            OptimizationRecommendation(
                priority=OptimizationPriority.HIGH,
                metric_type=PerformanceMetricType.TRAINING,
                description="–¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è learning rate",
                suggested_action="–£–º–µ–Ω—å—à–∏—Ç—å learning rate",
                expected_improvement=20.0,
                estimated_risk=0.2,
                parameters_to_change={'learning_rate': 5e-4},
                confidence=0.8
            ),
            OptimizationRecommendation(
                priority=OptimizationPriority.MEDIUM,
                metric_type=PerformanceMetricType.EFFICIENCY,
                description="–¢–µ—Å—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è batch size",
                suggested_action="–£–≤–µ–ª–∏—á–∏—Ç—å batch size",
                expected_improvement=15.0,
                estimated_risk=0.3,
                parameters_to_change={'batch_size': 24},
                confidence=0.7
            ),
            OptimizationRecommendation(
                priority=OptimizationPriority.LOW,
                metric_type=PerformanceMetricType.SYSTEM,
                description="–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ - –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è",
                suggested_action="–†–∏—Å–∫–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ",
                expected_improvement=50.0,
                estimated_risk=0.9,  # –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫
                parameters_to_change={'learning_rate': 1e-1},
                confidence=0.3  # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            )
        ]
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        original_lr = hparams.learning_rate
        original_batch_size = hparams.batch_size
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        applied_changes = controller.apply_optimization_recommendations(recommendations)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        assert len(applied_changes) >= 1, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
        if 'learning_rate' in applied_changes:
            assert hparams.learning_rate != original_lr, "Learning rate –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è"
            assert applied_changes['learning_rate']['old_value'] == original_lr
            assert applied_changes['learning_rate']['new_value'] == hparams.learning_rate
            print(f"‚úÖ Learning rate –∏–∑–º–µ–Ω–µ–Ω: {original_lr} ‚Üí {hparams.learning_rate}")
        
        if 'batch_size' in applied_changes:
            assert hparams.batch_size != original_batch_size, "Batch size –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è"
            print(f"‚úÖ Batch size –∏–∑–º–µ–Ω–µ–Ω: {original_batch_size} ‚Üí {hparams.batch_size}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
        # (learning_rate –Ω–µ –¥–æ–ª–∂–µ–Ω —Å—Ç–∞—Ç—å 0.1)
        assert hparams.learning_rate < 1e-2, "–†–∏—Å–∫–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ LR –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è"
        
        print(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ {len(applied_changes)} –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        print("‚úÖ AdaptiveParameterController: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        return True
        
    except Exception as e:
        print(f"‚ùå AdaptiveParameterController: {e}")
        return False


def test_unified_optimization_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ UnifiedPerformanceOptimizationSystem"""
    print("\nüß™ –¢–ï–°–¢ 4: UnifiedPerformanceOptimizationSystem")
    
    try:
        hparams = MockHparams()
        optimization_system = UnifiedPerformanceOptimizationSystem(
            hparams=hparams,
            enable_auto_optimization=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        assert optimization_system.profiler is not None, "Profiler –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        assert optimization_system.optimizer is not None, "Optimizer –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        assert optimization_system.parameter_controller is not None, "Parameter controller –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∞–≥–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        training_metrics = {
            'loss': 4.5,
            'learning_rate': 1e-3,
            'gradient_norm': 3.2,
            'attention_quality': 0.6
        }
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        result = optimization_system.optimize_performance_step(
            training_metrics=training_metrics,
            force_optimization=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        assert result['status'] == 'completed', f"–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'completed', –ø–æ–ª—É—á–µ–Ω: {result['status']}"
        assert 'performance_metrics' in result, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"
        assert 'recommendations_count' in result, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"
        assert 'applied_changes' in result, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        
        print(f"‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {result['recommendations_count']}")
        print(f"‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: {len(result['applied_changes'])}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        report = optimization_system.get_performance_report()
        
        assert 'current_performance' in report, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ç–µ–∫—É—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
        assert 'optimization_stats' in report, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
        assert report['status'] in ['healthy', 'needs_attention'], "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {report['status']}")
        print(f"‚úÖ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {report['current_performance']['compute_efficiency']:.1f}%")
        
        print("‚úÖ UnifiedPerformanceOptimizationSystem: –†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå UnifiedPerformanceOptimizationSystem: {e}")
        return False


def test_emergency_optimization():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("\nüß™ –¢–ï–°–¢ 5: Emergency Optimization")
    
    try:
        hparams = MockHparams()
        optimization_system = UnifiedPerformanceOptimizationSystem(
            hparams=hparams,
            enable_auto_optimization=True
        )
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        critical_metrics = {
            'gpu_memory_usage': 97.0,  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU –ø–∞–º—è—Ç–∏
            'memory_usage': 96.0,      # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM
            'loss': 15.0,
            'gradient_norm': 25.0
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ batch size
        original_batch_size = hparams.batch_size
        
        # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        result = optimization_system.activate_emergency_optimization(critical_metrics)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ä
        assert result.get('emergency_activation') == True, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è"
        assert 'emergency_changes' in result, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        
        emergency_changes = result['emergency_changes']
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–≥–æ —Å–Ω–∏–∂–µ–Ω–∏—è batch size
        if emergency_changes.get('emergency_batch_size_reduction'):
            assert hparams.batch_size < original_batch_size, "Batch size –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–º–µ–Ω—å—à–µ–Ω"
            print(f"‚úÖ –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ batch size: {original_batch_size} ‚Üí {hparams.batch_size}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏
        if emergency_changes.get('emergency_memory_cleanup'):
            print("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏")
        
        print("‚úÖ Emergency Optimization: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è")
        return True
        
    except Exception as e:
        print(f"‚ùå Emergency Optimization: {e}")
        return False


def test_integration_with_hparams():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ hparams"""
    print("\nüß™ –¢–ï–°–¢ 6: Integration with Real Hparams")
    
    if not HPARAMS_AVAILABLE:
        print("‚ö†Ô∏è Hparams –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç")
        return True
    
    try:
        from hparams import create_hparams
        
        hparams = create_hparams()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        optimization_system = create_performance_optimization_system(
            hparams=hparams,
            enable_auto_optimization=True
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        assert optimization_system is not None, "–°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞"
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        training_metrics = {
            'loss': float(getattr(hparams, 'target_loss', 5.0)),
            'learning_rate': float(hparams.learning_rate),
            'gradient_norm': 2.0,
            'attention_quality': 0.5
        }
        
        result = optimization_system.optimize_performance_step(
            training_metrics=training_metrics,
            force_optimization=True
        )
        
        assert result['status'] == 'completed', "–î–æ–ª–∂–Ω–∞ —É—Å–ø–µ—à–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ hparams"
        
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ hparams —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå Integration with Real Hparams: {e}")
        return False


def test_performance_monitoring_cycle():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\nüß™ –¢–ï–°–¢ 7: Performance Monitoring Cycle")
    
    try:
        hparams = MockHparams()
        optimization_system = UnifiedPerformanceOptimizationSystem(
            hparams=hparams,
            enable_auto_optimization=True
        )
        
        # –í–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        optimization_system.enable_continuous_optimization()
        assert optimization_system.optimization_active == True, "–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω–∞"
        
        # –°–∏–º—É–ª—è—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ü–∏–∫–ª–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        simulation_results = []
        
        for cycle in range(3):
            training_metrics = {
                'loss': 5.0 - cycle * 0.5,  # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
                'learning_rate': 1e-3,
                'gradient_norm': 2.0 + cycle * 0.5,
                'attention_quality': 0.5 + cycle * 0.1
            }
            
            result = optimization_system.optimize_performance_step(
                training_metrics=training_metrics,
                force_optimization=True
            )
            
            simulation_results.append(result)
            time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
            
            print(f"   –¶–∏–∫–ª {cycle + 1}: {result['recommendations_count']} —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, "
                  f"{len(result['applied_changes'])} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        assert len(optimization_system.optimization_results) >= 3, "–î–æ–ª–∂–Ω–∞ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        final_report = optimization_system.get_performance_report()
        print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {final_report['status']}")
        print(f"‚úÖ –í—Å–µ–≥–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: {final_report['optimization_stats']['total_optimizations']}")
        
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        optimization_system.disable_continuous_optimization()
        assert optimization_system.optimization_active == False, "–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞"
        
        print("‚úÖ Performance Monitoring Cycle: –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå Performance Monitoring Cycle: {e}")
        return False


def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Unified Performance Optimization System"""
    print("üöÄ –ù–ê–ß–ê–õ–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: Unified Performance Optimization System")
    print("=" * 80)
    
    if not OPTIMIZATION_SYSTEM_AVAILABLE:
        print("‚ùå Unified Performance Optimization System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return False
    
    tests = [
        test_system_profiler,
        test_performance_optimizer,
        test_adaptive_parameter_controller,
        test_unified_optimization_system,
        test_emergency_optimization,
        test_integration_with_hparams,
        test_performance_monitoring_cycle
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_func in tests:
        try:
            if test_func():
                passed_tests += 1
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_func.__name__}: {e}")
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests} ({passed_tests/total_tests*100:.1f}%)")
    
    if passed_tests == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("\nüöÄ Unified Performance Optimization System –≥–æ—Ç–æ–≤–∞ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("   ‚Ä¢ SystemProfiler - –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ bottleneck'–æ–≤")
        print("   ‚Ä¢ PerformanceOptimizer - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        print("   ‚Ä¢ AdaptiveParameterController - –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏")
        print("   ‚Ä¢ Emergency Optimization - —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è")
        print("   ‚Ä¢ Real-time Monitoring - –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print("   ‚Ä¢ Integration - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏")
        return True
    else:
        print(f"‚ö†Ô∏è {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–¥ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        return False


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1) 