#!/usr/bin/env python3
"""
–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è TensorBoard –ª–æ–≥–æ–≤ —Å MLflow
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ TensorBoard –≤ MLflow
"""

import os
import mlflow
import time
from pathlib import Path
import pandas as pd
from tensorboard.backend.event_processing.event_accumulator import EventAccumulator

class TensorBoardMLflowSync:
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ç–æ—Ä TensorBoard -> MLflow"""
    
    def __init__(self, tensorboard_log_dir="output"):
        self.tensorboard_log_dir = Path(tensorboard_log_dir)
        self.synced_files = set()
        
    def sync_all_metrics(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ TensorBoard –≤ MLflow"""
        print("üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é TensorBoard -> MLflow")
        
        # –ò—â–µ–º –≤—Å–µ –ª–æ–≥–∏ TensorBoard
        tb_dirs = list(self.tensorboard_log_dir.glob("**/events.out.tfevents.*"))
        
        for tb_file in tb_dirs:
            if str(tb_file) not in self.synced_files:
                self._sync_single_file(tb_file)
                self.synced_files.add(str(tb_file))
    
    def _sync_single_file(self, tb_file):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª TensorBoard"""
        try:
            print(f"üìä –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é: {tb_file}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ TensorBoard
            ea = EventAccumulator(str(tb_file.parent))
            ea.Reload()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∞–ª—è—Ä—ã
            scalar_tags = ea.Tags()['scalars']
            
            for tag in scalar_tags:
                scalar_events = ea.Scalars(tag)
                
                for event in scalar_events:
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ MLflow —Ñ–æ—Ä–º–∞—Ç
                    mlflow_tag = self._convert_tag_name(tag)
                    
                    try:
                        mlflow.log_metric(
                            mlflow_tag, 
                            event.value, 
                            step=event.step
                        )
                    except Exception as e:
                        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è {mlflow_tag}: {e}")
                        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ {tb_file}: {e}")
    
    def _convert_tag_name(self, tb_tag):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–º–µ–Ω–∞ —Ç–µ–≥–æ–≤ TensorBoard –≤ MLflow —Ñ–æ—Ä–º–∞—Ç"""
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        conversions = {
            'training.loss': 'Loss/Training_Total',
            'training.taco_loss': 'Loss/Tacotron', 
            'training.mi_loss': 'Loss/MI',
            'training.guide_loss': 'Loss/Guide',
            'training.gate_loss': 'Loss/Gate',
            'training.emb_loss': 'Loss/Embedding',
            'validation.loss': 'Loss/Validation',
            'grad.norm': 'Gradients/Norm',
            'learning.rate': 'Optimizer/Learning_Rate',
            'duration': 'Performance/Step_Duration'
        }
        
        return conversions.get(tb_tag, tb_tag.replace('.', '/'))

def add_missing_charts():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏ –≤ MLflow"""
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    additional_metrics = {
        'training/loss_components_ratio': {
            'description': '–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ loss',
            'formula': 'guide_loss / (taco_loss + 1e-8)'
        },
        'training/gradient_stability': {
            'description': '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤',
            'formula': '1.0 / (1.0 + grad_norm_std)'
        },
        'training/learning_efficiency': {
            'description': '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è',
            'formula': 'loss_improvement / step_time'
        }
    }
    
    print("üìà –î–æ–±–∞–≤–ª—è—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
    for metric, info in additional_metrics.items():
        print(f"  ‚Ä¢ {metric}: {info['description']}")

def setup_mlflow_enhanced_ui():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ MLflow UI –¥–ª—è –ª—É—á—à–µ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ TTS –º–µ—Ç—Ä–∏–∫"""
    
    print("""
üé® –ù–ê–°–¢–†–û–ô–ö–ê MLFLOW UI –î–õ–Ø TTS:

1. –û—Å–Ω–æ–≤–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:
   üìä Loss/Training_Total - –æ–±—â–∏–π loss –æ–±—É—á–µ–Ω–∏—è
   üìä Loss/Validation - validation loss  
   üìä Loss/Tacotron - –æ—Å–Ω–æ–≤–Ω–æ–π loss Tacotron2
   üìä Loss/Gate - gate –º–µ—Ö–∞–Ω–∏–∑–º
   üìä Gradients/Norm - –Ω–æ—Ä–º–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤

2. –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
   üñ•Ô∏è system/cpu_usage_percent
   üß† system/memory_usage_percent  
   üéÆ gpu_0/utilization_percent
   üå°Ô∏è gpu_0/temperature_celsius

3. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
   ‚ö° Performance/Step_Duration
   üìà Performance/Steps_Per_Second
   ‚è±Ô∏è Performance/ETA_Hours

–û—Ç–∫—Ä–æ–π—Ç–µ MLflow UI: http://localhost:5000
""")

if __name__ == "__main__":
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
    syncer = TensorBoardMLflowSync()
    syncer.sync_all_metrics()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    add_missing_charts()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ UI
    setup_mlflow_enhanced_ui()
