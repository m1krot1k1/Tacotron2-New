#!/usr/bin/env python3
"""
üß™ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Unified Logging System Integration

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ unified logging system
–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ exported-assets.

–¢–µ—Å—Ç—ã:
‚úÖ Unified Logging System functionality
‚úÖ Integration patches (MLflow, TensorBoard)
‚úÖ Component logger isolation
‚úÖ Priority-based metric filtering
‚úÖ Session management
‚úÖ Conflict resolution
‚úÖ Context-Aware Manager integration
‚úÖ Performance –∏ memory usage
‚úÖ Error handling –∏ graceful fallback
"""

import unittest
import tempfile
import shutil
import time
import threading
from unittest.mock import Mock, patch, MagicMock
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
try:
    from unified_logging_system import (
        UnifiedLoggingSystem, get_unified_logger, setup_component_logging,
        MetricPriority, LogLevel, ComponentLogger,
        start_unified_logging_session, end_unified_logging_session
    )
    UNIFIED_LOGGING_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Unified Logging System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    UNIFIED_LOGGING_AVAILABLE = False

try:
    from logging_integration_patches import (
        LoggingIntegrationManager, get_integration_manager,
        start_unified_logging_integration, stop_unified_logging_integration
    )
    INTEGRATION_PATCHES_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Integration Patches –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
    INTEGRATION_PATCHES_AVAILABLE = False

try:
    from context_aware_training_manager_unified import (
        UnifiedContextAwareTrainingManager, create_unified_context_manager
    )
    UNIFIED_CONTEXT_MANAGER_AVAILABLE = True
except ImportError as e:
    print(f"‚ùå Unified Context Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    UNIFIED_CONTEXT_MANAGER_AVAILABLE = False


class TestUnifiedLoggingSystem(unittest.TestCase):
    """üß™ –¢–µ—Å—Ç—ã –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ Unified Logging System"""

    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        self.temp_dir = tempfile.mkdtemp()
        self.test_config = {
            'session_name': 'test_session',
            'base_log_dir': self.temp_dir,
            'enable_mlflow': False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            'enable_tensorboard': False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–æ–≤
            'enable_file_logging': True,
            'max_history_entries': 100
        }

    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞"""
        try:
            shutil.rmtree(self.temp_dir)
        except:
            pass

    @unittest.skipUnless(UNIFIED_LOGGING_AVAILABLE, "Unified Logging System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    def test_unified_system_creation(self):
        """–¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ unified logging system"""
        system = UnifiedLoggingSystem(self.test_config)
        
        self.assertIsNotNone(system)
        self.assertEqual(system.config['session_name'], 'test_session')
        self.assertFalse(system._active)
        print("‚úÖ –¢–µ—Å—Ç 1: Unified system —Å–æ–∑–¥–∞–Ω–∏–µ - PASSED")

    @unittest.skipUnless(UNIFIED_LOGGING_AVAILABLE, "Unified Logging System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    def test_session_management(self):
        """–¢–µ—Å—Ç 2: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏"""
        system = UnifiedLoggingSystem(self.test_config)
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏
        success = system.start_session("test_session_2")
        self.assertTrue(success)
        self.assertTrue(system._active)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        system.end_session()
        self.assertFalse(system._active)
        print("‚úÖ –¢–µ—Å—Ç 2: Session management - PASSED")

    @unittest.skipUnless(UNIFIED_LOGGING_AVAILABLE, "Unified Logging System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    def test_component_registration(self):
        """–¢–µ—Å—Ç 3: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        system = UnifiedLoggingSystem(self.test_config)
        system.start_session("test_components")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        component_logger = system.register_component(
            "test_component", 
            config=None
        )
        
        self.assertIsInstance(component_logger, ComponentLogger)
        self.assertIn("test_component", system._components)
        
        system.end_session()
        print("‚úÖ –¢–µ—Å—Ç 3: Component registration - PASSED")

    @unittest.skipUnless(UNIFIED_LOGGING_AVAILABLE, "Unified Logging System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    def test_metric_logging(self):
        """–¢–µ—Å—Ç 4: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        system = UnifiedLoggingSystem(self.test_config)
        system.start_session("test_metrics")
        
        test_metrics = {
            'loss': 15.5,
            'accuracy': 0.85,
            'learning_rate': 1e-4
        }
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        system.log_metrics(
            test_metrics, 
            component="test_component",
            step=1,
            priority=MetricPriority.ESSENTIAL
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        self.assertGreater(len(system._metrics_history), 0)
        latest_entry = system._metrics_history[-1]
        self.assertEqual(latest_entry.component, "test_component")
        self.assertEqual(latest_entry.step, 1)
        
        system.end_session()
        print("‚úÖ –¢–µ—Å—Ç 4: Metric logging - PASSED")

    @unittest.skipUnless(UNIFIED_LOGGING_AVAILABLE, "Unified Logging System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    def test_priority_filtering(self):
        """–¢–µ—Å—Ç 5: –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        test_config = self.test_config.copy()
        test_config['metric_priority_threshold'] = MetricPriority.IMPORTANT
        
        system = UnifiedLoggingSystem(test_config)
        system.start_session("test_priority")
        
        initial_count = len(system._metrics_history)
        
        # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –¥–æ–ª–∂–µ–Ω –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è
        system.log_metrics(
            {'important_metric': 1.0},
            priority=MetricPriority.ESSENTIAL
        )
        
        # –ù–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –ù–ï –¥–æ–ª–∂–µ–Ω –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å—Å—è
        system.log_metrics(
            {'verbose_metric': 2.0},
            priority=MetricPriority.VERBOSE
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –º–µ—Ç—Ä–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞
        self.assertEqual(len(system._metrics_history), initial_count + 1)
        
        system.end_session()
        print("‚úÖ –¢–µ—Å—Ç 5: Priority filtering - PASSED")

    @unittest.skipUnless(UNIFIED_LOGGING_AVAILABLE, "Unified Logging System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    def test_singleton_pattern(self):
        """–¢–µ—Å—Ç 6: Singleton pattern"""
        system1 = get_unified_logger()
        system2 = get_unified_logger()
        
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ –æ–±—ä–µ–∫—Ç–æ–º
        self.assertIs(system1, system2)
        print("‚úÖ –¢–µ—Å—Ç 6: Singleton pattern - PASSED")


class TestLoggingIntegration(unittest.TestCase):
    """üß™ –¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –ø–∞—Ç—á–µ–π"""

    @unittest.skipUnless(INTEGRATION_PATCHES_AVAILABLE, "Integration patches –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    def test_integration_manager_creation(self):
        """–¢–µ—Å—Ç 7: –°–æ–∑–¥–∞–Ω–∏–µ integration manager"""
        manager = get_integration_manager()
        
        self.assertIsNotNone(manager)
        self.assertFalse(manager.integration_active)
        self.assertGreater(len(manager.target_components), 0)
        print("‚úÖ –¢–µ—Å—Ç 7: Integration manager creation - PASSED")

    @unittest.skipUnless(INTEGRATION_PATCHES_AVAILABLE, "Integration patches –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    def test_component_logger_creation(self):
        """–¢–µ—Å—Ç 8: –°–æ–∑–¥–∞–Ω–∏–µ component logger —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        success = start_unified_logging_integration("test_integration")
        
        if success:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å component logger
                component_logger = setup_component_logging(
                    "test_component",
                    MetricPriority.ESSENTIAL
                )
                
                self.assertIsInstance(component_logger, ComponentLogger)
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
                component_logger.log_metrics({'test_metric': 1.0})
                component_logger.info("Test message")
                
            finally:
                stop_unified_logging_integration()
        
        print("‚úÖ –¢–µ—Å—Ç 8: Component logger —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é - PASSED")

    @unittest.skipUnless(INTEGRATION_PATCHES_AVAILABLE, "Integration patches –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    def test_mlflow_patch(self):
        """–¢–µ—Å—Ç 9: MLflow patching"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        success = start_unified_logging_integration("test_mlflow_patch")
        
        if success:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å MLflow –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                try:
                    import mlflow
                    
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–≤–∞—Ç —Ñ—É–Ω–∫—Ü–∏–π
                    # –≠—Ç–∏ –≤—ã–∑–æ–≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω—ã
                    mlflow.start_run()
                    mlflow.log_metric("test_metric", 1.0)
                    mlflow.log_param("test_param", "test_value")
                    mlflow.end_run()
                    
                    print("‚úÖ MLflow —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω—ã")
                    
                except ImportError:
                    print("‚ö†Ô∏è MLflow –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                
            finally:
                stop_unified_logging_integration()
        
        print("‚úÖ –¢–µ—Å—Ç 9: MLflow patching - PASSED")


class TestUnifiedContextManager(unittest.TestCase):
    """üß™ –¢–µ—Å—Ç—ã Unified Context-Aware Manager"""

    @unittest.skipUnless(UNIFIED_CONTEXT_MANAGER_AVAILABLE, "Unified Context Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    def test_unified_context_manager_creation(self):
        """–¢–µ—Å—Ç 10: –°–æ–∑–¥–∞–Ω–∏–µ unified context manager"""
        config = {
            'history_size': 50,
            'initial_guided_weight': 4.5,
            'initial_lr': 1e-3
        }
        
        manager = create_unified_context_manager(config)
        
        self.assertIsNotNone(manager)
        self.assertEqual(manager.config, config)
        print("‚úÖ –¢–µ—Å—Ç 10: Unified context manager creation - PASSED")

    @unittest.skipUnless(UNIFIED_CONTEXT_MANAGER_AVAILABLE, "Unified Context Manager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    def test_context_manager_analysis(self):
        """–¢–µ—Å—Ç 11: –ê–Ω–∞–ª–∏–∑ —à–∞–≥–æ–≤ –≤ context manager"""
        config = {'history_size': 10}
        manager = create_unified_context_manager(config)
        
        test_metrics = {
            'loss': 15.5,
            'mel_loss': 12.0,
            'attention_diagonality': 0.045
        }
        
        # –ê–Ω–∞–ª–∏–∑ —à–∞–≥–∞
        recommendations = manager.analyze_training_step(test_metrics, step=1)
        
        self.assertIsInstance(recommendations, dict)
        self.assertIn('step', recommendations)
        self.assertEqual(recommendations['step'], 1)
        
        print("‚úÖ –¢–µ—Å—Ç 11: Context manager analysis - PASSED")


class TestPerformanceAndMemory(unittest.TestCase):
    """üß™ –¢–µ—Å—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"""

    @unittest.skipUnless(UNIFIED_LOGGING_AVAILABLE, "Unified Logging System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    def test_high_volume_logging(self):
        """–¢–µ—Å—Ç 12: –í—ã—Å–æ–∫–æ–æ–±—ä–µ–º–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        system = UnifiedLoggingSystem({
            'enable_mlflow': False,
            'enable_tensorboard': False,
            'max_history_entries': 1000
        })
        
        system.start_session("performance_test")
        
        start_time = time.time()
        
        # –õ–æ–≥–∏—Ä—É–µ–º 500 –º–µ—Ç—Ä–∏–∫
        for step in range(500):
            system.log_metrics(
                {'metric': step * 0.1},
                step=step,
                priority=MetricPriority.USEFUL
            )
        
        end_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration = end_time - start_time
        self.assertLess(duration, 5.0)  # –î–æ–ª–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 5 —Å–µ–∫—É–Ω–¥
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        self.assertLessEqual(len(system._metrics_history), 1000)
        
        system.end_session()
        print(f"‚úÖ –¢–µ—Å—Ç 12: High volume logging - PASSED ({duration:.2f}s –¥–ª—è 500 –º–µ—Ç—Ä–∏–∫)")

    @unittest.skipUnless(UNIFIED_LOGGING_AVAILABLE, "Unified Logging System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    def test_concurrent_logging(self):
        """–¢–µ—Å—Ç 13: –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        system = UnifiedLoggingSystem({
            'enable_mlflow': False,
            'enable_tensorboard': False
        })
        
        system.start_session("concurrent_test")
        
        def log_worker(worker_id):
            for i in range(50):
                system.log_metrics(
                    {f'worker_{worker_id}_metric': i},
                    step=worker_id * 100 + i
                )
        
        # –°–æ–∑–¥–∞–µ–º 5 –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        threads = []
        for worker_id in range(5):
            thread = threading.Thread(target=log_worker, args=(worker_id,))
            threads.append(thread)
        
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏
        for thread in threads:
            thread.start()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join()
        
        end_time = time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å
        expected_count = 5 * 50  # 5 workers * 50 metrics each
        self.assertGreaterEqual(len(system._metrics_history), expected_count)
        
        system.end_session()
        print(f"‚úÖ –¢–µ—Å—Ç 13: Concurrent logging - PASSED ({end_time - start_time:.2f}s)")


class TestErrorHandling(unittest.TestCase):
    """üß™ –¢–µ—Å—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ graceful fallback"""

    @unittest.skipUnless(UNIFIED_LOGGING_AVAILABLE, "Unified Logging System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    def test_invalid_metrics_handling(self):
        """–¢–µ—Å—Ç 14: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        system = UnifiedLoggingSystem({
            'enable_mlflow': False,
            'enable_tensorboard': False
        })
        
        system.start_session("error_test")
        
        initial_count = len(system._metrics_history)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –≤—Ö–æ–¥—ã
        test_cases = [
            None,
            [],
            "not_a_dict",
            {'invalid_value': float('nan')},
            {'None_value': None}
        ]
        
        for test_case in test_cases:
            try:
                system.log_metrics(test_case)
            except Exception:
                pass  # –û—à–∏–±–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        
        # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å
        system.log_metrics({'valid_metric': 1.0})
        self.assertGreater(len(system._metrics_history), initial_count)
        
        system.end_session()
        print("‚úÖ –¢–µ—Å—Ç 14: Invalid metrics handling - PASSED")

    @unittest.skipUnless(UNIFIED_LOGGING_AVAILABLE, "Unified Logging System –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    def test_graceful_degradation(self):
        """–¢–µ—Å—Ç 15: Graceful degradation –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –≤–Ω–µ—à–Ω–∏–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏
        system = UnifiedLoggingSystem({
            'enable_mlflow': False,
            'enable_tensorboard': False,
            'enable_file_logging': False  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–∞–∂–µ file logging
        })
        
        success = system.start_session("degradation_test")
        
        # –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –¥–∞–∂–µ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        self.assertTrue(success)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å
        system.log_metrics({'test_metric': 1.0})
        
        # –°–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
        system.end_session()
        
        print("‚úÖ –¢–µ—Å—Ç 15: Graceful degradation - PASSED")


def run_comprehensive_test():
    """
    üéØ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã unified logging system –∏ –≤—ã–≤–æ–¥–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.
    """
    print("üß™ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Unified Logging System")
    print("=" * 80)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_tests = 0
    passed_tests = 0
    failed_tests = 0
    skipped_tests = 0
    
    # –°–æ–∑–¥–∞–µ–º test suite
    test_suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    test_classes = [
        TestUnifiedLoggingSystem,
        TestLoggingIntegration,
        TestUnifiedContextManager,
        TestPerformanceAndMemory,
        TestErrorHandling
    ]
    
    for test_class in test_classes:
        tests = unittest.TestLoader().loadTestsFromTestCase(test_class)
        test_suite.addTests(tests)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    total_tests = result.testsRun
    failed_tests = len(result.failures) + len(result.errors)
    passed_tests = total_tests - failed_tests
    skipped_tests = len(result.skipped) if hasattr(result, 'skipped') else 0
    
    print("\n" + "=" * 80)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 80)
    
    print(f"–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total_tests}")
    print(f"‚úÖ –ü—Ä–æ—à–ª–∏: {passed_tests}")
    print(f"‚ùå –ù–µ –ø—Ä–æ—à–ª–∏: {failed_tests}")
    print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω—ã: {skipped_tests}")
    
    success_rate = (passed_tests / total_tests * 100) if total_tests > 0 else 0
    print(f"üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
    
    # –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    print("\nüîß –î–û–°–¢–£–ü–ù–û–°–¢–¨ –ö–û–ú–ü–û–ù–ï–ù–¢–û–í:")
    print(f"Unified Logging System: {'‚úÖ' if UNIFIED_LOGGING_AVAILABLE else '‚ùå'}")
    print(f"Integration Patches: {'‚úÖ' if INTEGRATION_PATCHES_AVAILABLE else '‚ùå'}")
    print(f"Unified Context Manager: {'‚úÖ' if UNIFIED_CONTEXT_MANAGER_AVAILABLE else '‚ùå'}")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    if not UNIFIED_LOGGING_AVAILABLE:
        print("- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ unified_logging_system.py")
    if not INTEGRATION_PATCHES_AVAILABLE:
        print("- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ logging_integration_patches.py")
    if not UNIFIED_CONTEXT_MANAGER_AVAILABLE:
        print("- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ context_aware_training_manager_unified.py")
    
    if failed_tests == 0:
        print("üéâ –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ Unified Logging System –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print(f"‚ö†Ô∏è {failed_tests} —Ç–µ—Å—Ç–æ–≤ –Ω–µ –ø—Ä–æ—à–ª–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.")
    
    return success_rate >= 80  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –µ—Å–ª–∏ >= 80% —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    success = run_comprehensive_test()
    
    if success:
        print("\nüèÜ Unified Logging System —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞!")
        exit(0)
    else:
        print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—è–≤–∏–ª–æ –ø—Ä–æ–±–ª–µ–º—ã")
        exit(1) 