#!/usr/bin/env python3
"""
–£—Å—Ç–∞–Ω–æ–≤–æ—á–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è TTS

–ê–≤—Ç–æ—Ä: AI Assistant
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import sys
import subprocess
from pathlib import Path

def print_header():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("=" * 80)
    print("üéØ –£–°–¢–ê–ù–û–í–ö–ê –£–ú–ù–û–ô –°–ò–°–¢–ï–ú–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø TTS")
    print("=" * 80)
    print("–ê–≤—Ç–æ—Ä: AI Assistant")
    print("–í–µ—Ä—Å–∏—è: 1.0.0")
    print("")

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    required_packages = [
        'mlflow', 'matplotlib', 'pandas', 'numpy', 
        'seaborn', 'scipy', 'pyyaml'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"   ‚úÖ {package}")
        except ImportError:
            print(f"   ‚ùå {package} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞–∫–µ—Ç—ã: {', '.join(missing_packages)}")
        
        install = input("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): ").lower().strip()
        if install in ['y', 'yes', '–¥–∞', '']:
            install_packages(missing_packages)
        else:
            print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞–∫–µ—Ç—ã –≤—Ä—É—á–Ω—É—é:")
            print(f"pip install {' '.join(missing_packages)}")
            return False
    
    print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n")
    return True

def install_packages(packages):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã"""
    print(f"üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤: {', '.join(packages)}")
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install"
        ] + packages)
        print("‚úÖ –ü–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ\n")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
        return False

def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
    
    required_files = [
        'training_export_system.py',
        'smart_training_logger.py', 
        'training_integration.py'
    ]
    
    missing_files = []
    
    for file in required_files:
        if Path(file).exists():
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file} - –û–¢–°–£–¢–°–¢–í–£–ï–¢")
            missing_files.append(file)
    
    if missing_files:
        print(f"\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        print("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–æ–∑–¥–∞–π—Ç–µ –∏—Ö")
        return False
    
    print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç\n")
    return True

def test_export_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —ç–∫—Å–ø–æ—Ä—Ç–∞...")
    
    try:
        from training_export_system import TrainingExportSystem
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä
        exporter = TrainingExportSystem()
        
        print("   ‚úÖ –ú–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print("   ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω")
        print("   ‚úÖ –ü–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_logging_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        from smart_training_logger import SmartTrainingLogger
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä
        logger = SmartTrainingLogger()
        
        print("   ‚úÖ –ú–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print("   ‚úÖ –õ–æ–≥–≥–µ—Ä —Å–æ–∑–¥–∞–Ω")
        print("   ‚úÖ –ü–∞–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
    
    try:
        from training_integration import setup_training_logging
        from training_integration import log_step_metrics, log_smart_tuner_change
        
        print("   ‚úÖ –ú–æ–¥—É–ª—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print("   ‚úÖ –§—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def create_demo_export():
    """–°–æ–∑–¥–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç"""
    print("üì§ –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞...")
    
    try:
        from training_export_system import export_training_for_ai
        
        # –ü—Ä–æ–±—É–µ–º —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π run
        result = export_training_for_ai()
        
        if result:
            print("   ‚úÖ –î–µ–º–æ-—ç–∫—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω")
            print(f"   üìÑ –§–∞–π–ª: {result}")
            return True
        else:
            print("   ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö MLflow –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            print("   üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ")
            return True
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-—ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        return False

def show_quick_start():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç quick start guide"""
    print("\n" + "=" * 80)
    print("üöÄ –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢")
    print("=" * 80)
    
    print("\n1. üì§ –≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è AI:")
    print("   python -c \"from training_export_system import export_training_for_ai; export_training_for_ai()\"")
    
    print("\n2. üìù –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å train.py:")
    print("   –î–æ–±–∞–≤—å—Ç–µ –≤ train.py:")
    print("   ```python")
    print("   from training_integration import setup_training_logging, log_step_metrics")
    print("   from training_integration import finish_training_logging, export_current_training")
    print("   ```")
    
    print("\n3. üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:")
    print("   - Markdown –ª–æ–≥–∏: smart_logs/training_sessions/")
    print("   - –ì—Ä–∞—Ñ–∏–∫–∏: smart_logs/plots/")
    print("   - –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è AI: training_exports/text_reports/")
    
    print("\n4. üìã –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
    print("   –ß–∏—Ç–∞–π—Ç–µ SMART_LOGGING_SYSTEM_README.md")
    
    print("\n" + "=" * 80)

def create_convenient_scripts():
    """–°–æ–∑–¥–∞–µ—Ç —É–¥–æ–±–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —É–¥–æ–±–Ω—ã—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤...")
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
    export_script = """#!/usr/bin/env python3
# –ë—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–ª—è AI Assistant
from training_export_system import export_training_for_ai
import sys

if len(sys.argv) > 1:
    run_id = sys.argv[1]
    print(f"–≠–∫—Å–ø–æ—Ä—Ç run: {run_id}")
    export_training_for_ai(run_id)
else:
    print("–≠–∫—Å–ø–æ—Ä—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
    export_training_for_ai()
"""
    
    with open("quick_export.py", "w", encoding="utf-8") as f:
        f.write(export_script)
    
    print("   ‚úÖ quick_export.py - –±—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç")
    
    # –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
    view_script = """#!/usr/bin/env python3
# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤
from pathlib import Path
import os

smart_logs = Path("smart_logs")
if smart_logs.exists():
    sessions = list(smart_logs.glob("training_sessions/*.md"))
    if sessions:
        latest = max(sessions, key=os.path.getctime)
        print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥: {latest}")
        
        if input("–û—Ç–∫—Ä—ã—Ç—å? (y/n): ").lower() in ['y', 'yes', '']:
            os.system(f"cat '{latest}'")
    else:
        print("–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
else:
    print("–ü–∞–ø–∫–∞ smart_logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
"""
    
    with open("view_logs.py", "w", encoding="utf-8") as f:
        f.write(view_script)
    
    print("   ‚úÖ view_logs.py - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print_header()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∏
    success = True
    success &= check_dependencies()
    success &= check_files()
    
    if not success:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
    success &= test_export_system()
    success &= test_logging_system() 
    success &= test_integration()
    
    if not success:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        return False
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã\n")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
    create_demo_export()
    create_convenient_scripts()
    
    # –§–∏–Ω–∞–ª
    print("\n‚úÖ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
    print("üéâ –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    
    show_quick_start()
    
    return True

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc() 